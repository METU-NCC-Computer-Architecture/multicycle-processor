// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "04/02/2020 10:33:49"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    RegisterFile8x8
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module RegisterFile8x8_vlg_sample_tst(
	CLK,
	Read_AddressA,
	Read_AddressB,
	WriteEN,
	Write_Address,
	Write_Data,
	sampler_tx
);
input  CLK;
input [2:0] Read_AddressA;
input [2:0] Read_AddressB;
input  WriteEN;
input [2:0] Write_Address;
input [7:0] Write_Data;
output sampler_tx;

reg sample;
time current_time;
always @(CLK or Read_AddressA or Read_AddressB or WriteEN or Write_Address or Write_Data)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module RegisterFile8x8_vlg_check_tst (
	Read_DataA,
	Read_DataB,
	sampler_rx
);
input [7:0] Read_DataA;
input [7:0] Read_DataB;
input sampler_rx;

reg [7:0] Read_DataA_expected;
reg [7:0] Read_DataB_expected;

reg [7:0] Read_DataA_prev;
reg [7:0] Read_DataB_prev;

reg [7:0] Read_DataA_expected_prev;
reg [7:0] Read_DataB_expected_prev;

reg [7:0] last_Read_DataA_exp;
reg [7:0] last_Read_DataB_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:2] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 2'b1;
end

// update real /o prevs

always @(trigger)
begin
	Read_DataA_prev = Read_DataA;
	Read_DataB_prev = Read_DataB;
end

// update expected /o prevs

always @(trigger)
begin
	Read_DataA_expected_prev = Read_DataA_expected;
	Read_DataB_expected_prev = Read_DataB_expected;
end


// expected Read_DataA[ 7 ]
initial
begin
	Read_DataA_expected[7] = 1'bX;
end 
// expected Read_DataA[ 6 ]
initial
begin
	Read_DataA_expected[6] = 1'bX;
end 
// expected Read_DataA[ 5 ]
initial
begin
	Read_DataA_expected[5] = 1'bX;
end 
// expected Read_DataA[ 4 ]
initial
begin
	Read_DataA_expected[4] = 1'bX;
end 
// expected Read_DataA[ 3 ]
initial
begin
	Read_DataA_expected[3] = 1'bX;
end 
// expected Read_DataA[ 2 ]
initial
begin
	Read_DataA_expected[2] = 1'bX;
end 
// expected Read_DataA[ 1 ]
initial
begin
	Read_DataA_expected[1] = 1'bX;
end 
// expected Read_DataA[ 0 ]
initial
begin
	Read_DataA_expected[0] = 1'bX;
end 
// expected Read_DataB[ 7 ]
initial
begin
	Read_DataB_expected[7] = 1'bX;
end 
// expected Read_DataB[ 6 ]
initial
begin
	Read_DataB_expected[6] = 1'bX;
end 
// expected Read_DataB[ 5 ]
initial
begin
	Read_DataB_expected[5] = 1'bX;
end 
// expected Read_DataB[ 4 ]
initial
begin
	Read_DataB_expected[4] = 1'bX;
end 
// expected Read_DataB[ 3 ]
initial
begin
	Read_DataB_expected[3] = 1'bX;
end 
// expected Read_DataB[ 2 ]
initial
begin
	Read_DataB_expected[2] = 1'bX;
end 
// expected Read_DataB[ 1 ]
initial
begin
	Read_DataB_expected[1] = 1'bX;
end 
// expected Read_DataB[ 0 ]
initial
begin
	Read_DataB_expected[0] = 1'bX;
end 
// generate trigger
always @(Read_DataA_expected or Read_DataA or Read_DataB_expected or Read_DataB)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected Read_DataA = %b | expected Read_DataB = %b | ",Read_DataA_expected_prev,Read_DataB_expected_prev);
	$display("| real Read_DataA = %b | real Read_DataB = %b | ",Read_DataA_prev,Read_DataB_prev);
`endif
	if (
		( Read_DataA_expected_prev[0] !== 1'bx ) && ( Read_DataA_prev[0] !== Read_DataA_expected_prev[0] )
		&& ((Read_DataA_expected_prev[0] !== last_Read_DataA_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Read_DataA[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Read_DataA_expected_prev);
		$display ("     Real value = %b", Read_DataA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Read_DataA_exp[0] = Read_DataA_expected_prev[0];
	end
	if (
		( Read_DataA_expected_prev[1] !== 1'bx ) && ( Read_DataA_prev[1] !== Read_DataA_expected_prev[1] )
		&& ((Read_DataA_expected_prev[1] !== last_Read_DataA_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Read_DataA[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Read_DataA_expected_prev);
		$display ("     Real value = %b", Read_DataA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Read_DataA_exp[1] = Read_DataA_expected_prev[1];
	end
	if (
		( Read_DataA_expected_prev[2] !== 1'bx ) && ( Read_DataA_prev[2] !== Read_DataA_expected_prev[2] )
		&& ((Read_DataA_expected_prev[2] !== last_Read_DataA_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Read_DataA[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Read_DataA_expected_prev);
		$display ("     Real value = %b", Read_DataA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Read_DataA_exp[2] = Read_DataA_expected_prev[2];
	end
	if (
		( Read_DataA_expected_prev[3] !== 1'bx ) && ( Read_DataA_prev[3] !== Read_DataA_expected_prev[3] )
		&& ((Read_DataA_expected_prev[3] !== last_Read_DataA_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Read_DataA[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Read_DataA_expected_prev);
		$display ("     Real value = %b", Read_DataA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Read_DataA_exp[3] = Read_DataA_expected_prev[3];
	end
	if (
		( Read_DataA_expected_prev[4] !== 1'bx ) && ( Read_DataA_prev[4] !== Read_DataA_expected_prev[4] )
		&& ((Read_DataA_expected_prev[4] !== last_Read_DataA_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Read_DataA[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Read_DataA_expected_prev);
		$display ("     Real value = %b", Read_DataA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Read_DataA_exp[4] = Read_DataA_expected_prev[4];
	end
	if (
		( Read_DataA_expected_prev[5] !== 1'bx ) && ( Read_DataA_prev[5] !== Read_DataA_expected_prev[5] )
		&& ((Read_DataA_expected_prev[5] !== last_Read_DataA_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Read_DataA[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Read_DataA_expected_prev);
		$display ("     Real value = %b", Read_DataA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Read_DataA_exp[5] = Read_DataA_expected_prev[5];
	end
	if (
		( Read_DataA_expected_prev[6] !== 1'bx ) && ( Read_DataA_prev[6] !== Read_DataA_expected_prev[6] )
		&& ((Read_DataA_expected_prev[6] !== last_Read_DataA_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Read_DataA[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Read_DataA_expected_prev);
		$display ("     Real value = %b", Read_DataA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Read_DataA_exp[6] = Read_DataA_expected_prev[6];
	end
	if (
		( Read_DataA_expected_prev[7] !== 1'bx ) && ( Read_DataA_prev[7] !== Read_DataA_expected_prev[7] )
		&& ((Read_DataA_expected_prev[7] !== last_Read_DataA_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Read_DataA[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Read_DataA_expected_prev);
		$display ("     Real value = %b", Read_DataA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Read_DataA_exp[7] = Read_DataA_expected_prev[7];
	end
	if (
		( Read_DataB_expected_prev[0] !== 1'bx ) && ( Read_DataB_prev[0] !== Read_DataB_expected_prev[0] )
		&& ((Read_DataB_expected_prev[0] !== last_Read_DataB_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Read_DataB[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Read_DataB_expected_prev);
		$display ("     Real value = %b", Read_DataB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Read_DataB_exp[0] = Read_DataB_expected_prev[0];
	end
	if (
		( Read_DataB_expected_prev[1] !== 1'bx ) && ( Read_DataB_prev[1] !== Read_DataB_expected_prev[1] )
		&& ((Read_DataB_expected_prev[1] !== last_Read_DataB_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Read_DataB[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Read_DataB_expected_prev);
		$display ("     Real value = %b", Read_DataB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Read_DataB_exp[1] = Read_DataB_expected_prev[1];
	end
	if (
		( Read_DataB_expected_prev[2] !== 1'bx ) && ( Read_DataB_prev[2] !== Read_DataB_expected_prev[2] )
		&& ((Read_DataB_expected_prev[2] !== last_Read_DataB_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Read_DataB[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Read_DataB_expected_prev);
		$display ("     Real value = %b", Read_DataB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Read_DataB_exp[2] = Read_DataB_expected_prev[2];
	end
	if (
		( Read_DataB_expected_prev[3] !== 1'bx ) && ( Read_DataB_prev[3] !== Read_DataB_expected_prev[3] )
		&& ((Read_DataB_expected_prev[3] !== last_Read_DataB_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Read_DataB[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Read_DataB_expected_prev);
		$display ("     Real value = %b", Read_DataB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Read_DataB_exp[3] = Read_DataB_expected_prev[3];
	end
	if (
		( Read_DataB_expected_prev[4] !== 1'bx ) && ( Read_DataB_prev[4] !== Read_DataB_expected_prev[4] )
		&& ((Read_DataB_expected_prev[4] !== last_Read_DataB_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Read_DataB[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Read_DataB_expected_prev);
		$display ("     Real value = %b", Read_DataB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Read_DataB_exp[4] = Read_DataB_expected_prev[4];
	end
	if (
		( Read_DataB_expected_prev[5] !== 1'bx ) && ( Read_DataB_prev[5] !== Read_DataB_expected_prev[5] )
		&& ((Read_DataB_expected_prev[5] !== last_Read_DataB_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Read_DataB[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Read_DataB_expected_prev);
		$display ("     Real value = %b", Read_DataB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Read_DataB_exp[5] = Read_DataB_expected_prev[5];
	end
	if (
		( Read_DataB_expected_prev[6] !== 1'bx ) && ( Read_DataB_prev[6] !== Read_DataB_expected_prev[6] )
		&& ((Read_DataB_expected_prev[6] !== last_Read_DataB_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Read_DataB[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Read_DataB_expected_prev);
		$display ("     Real value = %b", Read_DataB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Read_DataB_exp[6] = Read_DataB_expected_prev[6];
	end
	if (
		( Read_DataB_expected_prev[7] !== 1'bx ) && ( Read_DataB_prev[7] !== Read_DataB_expected_prev[7] )
		&& ((Read_DataB_expected_prev[7] !== last_Read_DataB_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Read_DataB[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Read_DataB_expected_prev);
		$display ("     Real value = %b", Read_DataB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Read_DataB_exp[7] = Read_DataB_expected_prev[7];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module RegisterFile8x8_vlg_vec_tst();
// constants                                           
// general purpose registers
reg CLK;
reg [2:0] Read_AddressA;
reg [2:0] Read_AddressB;
reg WriteEN;
reg [2:0] Write_Address;
reg [7:0] Write_Data;
// wires                                               
wire [7:0] Read_DataA;
wire [7:0] Read_DataB;

wire sampler;                             

// assign statements (if any)                          
RegisterFile8x8 i1 (
// port map - connection between master ports and signals/registers   
	.CLK(CLK),
	.Read_AddressA(Read_AddressA),
	.Read_AddressB(Read_AddressB),
	.Read_DataA(Read_DataA),
	.Read_DataB(Read_DataB),
	.WriteEN(WriteEN),
	.Write_Address(Write_Address),
	.Write_Data(Write_Data)
);

// CLK
always
begin
	CLK = 1'b0;
	CLK = #10000 1'b1;
	#10000;
end 
// Read_AddressA[ 2 ]
initial
begin
	Read_AddressA[2] = 1'b0;
	Read_AddressA[2] = #80000 1'b1;
	Read_AddressA[2] = #100000 1'b0;
end 
// Read_AddressA[ 1 ]
initial
begin
	Read_AddressA[1] = 1'b0;
end 
// Read_AddressA[ 0 ]
initial
begin
	Read_AddressA[0] = 1'b0;
	Read_AddressA[0] = #80000 1'b1;
	Read_AddressA[0] = #100000 1'b0;
end 
// Read_AddressB[ 2 ]
initial
begin
	Read_AddressB[2] = 1'b0;
	Read_AddressB[2] = #180000 1'b1;
end 
// Read_AddressB[ 1 ]
initial
begin
	Read_AddressB[1] = 1'b0;
	Read_AddressB[1] = #320000 1'b1;
end 
// Read_AddressB[ 0 ]
initial
begin
	Read_AddressB[0] = 1'b0;
	Read_AddressB[0] = #180000 1'b1;
	Read_AddressB[0] = #140000 1'b0;
end 

// WriteEN
initial
begin
	WriteEN = 1'b0;
	WriteEN = #40000 1'b1;
	WriteEN = #20000 1'b0;
end 
// Write_Address[ 2 ]
initial
begin
	Write_Address[2] = 1'b1;
end 
// Write_Address[ 1 ]
initial
begin
	Write_Address[1] = 1'b0;
end 
// Write_Address[ 0 ]
initial
begin
	Write_Address[0] = 1'b1;
end 
// Write_Data[ 7 ]
initial
begin
	Write_Data[7] = 1'b0;
end 
// Write_Data[ 6 ]
initial
begin
	Write_Data[6] = 1'b0;
end 
// Write_Data[ 5 ]
initial
begin
	Write_Data[5] = 1'b0;
end 
// Write_Data[ 4 ]
initial
begin
	Write_Data[4] = 1'b0;
end 
// Write_Data[ 3 ]
initial
begin
	Write_Data[3] = 1'b0;
end 
// Write_Data[ 2 ]
initial
begin
	Write_Data[2] = 1'b0;
	Write_Data[2] = #10000 1'b1;
	Write_Data[2] = #330000 1'b0;
end 
// Write_Data[ 1 ]
initial
begin
	Write_Data[1] = 1'b0;
	Write_Data[1] = #10000 1'b1;
	Write_Data[1] = #330000 1'b0;
end 
// Write_Data[ 0 ]
initial
begin
	Write_Data[0] = 1'b0;
end 

RegisterFile8x8_vlg_sample_tst tb_sample (
	.CLK(CLK),
	.Read_AddressA(Read_AddressA),
	.Read_AddressB(Read_AddressB),
	.WriteEN(WriteEN),
	.Write_Address(Write_Address),
	.Write_Data(Write_Data),
	.sampler_tx(sampler)
);

RegisterFile8x8_vlg_check_tst tb_out(
	.Read_DataA(Read_DataA),
	.Read_DataB(Read_DataB),
	.sampler_rx(sampler)
);
endmodule

