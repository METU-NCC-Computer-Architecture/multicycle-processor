// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "05/09/2020 18:00:12"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    CPU
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module CPU_vlg_sample_tst(
	AUTO,
	CLK,
	DATA_MEM_OUT,
	INST_MEM_OUT,
	RUN,
	sampler_tx
);
input  AUTO;
input  CLK;
input [15:0] DATA_MEM_OUT;
input [15:0] INST_MEM_OUT;
input  RUN;
output sampler_tx;

reg sample;
time current_time;
always @(AUTO or CLK or DATA_MEM_OUT or INST_MEM_OUT or RUN)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module CPU_vlg_check_tst (
	A_REG,
	ABC,
	ALU_OUT,
	B_REG,
	counterchk,
	inst_mem_addr,
	RF_A_READ_PORT,
	RF_B_READ_PORT,
	RF_W_ADDR,
	RF_W_DATA,
	sampler_rx
);
input [7:0] A_REG;
input [15:0] ABC;
input [7:0] ALU_OUT;
input [7:0] B_REG;
input [3:0] counterchk;
input [9:0] inst_mem_addr;
input [7:0] RF_A_READ_PORT;
input [7:0] RF_B_READ_PORT;
input [2:0] RF_W_ADDR;
input [7:0] RF_W_DATA;
input sampler_rx;

reg [7:0] A_REG_expected;
reg [15:0] ABC_expected;
reg [7:0] ALU_OUT_expected;
reg [7:0] B_REG_expected;
reg [3:0] counterchk_expected;
reg [9:0] inst_mem_addr_expected;
reg [7:0] RF_A_READ_PORT_expected;
reg [7:0] RF_B_READ_PORT_expected;
reg [2:0] RF_W_ADDR_expected;
reg [7:0] RF_W_DATA_expected;

reg [7:0] A_REG_prev;
reg [15:0] ABC_prev;
reg [7:0] ALU_OUT_prev;
reg [7:0] B_REG_prev;
reg [3:0] counterchk_prev;
reg [9:0] inst_mem_addr_prev;
reg [7:0] RF_A_READ_PORT_prev;
reg [7:0] RF_B_READ_PORT_prev;
reg [2:0] RF_W_ADDR_prev;
reg [7:0] RF_W_DATA_prev;

reg [7:0] A_REG_expected_prev;
reg [15:0] ABC_expected_prev;
reg [7:0] ALU_OUT_expected_prev;
reg [7:0] B_REG_expected_prev;
reg [3:0] counterchk_expected_prev;
reg [9:0] inst_mem_addr_expected_prev;
reg [7:0] RF_A_READ_PORT_expected_prev;
reg [7:0] RF_B_READ_PORT_expected_prev;
reg [2:0] RF_W_ADDR_expected_prev;
reg [7:0] RF_W_DATA_expected_prev;

reg [7:0] last_A_REG_exp;
reg [15:0] last_ABC_exp;
reg [7:0] last_ALU_OUT_exp;
reg [7:0] last_B_REG_exp;
reg [3:0] last_counterchk_exp;
reg [9:0] last_inst_mem_addr_exp;
reg [7:0] last_RF_A_READ_PORT_exp;
reg [7:0] last_RF_B_READ_PORT_exp;
reg [2:0] last_RF_W_ADDR_exp;
reg [7:0] last_RF_W_DATA_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:10] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 10'b1;
end

// update real /o prevs

always @(trigger)
begin
	A_REG_prev = A_REG;
	ABC_prev = ABC;
	ALU_OUT_prev = ALU_OUT;
	B_REG_prev = B_REG;
	counterchk_prev = counterchk;
	inst_mem_addr_prev = inst_mem_addr;
	RF_A_READ_PORT_prev = RF_A_READ_PORT;
	RF_B_READ_PORT_prev = RF_B_READ_PORT;
	RF_W_ADDR_prev = RF_W_ADDR;
	RF_W_DATA_prev = RF_W_DATA;
end

// update expected /o prevs

always @(trigger)
begin
	A_REG_expected_prev = A_REG_expected;
	ABC_expected_prev = ABC_expected;
	ALU_OUT_expected_prev = ALU_OUT_expected;
	B_REG_expected_prev = B_REG_expected;
	counterchk_expected_prev = counterchk_expected;
	inst_mem_addr_expected_prev = inst_mem_addr_expected;
	RF_A_READ_PORT_expected_prev = RF_A_READ_PORT_expected;
	RF_B_READ_PORT_expected_prev = RF_B_READ_PORT_expected;
	RF_W_ADDR_expected_prev = RF_W_ADDR_expected;
	RF_W_DATA_expected_prev = RF_W_DATA_expected;
end


// expected ABC[ 15 ]
initial
begin
	ABC_expected[15] = 1'bX;
end 
// expected ABC[ 14 ]
initial
begin
	ABC_expected[14] = 1'bX;
end 
// expected ABC[ 13 ]
initial
begin
	ABC_expected[13] = 1'bX;
end 
// expected ABC[ 12 ]
initial
begin
	ABC_expected[12] = 1'bX;
end 
// expected ABC[ 11 ]
initial
begin
	ABC_expected[11] = 1'bX;
end 
// expected ABC[ 10 ]
initial
begin
	ABC_expected[10] = 1'bX;
end 
// expected ABC[ 9 ]
initial
begin
	ABC_expected[9] = 1'bX;
end 
// expected ABC[ 8 ]
initial
begin
	ABC_expected[8] = 1'bX;
end 
// expected ABC[ 7 ]
initial
begin
	ABC_expected[7] = 1'bX;
end 
// expected ABC[ 6 ]
initial
begin
	ABC_expected[6] = 1'bX;
end 
// expected ABC[ 5 ]
initial
begin
	ABC_expected[5] = 1'bX;
end 
// expected ABC[ 4 ]
initial
begin
	ABC_expected[4] = 1'bX;
end 
// expected ABC[ 3 ]
initial
begin
	ABC_expected[3] = 1'bX;
end 
// expected ABC[ 2 ]
initial
begin
	ABC_expected[2] = 1'bX;
end 
// expected ABC[ 1 ]
initial
begin
	ABC_expected[1] = 1'bX;
end 
// expected ABC[ 0 ]
initial
begin
	ABC_expected[0] = 1'bX;
end 
// expected A_REG[ 7 ]
initial
begin
	A_REG_expected[7] = 1'bX;
end 
// expected A_REG[ 6 ]
initial
begin
	A_REG_expected[6] = 1'bX;
end 
// expected A_REG[ 5 ]
initial
begin
	A_REG_expected[5] = 1'bX;
end 
// expected A_REG[ 4 ]
initial
begin
	A_REG_expected[4] = 1'bX;
end 
// expected A_REG[ 3 ]
initial
begin
	A_REG_expected[3] = 1'bX;
end 
// expected A_REG[ 2 ]
initial
begin
	A_REG_expected[2] = 1'bX;
end 
// expected A_REG[ 1 ]
initial
begin
	A_REG_expected[1] = 1'bX;
end 
// expected A_REG[ 0 ]
initial
begin
	A_REG_expected[0] = 1'bX;
end 
// expected ALU_OUT[ 7 ]
initial
begin
	ALU_OUT_expected[7] = 1'bX;
end 
// expected ALU_OUT[ 6 ]
initial
begin
	ALU_OUT_expected[6] = 1'bX;
end 
// expected ALU_OUT[ 5 ]
initial
begin
	ALU_OUT_expected[5] = 1'bX;
end 
// expected ALU_OUT[ 4 ]
initial
begin
	ALU_OUT_expected[4] = 1'bX;
end 
// expected ALU_OUT[ 3 ]
initial
begin
	ALU_OUT_expected[3] = 1'bX;
end 
// expected ALU_OUT[ 2 ]
initial
begin
	ALU_OUT_expected[2] = 1'bX;
end 
// expected ALU_OUT[ 1 ]
initial
begin
	ALU_OUT_expected[1] = 1'bX;
end 
// expected ALU_OUT[ 0 ]
initial
begin
	ALU_OUT_expected[0] = 1'bX;
end 
// expected B_REG[ 7 ]
initial
begin
	B_REG_expected[7] = 1'bX;
end 
// expected B_REG[ 6 ]
initial
begin
	B_REG_expected[6] = 1'bX;
end 
// expected B_REG[ 5 ]
initial
begin
	B_REG_expected[5] = 1'bX;
end 
// expected B_REG[ 4 ]
initial
begin
	B_REG_expected[4] = 1'bX;
end 
// expected B_REG[ 3 ]
initial
begin
	B_REG_expected[3] = 1'bX;
end 
// expected B_REG[ 2 ]
initial
begin
	B_REG_expected[2] = 1'bX;
end 
// expected B_REG[ 1 ]
initial
begin
	B_REG_expected[1] = 1'bX;
end 
// expected B_REG[ 0 ]
initial
begin
	B_REG_expected[0] = 1'bX;
end 
// expected RF_A_READ_PORT[ 7 ]
initial
begin
	RF_A_READ_PORT_expected[7] = 1'bX;
end 
// expected RF_A_READ_PORT[ 6 ]
initial
begin
	RF_A_READ_PORT_expected[6] = 1'bX;
end 
// expected RF_A_READ_PORT[ 5 ]
initial
begin
	RF_A_READ_PORT_expected[5] = 1'bX;
end 
// expected RF_A_READ_PORT[ 4 ]
initial
begin
	RF_A_READ_PORT_expected[4] = 1'bX;
end 
// expected RF_A_READ_PORT[ 3 ]
initial
begin
	RF_A_READ_PORT_expected[3] = 1'bX;
end 
// expected RF_A_READ_PORT[ 2 ]
initial
begin
	RF_A_READ_PORT_expected[2] = 1'bX;
end 
// expected RF_A_READ_PORT[ 1 ]
initial
begin
	RF_A_READ_PORT_expected[1] = 1'bX;
end 
// expected RF_A_READ_PORT[ 0 ]
initial
begin
	RF_A_READ_PORT_expected[0] = 1'bX;
end 
// expected RF_B_READ_PORT[ 7 ]
initial
begin
	RF_B_READ_PORT_expected[7] = 1'bX;
end 
// expected RF_B_READ_PORT[ 6 ]
initial
begin
	RF_B_READ_PORT_expected[6] = 1'bX;
end 
// expected RF_B_READ_PORT[ 5 ]
initial
begin
	RF_B_READ_PORT_expected[5] = 1'bX;
end 
// expected RF_B_READ_PORT[ 4 ]
initial
begin
	RF_B_READ_PORT_expected[4] = 1'bX;
end 
// expected RF_B_READ_PORT[ 3 ]
initial
begin
	RF_B_READ_PORT_expected[3] = 1'bX;
end 
// expected RF_B_READ_PORT[ 2 ]
initial
begin
	RF_B_READ_PORT_expected[2] = 1'bX;
end 
// expected RF_B_READ_PORT[ 1 ]
initial
begin
	RF_B_READ_PORT_expected[1] = 1'bX;
end 
// expected RF_B_READ_PORT[ 0 ]
initial
begin
	RF_B_READ_PORT_expected[0] = 1'bX;
end 
// expected RF_W_ADDR[ 2 ]
initial
begin
	RF_W_ADDR_expected[2] = 1'bX;
end 
// expected RF_W_ADDR[ 1 ]
initial
begin
	RF_W_ADDR_expected[1] = 1'bX;
end 
// expected RF_W_ADDR[ 0 ]
initial
begin
	RF_W_ADDR_expected[0] = 1'bX;
end 
// expected RF_W_DATA[ 7 ]
initial
begin
	RF_W_DATA_expected[7] = 1'bX;
end 
// expected RF_W_DATA[ 6 ]
initial
begin
	RF_W_DATA_expected[6] = 1'bX;
end 
// expected RF_W_DATA[ 5 ]
initial
begin
	RF_W_DATA_expected[5] = 1'bX;
end 
// expected RF_W_DATA[ 4 ]
initial
begin
	RF_W_DATA_expected[4] = 1'bX;
end 
// expected RF_W_DATA[ 3 ]
initial
begin
	RF_W_DATA_expected[3] = 1'bX;
end 
// expected RF_W_DATA[ 2 ]
initial
begin
	RF_W_DATA_expected[2] = 1'bX;
end 
// expected RF_W_DATA[ 1 ]
initial
begin
	RF_W_DATA_expected[1] = 1'bX;
end 
// expected RF_W_DATA[ 0 ]
initial
begin
	RF_W_DATA_expected[0] = 1'bX;
end 
// expected counterchk[ 3 ]
initial
begin
	counterchk_expected[3] = 1'bX;
end 
// expected counterchk[ 2 ]
initial
begin
	counterchk_expected[2] = 1'bX;
end 
// expected counterchk[ 1 ]
initial
begin
	counterchk_expected[1] = 1'bX;
end 
// expected counterchk[ 0 ]
initial
begin
	counterchk_expected[0] = 1'bX;
end 
// expected inst_mem_addr[ 9 ]
initial
begin
	inst_mem_addr_expected[9] = 1'bX;
end 
// expected inst_mem_addr[ 8 ]
initial
begin
	inst_mem_addr_expected[8] = 1'bX;
end 
// expected inst_mem_addr[ 7 ]
initial
begin
	inst_mem_addr_expected[7] = 1'bX;
end 
// expected inst_mem_addr[ 6 ]
initial
begin
	inst_mem_addr_expected[6] = 1'bX;
end 
// expected inst_mem_addr[ 5 ]
initial
begin
	inst_mem_addr_expected[5] = 1'bX;
end 
// expected inst_mem_addr[ 4 ]
initial
begin
	inst_mem_addr_expected[4] = 1'bX;
end 
// expected inst_mem_addr[ 3 ]
initial
begin
	inst_mem_addr_expected[3] = 1'bX;
end 
// expected inst_mem_addr[ 2 ]
initial
begin
	inst_mem_addr_expected[2] = 1'bX;
end 
// expected inst_mem_addr[ 1 ]
initial
begin
	inst_mem_addr_expected[1] = 1'bX;
end 
// expected inst_mem_addr[ 0 ]
initial
begin
	inst_mem_addr_expected[0] = 1'bX;
end 
// generate trigger
always @(A_REG_expected or A_REG or ABC_expected or ABC or ALU_OUT_expected or ALU_OUT or B_REG_expected or B_REG or counterchk_expected or counterchk or inst_mem_addr_expected or inst_mem_addr or RF_A_READ_PORT_expected or RF_A_READ_PORT or RF_B_READ_PORT_expected or RF_B_READ_PORT or RF_W_ADDR_expected or RF_W_ADDR or RF_W_DATA_expected or RF_W_DATA)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected A_REG = %b | expected ABC = %b | expected ALU_OUT = %b | expected B_REG = %b | expected counterchk = %b | expected inst_mem_addr = %b | expected RF_A_READ_PORT = %b | expected RF_B_READ_PORT = %b | expected RF_W_ADDR = %b | expected RF_W_DATA = %b | ",A_REG_expected_prev,ABC_expected_prev,ALU_OUT_expected_prev,B_REG_expected_prev,counterchk_expected_prev,inst_mem_addr_expected_prev,RF_A_READ_PORT_expected_prev,RF_B_READ_PORT_expected_prev,RF_W_ADDR_expected_prev,RF_W_DATA_expected_prev);
	$display("| real A_REG = %b | real ABC = %b | real ALU_OUT = %b | real B_REG = %b | real counterchk = %b | real inst_mem_addr = %b | real RF_A_READ_PORT = %b | real RF_B_READ_PORT = %b | real RF_W_ADDR = %b | real RF_W_DATA = %b | ",A_REG_prev,ABC_prev,ALU_OUT_prev,B_REG_prev,counterchk_prev,inst_mem_addr_prev,RF_A_READ_PORT_prev,RF_B_READ_PORT_prev,RF_W_ADDR_prev,RF_W_DATA_prev);
`endif
	if (
		( A_REG_expected_prev[0] !== 1'bx ) && ( A_REG_prev[0] !== A_REG_expected_prev[0] )
		&& ((A_REG_expected_prev[0] !== last_A_REG_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A_REG[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_REG_expected_prev);
		$display ("     Real value = %b", A_REG_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_REG_exp[0] = A_REG_expected_prev[0];
	end
	if (
		( A_REG_expected_prev[1] !== 1'bx ) && ( A_REG_prev[1] !== A_REG_expected_prev[1] )
		&& ((A_REG_expected_prev[1] !== last_A_REG_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A_REG[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_REG_expected_prev);
		$display ("     Real value = %b", A_REG_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_REG_exp[1] = A_REG_expected_prev[1];
	end
	if (
		( A_REG_expected_prev[2] !== 1'bx ) && ( A_REG_prev[2] !== A_REG_expected_prev[2] )
		&& ((A_REG_expected_prev[2] !== last_A_REG_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A_REG[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_REG_expected_prev);
		$display ("     Real value = %b", A_REG_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_REG_exp[2] = A_REG_expected_prev[2];
	end
	if (
		( A_REG_expected_prev[3] !== 1'bx ) && ( A_REG_prev[3] !== A_REG_expected_prev[3] )
		&& ((A_REG_expected_prev[3] !== last_A_REG_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A_REG[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_REG_expected_prev);
		$display ("     Real value = %b", A_REG_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_REG_exp[3] = A_REG_expected_prev[3];
	end
	if (
		( A_REG_expected_prev[4] !== 1'bx ) && ( A_REG_prev[4] !== A_REG_expected_prev[4] )
		&& ((A_REG_expected_prev[4] !== last_A_REG_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A_REG[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_REG_expected_prev);
		$display ("     Real value = %b", A_REG_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_REG_exp[4] = A_REG_expected_prev[4];
	end
	if (
		( A_REG_expected_prev[5] !== 1'bx ) && ( A_REG_prev[5] !== A_REG_expected_prev[5] )
		&& ((A_REG_expected_prev[5] !== last_A_REG_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A_REG[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_REG_expected_prev);
		$display ("     Real value = %b", A_REG_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_REG_exp[5] = A_REG_expected_prev[5];
	end
	if (
		( A_REG_expected_prev[6] !== 1'bx ) && ( A_REG_prev[6] !== A_REG_expected_prev[6] )
		&& ((A_REG_expected_prev[6] !== last_A_REG_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A_REG[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_REG_expected_prev);
		$display ("     Real value = %b", A_REG_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_REG_exp[6] = A_REG_expected_prev[6];
	end
	if (
		( A_REG_expected_prev[7] !== 1'bx ) && ( A_REG_prev[7] !== A_REG_expected_prev[7] )
		&& ((A_REG_expected_prev[7] !== last_A_REG_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A_REG[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_REG_expected_prev);
		$display ("     Real value = %b", A_REG_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_REG_exp[7] = A_REG_expected_prev[7];
	end
	if (
		( ABC_expected_prev[0] !== 1'bx ) && ( ABC_prev[0] !== ABC_expected_prev[0] )
		&& ((ABC_expected_prev[0] !== last_ABC_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ABC[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ABC_expected_prev);
		$display ("     Real value = %b", ABC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ABC_exp[0] = ABC_expected_prev[0];
	end
	if (
		( ABC_expected_prev[1] !== 1'bx ) && ( ABC_prev[1] !== ABC_expected_prev[1] )
		&& ((ABC_expected_prev[1] !== last_ABC_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ABC[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ABC_expected_prev);
		$display ("     Real value = %b", ABC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ABC_exp[1] = ABC_expected_prev[1];
	end
	if (
		( ABC_expected_prev[2] !== 1'bx ) && ( ABC_prev[2] !== ABC_expected_prev[2] )
		&& ((ABC_expected_prev[2] !== last_ABC_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ABC[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ABC_expected_prev);
		$display ("     Real value = %b", ABC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ABC_exp[2] = ABC_expected_prev[2];
	end
	if (
		( ABC_expected_prev[3] !== 1'bx ) && ( ABC_prev[3] !== ABC_expected_prev[3] )
		&& ((ABC_expected_prev[3] !== last_ABC_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ABC[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ABC_expected_prev);
		$display ("     Real value = %b", ABC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ABC_exp[3] = ABC_expected_prev[3];
	end
	if (
		( ABC_expected_prev[4] !== 1'bx ) && ( ABC_prev[4] !== ABC_expected_prev[4] )
		&& ((ABC_expected_prev[4] !== last_ABC_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ABC[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ABC_expected_prev);
		$display ("     Real value = %b", ABC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ABC_exp[4] = ABC_expected_prev[4];
	end
	if (
		( ABC_expected_prev[5] !== 1'bx ) && ( ABC_prev[5] !== ABC_expected_prev[5] )
		&& ((ABC_expected_prev[5] !== last_ABC_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ABC[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ABC_expected_prev);
		$display ("     Real value = %b", ABC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ABC_exp[5] = ABC_expected_prev[5];
	end
	if (
		( ABC_expected_prev[6] !== 1'bx ) && ( ABC_prev[6] !== ABC_expected_prev[6] )
		&& ((ABC_expected_prev[6] !== last_ABC_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ABC[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ABC_expected_prev);
		$display ("     Real value = %b", ABC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ABC_exp[6] = ABC_expected_prev[6];
	end
	if (
		( ABC_expected_prev[7] !== 1'bx ) && ( ABC_prev[7] !== ABC_expected_prev[7] )
		&& ((ABC_expected_prev[7] !== last_ABC_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ABC[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ABC_expected_prev);
		$display ("     Real value = %b", ABC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ABC_exp[7] = ABC_expected_prev[7];
	end
	if (
		( ABC_expected_prev[8] !== 1'bx ) && ( ABC_prev[8] !== ABC_expected_prev[8] )
		&& ((ABC_expected_prev[8] !== last_ABC_exp[8]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ABC[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ABC_expected_prev);
		$display ("     Real value = %b", ABC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ABC_exp[8] = ABC_expected_prev[8];
	end
	if (
		( ABC_expected_prev[9] !== 1'bx ) && ( ABC_prev[9] !== ABC_expected_prev[9] )
		&& ((ABC_expected_prev[9] !== last_ABC_exp[9]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ABC[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ABC_expected_prev);
		$display ("     Real value = %b", ABC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ABC_exp[9] = ABC_expected_prev[9];
	end
	if (
		( ABC_expected_prev[10] !== 1'bx ) && ( ABC_prev[10] !== ABC_expected_prev[10] )
		&& ((ABC_expected_prev[10] !== last_ABC_exp[10]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ABC[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ABC_expected_prev);
		$display ("     Real value = %b", ABC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ABC_exp[10] = ABC_expected_prev[10];
	end
	if (
		( ABC_expected_prev[11] !== 1'bx ) && ( ABC_prev[11] !== ABC_expected_prev[11] )
		&& ((ABC_expected_prev[11] !== last_ABC_exp[11]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ABC[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ABC_expected_prev);
		$display ("     Real value = %b", ABC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ABC_exp[11] = ABC_expected_prev[11];
	end
	if (
		( ABC_expected_prev[12] !== 1'bx ) && ( ABC_prev[12] !== ABC_expected_prev[12] )
		&& ((ABC_expected_prev[12] !== last_ABC_exp[12]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ABC[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ABC_expected_prev);
		$display ("     Real value = %b", ABC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ABC_exp[12] = ABC_expected_prev[12];
	end
	if (
		( ABC_expected_prev[13] !== 1'bx ) && ( ABC_prev[13] !== ABC_expected_prev[13] )
		&& ((ABC_expected_prev[13] !== last_ABC_exp[13]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ABC[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ABC_expected_prev);
		$display ("     Real value = %b", ABC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ABC_exp[13] = ABC_expected_prev[13];
	end
	if (
		( ABC_expected_prev[14] !== 1'bx ) && ( ABC_prev[14] !== ABC_expected_prev[14] )
		&& ((ABC_expected_prev[14] !== last_ABC_exp[14]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ABC[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ABC_expected_prev);
		$display ("     Real value = %b", ABC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ABC_exp[14] = ABC_expected_prev[14];
	end
	if (
		( ABC_expected_prev[15] !== 1'bx ) && ( ABC_prev[15] !== ABC_expected_prev[15] )
		&& ((ABC_expected_prev[15] !== last_ABC_exp[15]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ABC[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ABC_expected_prev);
		$display ("     Real value = %b", ABC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ABC_exp[15] = ABC_expected_prev[15];
	end
	if (
		( ALU_OUT_expected_prev[0] !== 1'bx ) && ( ALU_OUT_prev[0] !== ALU_OUT_expected_prev[0] )
		&& ((ALU_OUT_expected_prev[0] !== last_ALU_OUT_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_OUT[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_OUT_expected_prev);
		$display ("     Real value = %b", ALU_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ALU_OUT_exp[0] = ALU_OUT_expected_prev[0];
	end
	if (
		( ALU_OUT_expected_prev[1] !== 1'bx ) && ( ALU_OUT_prev[1] !== ALU_OUT_expected_prev[1] )
		&& ((ALU_OUT_expected_prev[1] !== last_ALU_OUT_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_OUT[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_OUT_expected_prev);
		$display ("     Real value = %b", ALU_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ALU_OUT_exp[1] = ALU_OUT_expected_prev[1];
	end
	if (
		( ALU_OUT_expected_prev[2] !== 1'bx ) && ( ALU_OUT_prev[2] !== ALU_OUT_expected_prev[2] )
		&& ((ALU_OUT_expected_prev[2] !== last_ALU_OUT_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_OUT[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_OUT_expected_prev);
		$display ("     Real value = %b", ALU_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ALU_OUT_exp[2] = ALU_OUT_expected_prev[2];
	end
	if (
		( ALU_OUT_expected_prev[3] !== 1'bx ) && ( ALU_OUT_prev[3] !== ALU_OUT_expected_prev[3] )
		&& ((ALU_OUT_expected_prev[3] !== last_ALU_OUT_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_OUT[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_OUT_expected_prev);
		$display ("     Real value = %b", ALU_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ALU_OUT_exp[3] = ALU_OUT_expected_prev[3];
	end
	if (
		( ALU_OUT_expected_prev[4] !== 1'bx ) && ( ALU_OUT_prev[4] !== ALU_OUT_expected_prev[4] )
		&& ((ALU_OUT_expected_prev[4] !== last_ALU_OUT_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_OUT[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_OUT_expected_prev);
		$display ("     Real value = %b", ALU_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ALU_OUT_exp[4] = ALU_OUT_expected_prev[4];
	end
	if (
		( ALU_OUT_expected_prev[5] !== 1'bx ) && ( ALU_OUT_prev[5] !== ALU_OUT_expected_prev[5] )
		&& ((ALU_OUT_expected_prev[5] !== last_ALU_OUT_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_OUT[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_OUT_expected_prev);
		$display ("     Real value = %b", ALU_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ALU_OUT_exp[5] = ALU_OUT_expected_prev[5];
	end
	if (
		( ALU_OUT_expected_prev[6] !== 1'bx ) && ( ALU_OUT_prev[6] !== ALU_OUT_expected_prev[6] )
		&& ((ALU_OUT_expected_prev[6] !== last_ALU_OUT_exp[6]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_OUT[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_OUT_expected_prev);
		$display ("     Real value = %b", ALU_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ALU_OUT_exp[6] = ALU_OUT_expected_prev[6];
	end
	if (
		( ALU_OUT_expected_prev[7] !== 1'bx ) && ( ALU_OUT_prev[7] !== ALU_OUT_expected_prev[7] )
		&& ((ALU_OUT_expected_prev[7] !== last_ALU_OUT_exp[7]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_OUT[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_OUT_expected_prev);
		$display ("     Real value = %b", ALU_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ALU_OUT_exp[7] = ALU_OUT_expected_prev[7];
	end
	if (
		( B_REG_expected_prev[0] !== 1'bx ) && ( B_REG_prev[0] !== B_REG_expected_prev[0] )
		&& ((B_REG_expected_prev[0] !== last_B_REG_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port B_REG[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", B_REG_expected_prev);
		$display ("     Real value = %b", B_REG_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_B_REG_exp[0] = B_REG_expected_prev[0];
	end
	if (
		( B_REG_expected_prev[1] !== 1'bx ) && ( B_REG_prev[1] !== B_REG_expected_prev[1] )
		&& ((B_REG_expected_prev[1] !== last_B_REG_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port B_REG[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", B_REG_expected_prev);
		$display ("     Real value = %b", B_REG_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_B_REG_exp[1] = B_REG_expected_prev[1];
	end
	if (
		( B_REG_expected_prev[2] !== 1'bx ) && ( B_REG_prev[2] !== B_REG_expected_prev[2] )
		&& ((B_REG_expected_prev[2] !== last_B_REG_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port B_REG[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", B_REG_expected_prev);
		$display ("     Real value = %b", B_REG_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_B_REG_exp[2] = B_REG_expected_prev[2];
	end
	if (
		( B_REG_expected_prev[3] !== 1'bx ) && ( B_REG_prev[3] !== B_REG_expected_prev[3] )
		&& ((B_REG_expected_prev[3] !== last_B_REG_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port B_REG[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", B_REG_expected_prev);
		$display ("     Real value = %b", B_REG_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_B_REG_exp[3] = B_REG_expected_prev[3];
	end
	if (
		( B_REG_expected_prev[4] !== 1'bx ) && ( B_REG_prev[4] !== B_REG_expected_prev[4] )
		&& ((B_REG_expected_prev[4] !== last_B_REG_exp[4]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port B_REG[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", B_REG_expected_prev);
		$display ("     Real value = %b", B_REG_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_B_REG_exp[4] = B_REG_expected_prev[4];
	end
	if (
		( B_REG_expected_prev[5] !== 1'bx ) && ( B_REG_prev[5] !== B_REG_expected_prev[5] )
		&& ((B_REG_expected_prev[5] !== last_B_REG_exp[5]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port B_REG[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", B_REG_expected_prev);
		$display ("     Real value = %b", B_REG_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_B_REG_exp[5] = B_REG_expected_prev[5];
	end
	if (
		( B_REG_expected_prev[6] !== 1'bx ) && ( B_REG_prev[6] !== B_REG_expected_prev[6] )
		&& ((B_REG_expected_prev[6] !== last_B_REG_exp[6]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port B_REG[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", B_REG_expected_prev);
		$display ("     Real value = %b", B_REG_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_B_REG_exp[6] = B_REG_expected_prev[6];
	end
	if (
		( B_REG_expected_prev[7] !== 1'bx ) && ( B_REG_prev[7] !== B_REG_expected_prev[7] )
		&& ((B_REG_expected_prev[7] !== last_B_REG_exp[7]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port B_REG[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", B_REG_expected_prev);
		$display ("     Real value = %b", B_REG_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_B_REG_exp[7] = B_REG_expected_prev[7];
	end
	if (
		( counterchk_expected_prev[0] !== 1'bx ) && ( counterchk_prev[0] !== counterchk_expected_prev[0] )
		&& ((counterchk_expected_prev[0] !== last_counterchk_exp[0]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port counterchk[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", counterchk_expected_prev);
		$display ("     Real value = %b", counterchk_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_counterchk_exp[0] = counterchk_expected_prev[0];
	end
	if (
		( counterchk_expected_prev[1] !== 1'bx ) && ( counterchk_prev[1] !== counterchk_expected_prev[1] )
		&& ((counterchk_expected_prev[1] !== last_counterchk_exp[1]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port counterchk[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", counterchk_expected_prev);
		$display ("     Real value = %b", counterchk_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_counterchk_exp[1] = counterchk_expected_prev[1];
	end
	if (
		( counterchk_expected_prev[2] !== 1'bx ) && ( counterchk_prev[2] !== counterchk_expected_prev[2] )
		&& ((counterchk_expected_prev[2] !== last_counterchk_exp[2]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port counterchk[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", counterchk_expected_prev);
		$display ("     Real value = %b", counterchk_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_counterchk_exp[2] = counterchk_expected_prev[2];
	end
	if (
		( counterchk_expected_prev[3] !== 1'bx ) && ( counterchk_prev[3] !== counterchk_expected_prev[3] )
		&& ((counterchk_expected_prev[3] !== last_counterchk_exp[3]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port counterchk[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", counterchk_expected_prev);
		$display ("     Real value = %b", counterchk_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_counterchk_exp[3] = counterchk_expected_prev[3];
	end
	if (
		( inst_mem_addr_expected_prev[0] !== 1'bx ) && ( inst_mem_addr_prev[0] !== inst_mem_addr_expected_prev[0] )
		&& ((inst_mem_addr_expected_prev[0] !== last_inst_mem_addr_exp[0]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port inst_mem_addr[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", inst_mem_addr_expected_prev);
		$display ("     Real value = %b", inst_mem_addr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_inst_mem_addr_exp[0] = inst_mem_addr_expected_prev[0];
	end
	if (
		( inst_mem_addr_expected_prev[1] !== 1'bx ) && ( inst_mem_addr_prev[1] !== inst_mem_addr_expected_prev[1] )
		&& ((inst_mem_addr_expected_prev[1] !== last_inst_mem_addr_exp[1]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port inst_mem_addr[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", inst_mem_addr_expected_prev);
		$display ("     Real value = %b", inst_mem_addr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_inst_mem_addr_exp[1] = inst_mem_addr_expected_prev[1];
	end
	if (
		( inst_mem_addr_expected_prev[2] !== 1'bx ) && ( inst_mem_addr_prev[2] !== inst_mem_addr_expected_prev[2] )
		&& ((inst_mem_addr_expected_prev[2] !== last_inst_mem_addr_exp[2]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port inst_mem_addr[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", inst_mem_addr_expected_prev);
		$display ("     Real value = %b", inst_mem_addr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_inst_mem_addr_exp[2] = inst_mem_addr_expected_prev[2];
	end
	if (
		( inst_mem_addr_expected_prev[3] !== 1'bx ) && ( inst_mem_addr_prev[3] !== inst_mem_addr_expected_prev[3] )
		&& ((inst_mem_addr_expected_prev[3] !== last_inst_mem_addr_exp[3]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port inst_mem_addr[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", inst_mem_addr_expected_prev);
		$display ("     Real value = %b", inst_mem_addr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_inst_mem_addr_exp[3] = inst_mem_addr_expected_prev[3];
	end
	if (
		( inst_mem_addr_expected_prev[4] !== 1'bx ) && ( inst_mem_addr_prev[4] !== inst_mem_addr_expected_prev[4] )
		&& ((inst_mem_addr_expected_prev[4] !== last_inst_mem_addr_exp[4]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port inst_mem_addr[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", inst_mem_addr_expected_prev);
		$display ("     Real value = %b", inst_mem_addr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_inst_mem_addr_exp[4] = inst_mem_addr_expected_prev[4];
	end
	if (
		( inst_mem_addr_expected_prev[5] !== 1'bx ) && ( inst_mem_addr_prev[5] !== inst_mem_addr_expected_prev[5] )
		&& ((inst_mem_addr_expected_prev[5] !== last_inst_mem_addr_exp[5]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port inst_mem_addr[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", inst_mem_addr_expected_prev);
		$display ("     Real value = %b", inst_mem_addr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_inst_mem_addr_exp[5] = inst_mem_addr_expected_prev[5];
	end
	if (
		( inst_mem_addr_expected_prev[6] !== 1'bx ) && ( inst_mem_addr_prev[6] !== inst_mem_addr_expected_prev[6] )
		&& ((inst_mem_addr_expected_prev[6] !== last_inst_mem_addr_exp[6]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port inst_mem_addr[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", inst_mem_addr_expected_prev);
		$display ("     Real value = %b", inst_mem_addr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_inst_mem_addr_exp[6] = inst_mem_addr_expected_prev[6];
	end
	if (
		( inst_mem_addr_expected_prev[7] !== 1'bx ) && ( inst_mem_addr_prev[7] !== inst_mem_addr_expected_prev[7] )
		&& ((inst_mem_addr_expected_prev[7] !== last_inst_mem_addr_exp[7]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port inst_mem_addr[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", inst_mem_addr_expected_prev);
		$display ("     Real value = %b", inst_mem_addr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_inst_mem_addr_exp[7] = inst_mem_addr_expected_prev[7];
	end
	if (
		( inst_mem_addr_expected_prev[8] !== 1'bx ) && ( inst_mem_addr_prev[8] !== inst_mem_addr_expected_prev[8] )
		&& ((inst_mem_addr_expected_prev[8] !== last_inst_mem_addr_exp[8]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port inst_mem_addr[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", inst_mem_addr_expected_prev);
		$display ("     Real value = %b", inst_mem_addr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_inst_mem_addr_exp[8] = inst_mem_addr_expected_prev[8];
	end
	if (
		( inst_mem_addr_expected_prev[9] !== 1'bx ) && ( inst_mem_addr_prev[9] !== inst_mem_addr_expected_prev[9] )
		&& ((inst_mem_addr_expected_prev[9] !== last_inst_mem_addr_exp[9]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port inst_mem_addr[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", inst_mem_addr_expected_prev);
		$display ("     Real value = %b", inst_mem_addr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_inst_mem_addr_exp[9] = inst_mem_addr_expected_prev[9];
	end
	if (
		( RF_A_READ_PORT_expected_prev[0] !== 1'bx ) && ( RF_A_READ_PORT_prev[0] !== RF_A_READ_PORT_expected_prev[0] )
		&& ((RF_A_READ_PORT_expected_prev[0] !== last_RF_A_READ_PORT_exp[0]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RF_A_READ_PORT[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RF_A_READ_PORT_expected_prev);
		$display ("     Real value = %b", RF_A_READ_PORT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_RF_A_READ_PORT_exp[0] = RF_A_READ_PORT_expected_prev[0];
	end
	if (
		( RF_A_READ_PORT_expected_prev[1] !== 1'bx ) && ( RF_A_READ_PORT_prev[1] !== RF_A_READ_PORT_expected_prev[1] )
		&& ((RF_A_READ_PORT_expected_prev[1] !== last_RF_A_READ_PORT_exp[1]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RF_A_READ_PORT[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RF_A_READ_PORT_expected_prev);
		$display ("     Real value = %b", RF_A_READ_PORT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_RF_A_READ_PORT_exp[1] = RF_A_READ_PORT_expected_prev[1];
	end
	if (
		( RF_A_READ_PORT_expected_prev[2] !== 1'bx ) && ( RF_A_READ_PORT_prev[2] !== RF_A_READ_PORT_expected_prev[2] )
		&& ((RF_A_READ_PORT_expected_prev[2] !== last_RF_A_READ_PORT_exp[2]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RF_A_READ_PORT[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RF_A_READ_PORT_expected_prev);
		$display ("     Real value = %b", RF_A_READ_PORT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_RF_A_READ_PORT_exp[2] = RF_A_READ_PORT_expected_prev[2];
	end
	if (
		( RF_A_READ_PORT_expected_prev[3] !== 1'bx ) && ( RF_A_READ_PORT_prev[3] !== RF_A_READ_PORT_expected_prev[3] )
		&& ((RF_A_READ_PORT_expected_prev[3] !== last_RF_A_READ_PORT_exp[3]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RF_A_READ_PORT[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RF_A_READ_PORT_expected_prev);
		$display ("     Real value = %b", RF_A_READ_PORT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_RF_A_READ_PORT_exp[3] = RF_A_READ_PORT_expected_prev[3];
	end
	if (
		( RF_A_READ_PORT_expected_prev[4] !== 1'bx ) && ( RF_A_READ_PORT_prev[4] !== RF_A_READ_PORT_expected_prev[4] )
		&& ((RF_A_READ_PORT_expected_prev[4] !== last_RF_A_READ_PORT_exp[4]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RF_A_READ_PORT[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RF_A_READ_PORT_expected_prev);
		$display ("     Real value = %b", RF_A_READ_PORT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_RF_A_READ_PORT_exp[4] = RF_A_READ_PORT_expected_prev[4];
	end
	if (
		( RF_A_READ_PORT_expected_prev[5] !== 1'bx ) && ( RF_A_READ_PORT_prev[5] !== RF_A_READ_PORT_expected_prev[5] )
		&& ((RF_A_READ_PORT_expected_prev[5] !== last_RF_A_READ_PORT_exp[5]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RF_A_READ_PORT[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RF_A_READ_PORT_expected_prev);
		$display ("     Real value = %b", RF_A_READ_PORT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_RF_A_READ_PORT_exp[5] = RF_A_READ_PORT_expected_prev[5];
	end
	if (
		( RF_A_READ_PORT_expected_prev[6] !== 1'bx ) && ( RF_A_READ_PORT_prev[6] !== RF_A_READ_PORT_expected_prev[6] )
		&& ((RF_A_READ_PORT_expected_prev[6] !== last_RF_A_READ_PORT_exp[6]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RF_A_READ_PORT[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RF_A_READ_PORT_expected_prev);
		$display ("     Real value = %b", RF_A_READ_PORT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_RF_A_READ_PORT_exp[6] = RF_A_READ_PORT_expected_prev[6];
	end
	if (
		( RF_A_READ_PORT_expected_prev[7] !== 1'bx ) && ( RF_A_READ_PORT_prev[7] !== RF_A_READ_PORT_expected_prev[7] )
		&& ((RF_A_READ_PORT_expected_prev[7] !== last_RF_A_READ_PORT_exp[7]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RF_A_READ_PORT[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RF_A_READ_PORT_expected_prev);
		$display ("     Real value = %b", RF_A_READ_PORT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_RF_A_READ_PORT_exp[7] = RF_A_READ_PORT_expected_prev[7];
	end
	if (
		( RF_B_READ_PORT_expected_prev[0] !== 1'bx ) && ( RF_B_READ_PORT_prev[0] !== RF_B_READ_PORT_expected_prev[0] )
		&& ((RF_B_READ_PORT_expected_prev[0] !== last_RF_B_READ_PORT_exp[0]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RF_B_READ_PORT[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RF_B_READ_PORT_expected_prev);
		$display ("     Real value = %b", RF_B_READ_PORT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_RF_B_READ_PORT_exp[0] = RF_B_READ_PORT_expected_prev[0];
	end
	if (
		( RF_B_READ_PORT_expected_prev[1] !== 1'bx ) && ( RF_B_READ_PORT_prev[1] !== RF_B_READ_PORT_expected_prev[1] )
		&& ((RF_B_READ_PORT_expected_prev[1] !== last_RF_B_READ_PORT_exp[1]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RF_B_READ_PORT[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RF_B_READ_PORT_expected_prev);
		$display ("     Real value = %b", RF_B_READ_PORT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_RF_B_READ_PORT_exp[1] = RF_B_READ_PORT_expected_prev[1];
	end
	if (
		( RF_B_READ_PORT_expected_prev[2] !== 1'bx ) && ( RF_B_READ_PORT_prev[2] !== RF_B_READ_PORT_expected_prev[2] )
		&& ((RF_B_READ_PORT_expected_prev[2] !== last_RF_B_READ_PORT_exp[2]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RF_B_READ_PORT[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RF_B_READ_PORT_expected_prev);
		$display ("     Real value = %b", RF_B_READ_PORT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_RF_B_READ_PORT_exp[2] = RF_B_READ_PORT_expected_prev[2];
	end
	if (
		( RF_B_READ_PORT_expected_prev[3] !== 1'bx ) && ( RF_B_READ_PORT_prev[3] !== RF_B_READ_PORT_expected_prev[3] )
		&& ((RF_B_READ_PORT_expected_prev[3] !== last_RF_B_READ_PORT_exp[3]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RF_B_READ_PORT[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RF_B_READ_PORT_expected_prev);
		$display ("     Real value = %b", RF_B_READ_PORT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_RF_B_READ_PORT_exp[3] = RF_B_READ_PORT_expected_prev[3];
	end
	if (
		( RF_B_READ_PORT_expected_prev[4] !== 1'bx ) && ( RF_B_READ_PORT_prev[4] !== RF_B_READ_PORT_expected_prev[4] )
		&& ((RF_B_READ_PORT_expected_prev[4] !== last_RF_B_READ_PORT_exp[4]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RF_B_READ_PORT[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RF_B_READ_PORT_expected_prev);
		$display ("     Real value = %b", RF_B_READ_PORT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_RF_B_READ_PORT_exp[4] = RF_B_READ_PORT_expected_prev[4];
	end
	if (
		( RF_B_READ_PORT_expected_prev[5] !== 1'bx ) && ( RF_B_READ_PORT_prev[5] !== RF_B_READ_PORT_expected_prev[5] )
		&& ((RF_B_READ_PORT_expected_prev[5] !== last_RF_B_READ_PORT_exp[5]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RF_B_READ_PORT[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RF_B_READ_PORT_expected_prev);
		$display ("     Real value = %b", RF_B_READ_PORT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_RF_B_READ_PORT_exp[5] = RF_B_READ_PORT_expected_prev[5];
	end
	if (
		( RF_B_READ_PORT_expected_prev[6] !== 1'bx ) && ( RF_B_READ_PORT_prev[6] !== RF_B_READ_PORT_expected_prev[6] )
		&& ((RF_B_READ_PORT_expected_prev[6] !== last_RF_B_READ_PORT_exp[6]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RF_B_READ_PORT[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RF_B_READ_PORT_expected_prev);
		$display ("     Real value = %b", RF_B_READ_PORT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_RF_B_READ_PORT_exp[6] = RF_B_READ_PORT_expected_prev[6];
	end
	if (
		( RF_B_READ_PORT_expected_prev[7] !== 1'bx ) && ( RF_B_READ_PORT_prev[7] !== RF_B_READ_PORT_expected_prev[7] )
		&& ((RF_B_READ_PORT_expected_prev[7] !== last_RF_B_READ_PORT_exp[7]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RF_B_READ_PORT[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RF_B_READ_PORT_expected_prev);
		$display ("     Real value = %b", RF_B_READ_PORT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_RF_B_READ_PORT_exp[7] = RF_B_READ_PORT_expected_prev[7];
	end
	if (
		( RF_W_ADDR_expected_prev[0] !== 1'bx ) && ( RF_W_ADDR_prev[0] !== RF_W_ADDR_expected_prev[0] )
		&& ((RF_W_ADDR_expected_prev[0] !== last_RF_W_ADDR_exp[0]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RF_W_ADDR[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RF_W_ADDR_expected_prev);
		$display ("     Real value = %b", RF_W_ADDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_RF_W_ADDR_exp[0] = RF_W_ADDR_expected_prev[0];
	end
	if (
		( RF_W_ADDR_expected_prev[1] !== 1'bx ) && ( RF_W_ADDR_prev[1] !== RF_W_ADDR_expected_prev[1] )
		&& ((RF_W_ADDR_expected_prev[1] !== last_RF_W_ADDR_exp[1]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RF_W_ADDR[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RF_W_ADDR_expected_prev);
		$display ("     Real value = %b", RF_W_ADDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_RF_W_ADDR_exp[1] = RF_W_ADDR_expected_prev[1];
	end
	if (
		( RF_W_ADDR_expected_prev[2] !== 1'bx ) && ( RF_W_ADDR_prev[2] !== RF_W_ADDR_expected_prev[2] )
		&& ((RF_W_ADDR_expected_prev[2] !== last_RF_W_ADDR_exp[2]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RF_W_ADDR[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RF_W_ADDR_expected_prev);
		$display ("     Real value = %b", RF_W_ADDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_RF_W_ADDR_exp[2] = RF_W_ADDR_expected_prev[2];
	end
	if (
		( RF_W_DATA_expected_prev[0] !== 1'bx ) && ( RF_W_DATA_prev[0] !== RF_W_DATA_expected_prev[0] )
		&& ((RF_W_DATA_expected_prev[0] !== last_RF_W_DATA_exp[0]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RF_W_DATA[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RF_W_DATA_expected_prev);
		$display ("     Real value = %b", RF_W_DATA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_RF_W_DATA_exp[0] = RF_W_DATA_expected_prev[0];
	end
	if (
		( RF_W_DATA_expected_prev[1] !== 1'bx ) && ( RF_W_DATA_prev[1] !== RF_W_DATA_expected_prev[1] )
		&& ((RF_W_DATA_expected_prev[1] !== last_RF_W_DATA_exp[1]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RF_W_DATA[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RF_W_DATA_expected_prev);
		$display ("     Real value = %b", RF_W_DATA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_RF_W_DATA_exp[1] = RF_W_DATA_expected_prev[1];
	end
	if (
		( RF_W_DATA_expected_prev[2] !== 1'bx ) && ( RF_W_DATA_prev[2] !== RF_W_DATA_expected_prev[2] )
		&& ((RF_W_DATA_expected_prev[2] !== last_RF_W_DATA_exp[2]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RF_W_DATA[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RF_W_DATA_expected_prev);
		$display ("     Real value = %b", RF_W_DATA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_RF_W_DATA_exp[2] = RF_W_DATA_expected_prev[2];
	end
	if (
		( RF_W_DATA_expected_prev[3] !== 1'bx ) && ( RF_W_DATA_prev[3] !== RF_W_DATA_expected_prev[3] )
		&& ((RF_W_DATA_expected_prev[3] !== last_RF_W_DATA_exp[3]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RF_W_DATA[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RF_W_DATA_expected_prev);
		$display ("     Real value = %b", RF_W_DATA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_RF_W_DATA_exp[3] = RF_W_DATA_expected_prev[3];
	end
	if (
		( RF_W_DATA_expected_prev[4] !== 1'bx ) && ( RF_W_DATA_prev[4] !== RF_W_DATA_expected_prev[4] )
		&& ((RF_W_DATA_expected_prev[4] !== last_RF_W_DATA_exp[4]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RF_W_DATA[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RF_W_DATA_expected_prev);
		$display ("     Real value = %b", RF_W_DATA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_RF_W_DATA_exp[4] = RF_W_DATA_expected_prev[4];
	end
	if (
		( RF_W_DATA_expected_prev[5] !== 1'bx ) && ( RF_W_DATA_prev[5] !== RF_W_DATA_expected_prev[5] )
		&& ((RF_W_DATA_expected_prev[5] !== last_RF_W_DATA_exp[5]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RF_W_DATA[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RF_W_DATA_expected_prev);
		$display ("     Real value = %b", RF_W_DATA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_RF_W_DATA_exp[5] = RF_W_DATA_expected_prev[5];
	end
	if (
		( RF_W_DATA_expected_prev[6] !== 1'bx ) && ( RF_W_DATA_prev[6] !== RF_W_DATA_expected_prev[6] )
		&& ((RF_W_DATA_expected_prev[6] !== last_RF_W_DATA_exp[6]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RF_W_DATA[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RF_W_DATA_expected_prev);
		$display ("     Real value = %b", RF_W_DATA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_RF_W_DATA_exp[6] = RF_W_DATA_expected_prev[6];
	end
	if (
		( RF_W_DATA_expected_prev[7] !== 1'bx ) && ( RF_W_DATA_prev[7] !== RF_W_DATA_expected_prev[7] )
		&& ((RF_W_DATA_expected_prev[7] !== last_RF_W_DATA_exp[7]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RF_W_DATA[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RF_W_DATA_expected_prev);
		$display ("     Real value = %b", RF_W_DATA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_RF_W_DATA_exp[7] = RF_W_DATA_expected_prev[7];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1200000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module CPU_vlg_vec_tst();
// constants                                           
// general purpose registers
reg AUTO;
reg CLK;
reg [15:0] DATA_MEM_OUT;
reg [15:0] INST_MEM_OUT;
reg RUN;
// wires                                               
wire [7:0] A_REG;
wire [15:0] ABC;
wire [7:0] ALU_OUT;
wire [7:0] B_REG;
wire [3:0] counterchk;
wire [9:0] inst_mem_addr;
wire [7:0] RF_A_READ_PORT;
wire [7:0] RF_B_READ_PORT;
wire [2:0] RF_W_ADDR;
wire [7:0] RF_W_DATA;

wire sampler;                             

// assign statements (if any)                          
CPU i1 (
// port map - connection between master ports and signals/registers   
	.A_REG(A_REG),
	.ABC(ABC),
	.ALU_OUT(ALU_OUT),
	.AUTO(AUTO),
	.B_REG(B_REG),
	.CLK(CLK),
	.counterchk(counterchk),
	.DATA_MEM_OUT(DATA_MEM_OUT),
	.inst_mem_addr(inst_mem_addr),
	.INST_MEM_OUT(INST_MEM_OUT),
	.RF_A_READ_PORT(RF_A_READ_PORT),
	.RF_B_READ_PORT(RF_B_READ_PORT),
	.RF_W_ADDR(RF_W_ADDR),
	.RF_W_DATA(RF_W_DATA),
	.RUN(RUN)
);

// CLK
initial
begin
	repeat(19)
	begin
		CLK = 1'b0;
		CLK = #25000 1'b1;
		# 25000;
	end
	CLK = 1'b0;
	CLK = #25000 1'b1;
	# 15000;
	repeat(4)
	begin
		CLK = 1'b0;
		CLK = #25000 1'b1;
		# 25000;
	end
	CLK = 1'b0;
end 

// RUN
initial
begin
	RUN = 1'b1;
end 

// AUTO
initial
begin
	AUTO = 1'b0;
end 
// DATA_MEM_OUT[ 15 ]
initial
begin
	DATA_MEM_OUT[15] = 1'b0;
end 
// DATA_MEM_OUT[ 14 ]
initial
begin
	DATA_MEM_OUT[14] = 1'b0;
end 
// DATA_MEM_OUT[ 13 ]
initial
begin
	DATA_MEM_OUT[13] = 1'b0;
end 
// DATA_MEM_OUT[ 12 ]
initial
begin
	DATA_MEM_OUT[12] = 1'b0;
end 
// DATA_MEM_OUT[ 11 ]
initial
begin
	DATA_MEM_OUT[11] = 1'b0;
end 
// DATA_MEM_OUT[ 10 ]
initial
begin
	DATA_MEM_OUT[10] = 1'b0;
end 
// DATA_MEM_OUT[ 9 ]
initial
begin
	DATA_MEM_OUT[9] = 1'b0;
end 
// DATA_MEM_OUT[ 8 ]
initial
begin
	DATA_MEM_OUT[8] = 1'b0;
end 
// DATA_MEM_OUT[ 7 ]
initial
begin
	DATA_MEM_OUT[7] = 1'b0;
end 
// DATA_MEM_OUT[ 6 ]
initial
begin
	DATA_MEM_OUT[6] = 1'b0;
end 
// DATA_MEM_OUT[ 5 ]
initial
begin
	DATA_MEM_OUT[5] = 1'b0;
end 
// DATA_MEM_OUT[ 4 ]
initial
begin
	DATA_MEM_OUT[4] = 1'b0;
end 
// DATA_MEM_OUT[ 3 ]
initial
begin
	DATA_MEM_OUT[3] = 1'b0;
end 
// DATA_MEM_OUT[ 2 ]
initial
begin
	DATA_MEM_OUT[2] = 1'b0;
end 
// DATA_MEM_OUT[ 1 ]
initial
begin
	DATA_MEM_OUT[1] = 1'b0;
end 
// DATA_MEM_OUT[ 0 ]
initial
begin
	DATA_MEM_OUT[0] = 1'b0;
end 

CPU_vlg_sample_tst tb_sample (
	.AUTO(AUTO),
	.CLK(CLK),
	.DATA_MEM_OUT(DATA_MEM_OUT),
	.INST_MEM_OUT(INST_MEM_OUT),
	.RUN(RUN),
	.sampler_tx(sampler)
);

CPU_vlg_check_tst tb_out(
	.A_REG(A_REG),
	.ABC(ABC),
	.ALU_OUT(ALU_OUT),
	.B_REG(B_REG),
	.counterchk(counterchk),
	.inst_mem_addr(inst_mem_addr),
	.RF_A_READ_PORT(RF_A_READ_PORT),
	.RF_B_READ_PORT(RF_B_READ_PORT),
	.RF_W_ADDR(RF_W_ADDR),
	.RF_W_DATA(RF_W_DATA),
	.sampler_rx(sampler)
);
endmodule

