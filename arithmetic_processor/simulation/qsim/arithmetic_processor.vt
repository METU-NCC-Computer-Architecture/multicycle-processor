// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "03/30/2020 10:01:51"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    Datapath
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Datapath_vlg_sample_tst(
	AOP,
	CLK,
	DAT1,
	DAT2,
	DAT3,
	Multiplicand,
	Multplier,
	uOP,
	sampler_tx
);
input [2:0] AOP;
input  CLK;
input [7:0] DAT1;
input [7:0] DAT2;
input [7:0] DAT3;
input [7:0] Multiplicand;
input [7:0] Multplier;
input [4:0] uOP;
output sampler_tx;

reg sample;
time current_time;
always @(AOP or CLK or DAT1 or DAT2 or DAT3 or Multiplicand or Multplier or uOP)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module Datapath_vlg_check_tst (
	A,
	ALUOUT,
	CO,
	N,
	OVF,
	Product,
	Q,
	Qm1,
	Z,
	sampler_rx
);
input [7:0] A;
input [7:0] ALUOUT;
input  CO;
input  N;
input  OVF;
input [15:0] Product;
input [7:0] Q;
input  Qm1;
input  Z;
input sampler_rx;

reg [7:0] A_expected;
reg [7:0] ALUOUT_expected;
reg  CO_expected;
reg  N_expected;
reg  OVF_expected;
reg [15:0] Product_expected;
reg [7:0] Q_expected;
reg  Qm1_expected;
reg  Z_expected;

reg [7:0] A_prev;
reg [7:0] ALUOUT_prev;
reg  CO_prev;
reg  N_prev;
reg  OVF_prev;
reg [15:0] Product_prev;
reg [7:0] Q_prev;
reg  Qm1_prev;
reg  Z_prev;

reg [7:0] A_expected_prev;
reg [7:0] ALUOUT_expected_prev;
reg  CO_expected_prev;
reg  N_expected_prev;
reg  OVF_expected_prev;
reg [15:0] Product_expected_prev;
reg [7:0] Q_expected_prev;
reg  Qm1_expected_prev;
reg  Z_expected_prev;

reg [7:0] last_A_exp;
reg [7:0] last_ALUOUT_exp;
reg  last_CO_exp;
reg  last_N_exp;
reg  last_OVF_exp;
reg [15:0] last_Product_exp;
reg [7:0] last_Q_exp;
reg  last_Qm1_exp;
reg  last_Z_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:9] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 9'b1;
end

// update real /o prevs

always @(trigger)
begin
	A_prev = A;
	ALUOUT_prev = ALUOUT;
	CO_prev = CO;
	N_prev = N;
	OVF_prev = OVF;
	Product_prev = Product;
	Q_prev = Q;
	Qm1_prev = Qm1;
	Z_prev = Z;
end

// update expected /o prevs

always @(trigger)
begin
	A_expected_prev = A_expected;
	ALUOUT_expected_prev = ALUOUT_expected;
	CO_expected_prev = CO_expected;
	N_expected_prev = N_expected;
	OVF_expected_prev = OVF_expected;
	Product_expected_prev = Product_expected;
	Q_expected_prev = Q_expected;
	Qm1_expected_prev = Qm1_expected;
	Z_expected_prev = Z_expected;
end


// expected Product[ 15 ]
initial
begin
	Product_expected[15] = 1'bX;
end 
// expected Product[ 14 ]
initial
begin
	Product_expected[14] = 1'bX;
end 
// expected Product[ 13 ]
initial
begin
	Product_expected[13] = 1'bX;
end 
// expected Product[ 12 ]
initial
begin
	Product_expected[12] = 1'bX;
end 
// expected Product[ 11 ]
initial
begin
	Product_expected[11] = 1'bX;
end 
// expected Product[ 10 ]
initial
begin
	Product_expected[10] = 1'bX;
end 
// expected Product[ 9 ]
initial
begin
	Product_expected[9] = 1'bX;
end 
// expected Product[ 8 ]
initial
begin
	Product_expected[8] = 1'bX;
end 
// expected Product[ 7 ]
initial
begin
	Product_expected[7] = 1'bX;
end 
// expected Product[ 6 ]
initial
begin
	Product_expected[6] = 1'bX;
end 
// expected Product[ 5 ]
initial
begin
	Product_expected[5] = 1'bX;
end 
// expected Product[ 4 ]
initial
begin
	Product_expected[4] = 1'bX;
end 
// expected Product[ 3 ]
initial
begin
	Product_expected[3] = 1'bX;
end 
// expected Product[ 2 ]
initial
begin
	Product_expected[2] = 1'bX;
end 
// expected Product[ 1 ]
initial
begin
	Product_expected[1] = 1'bX;
end 
// expected Product[ 0 ]
initial
begin
	Product_expected[0] = 1'bX;
end 
// expected Q[ 7 ]
initial
begin
	Q_expected[7] = 1'bX;
end 
// expected Q[ 6 ]
initial
begin
	Q_expected[6] = 1'bX;
end 
// expected Q[ 5 ]
initial
begin
	Q_expected[5] = 1'bX;
end 
// expected Q[ 4 ]
initial
begin
	Q_expected[4] = 1'bX;
end 
// expected Q[ 3 ]
initial
begin
	Q_expected[3] = 1'bX;
end 
// expected Q[ 2 ]
initial
begin
	Q_expected[2] = 1'bX;
end 
// expected Q[ 1 ]
initial
begin
	Q_expected[1] = 1'bX;
end 
// expected Q[ 0 ]
initial
begin
	Q_expected[0] = 1'bX;
end 
// expected A[ 7 ]
initial
begin
	A_expected[7] = 1'bX;
end 
// expected A[ 6 ]
initial
begin
	A_expected[6] = 1'bX;
end 
// expected A[ 5 ]
initial
begin
	A_expected[5] = 1'bX;
end 
// expected A[ 4 ]
initial
begin
	A_expected[4] = 1'bX;
end 
// expected A[ 3 ]
initial
begin
	A_expected[3] = 1'bX;
end 
// expected A[ 2 ]
initial
begin
	A_expected[2] = 1'bX;
end 
// expected A[ 1 ]
initial
begin
	A_expected[1] = 1'bX;
end 
// expected A[ 0 ]
initial
begin
	A_expected[0] = 1'bX;
end 
// expected ALUOUT[ 7 ]
initial
begin
	ALUOUT_expected[7] = 1'bX;
end 
// expected ALUOUT[ 6 ]
initial
begin
	ALUOUT_expected[6] = 1'bX;
end 
// expected ALUOUT[ 5 ]
initial
begin
	ALUOUT_expected[5] = 1'bX;
end 
// expected ALUOUT[ 4 ]
initial
begin
	ALUOUT_expected[4] = 1'bX;
end 
// expected ALUOUT[ 3 ]
initial
begin
	ALUOUT_expected[3] = 1'bX;
end 
// expected ALUOUT[ 2 ]
initial
begin
	ALUOUT_expected[2] = 1'bX;
end 
// expected ALUOUT[ 1 ]
initial
begin
	ALUOUT_expected[1] = 1'bX;
end 
// expected ALUOUT[ 0 ]
initial
begin
	ALUOUT_expected[0] = 1'bX;
end 

// expected Qm1
initial
begin
	Qm1_expected = 1'bX;
end 

// expected CO
initial
begin
	CO_expected = 1'bX;
end 

// expected N
initial
begin
	N_expected = 1'bX;
end 

// expected OVF
initial
begin
	OVF_expected = 1'bX;
end 

// expected Z
initial
begin
	Z_expected = 1'bX;
end 
// generate trigger
always @(A_expected or A or ALUOUT_expected or ALUOUT or CO_expected or CO or N_expected or N or OVF_expected or OVF or Product_expected or Product or Q_expected or Q or Qm1_expected or Qm1 or Z_expected or Z)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected A = %b | expected ALUOUT = %b | expected CO = %b | expected N = %b | expected OVF = %b | expected Product = %b | expected Q = %b | expected Qm1 = %b | expected Z = %b | ",A_expected_prev,ALUOUT_expected_prev,CO_expected_prev,N_expected_prev,OVF_expected_prev,Product_expected_prev,Q_expected_prev,Qm1_expected_prev,Z_expected_prev);
	$display("| real A = %b | real ALUOUT = %b | real CO = %b | real N = %b | real OVF = %b | real Product = %b | real Q = %b | real Qm1 = %b | real Z = %b | ",A_prev,ALUOUT_prev,CO_prev,N_prev,OVF_prev,Product_prev,Q_prev,Qm1_prev,Z_prev);
`endif
	if (
		( A_expected_prev[0] !== 1'bx ) && ( A_prev[0] !== A_expected_prev[0] )
		&& ((A_expected_prev[0] !== last_A_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_expected_prev);
		$display ("     Real value = %b", A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_exp[0] = A_expected_prev[0];
	end
	if (
		( A_expected_prev[1] !== 1'bx ) && ( A_prev[1] !== A_expected_prev[1] )
		&& ((A_expected_prev[1] !== last_A_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_expected_prev);
		$display ("     Real value = %b", A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_exp[1] = A_expected_prev[1];
	end
	if (
		( A_expected_prev[2] !== 1'bx ) && ( A_prev[2] !== A_expected_prev[2] )
		&& ((A_expected_prev[2] !== last_A_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_expected_prev);
		$display ("     Real value = %b", A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_exp[2] = A_expected_prev[2];
	end
	if (
		( A_expected_prev[3] !== 1'bx ) && ( A_prev[3] !== A_expected_prev[3] )
		&& ((A_expected_prev[3] !== last_A_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_expected_prev);
		$display ("     Real value = %b", A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_exp[3] = A_expected_prev[3];
	end
	if (
		( A_expected_prev[4] !== 1'bx ) && ( A_prev[4] !== A_expected_prev[4] )
		&& ((A_expected_prev[4] !== last_A_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_expected_prev);
		$display ("     Real value = %b", A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_exp[4] = A_expected_prev[4];
	end
	if (
		( A_expected_prev[5] !== 1'bx ) && ( A_prev[5] !== A_expected_prev[5] )
		&& ((A_expected_prev[5] !== last_A_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_expected_prev);
		$display ("     Real value = %b", A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_exp[5] = A_expected_prev[5];
	end
	if (
		( A_expected_prev[6] !== 1'bx ) && ( A_prev[6] !== A_expected_prev[6] )
		&& ((A_expected_prev[6] !== last_A_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_expected_prev);
		$display ("     Real value = %b", A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_exp[6] = A_expected_prev[6];
	end
	if (
		( A_expected_prev[7] !== 1'bx ) && ( A_prev[7] !== A_expected_prev[7] )
		&& ((A_expected_prev[7] !== last_A_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_expected_prev);
		$display ("     Real value = %b", A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_exp[7] = A_expected_prev[7];
	end
	if (
		( ALUOUT_expected_prev[0] !== 1'bx ) && ( ALUOUT_prev[0] !== ALUOUT_expected_prev[0] )
		&& ((ALUOUT_expected_prev[0] !== last_ALUOUT_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUOUT[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUOUT_expected_prev);
		$display ("     Real value = %b", ALUOUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ALUOUT_exp[0] = ALUOUT_expected_prev[0];
	end
	if (
		( ALUOUT_expected_prev[1] !== 1'bx ) && ( ALUOUT_prev[1] !== ALUOUT_expected_prev[1] )
		&& ((ALUOUT_expected_prev[1] !== last_ALUOUT_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUOUT[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUOUT_expected_prev);
		$display ("     Real value = %b", ALUOUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ALUOUT_exp[1] = ALUOUT_expected_prev[1];
	end
	if (
		( ALUOUT_expected_prev[2] !== 1'bx ) && ( ALUOUT_prev[2] !== ALUOUT_expected_prev[2] )
		&& ((ALUOUT_expected_prev[2] !== last_ALUOUT_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUOUT[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUOUT_expected_prev);
		$display ("     Real value = %b", ALUOUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ALUOUT_exp[2] = ALUOUT_expected_prev[2];
	end
	if (
		( ALUOUT_expected_prev[3] !== 1'bx ) && ( ALUOUT_prev[3] !== ALUOUT_expected_prev[3] )
		&& ((ALUOUT_expected_prev[3] !== last_ALUOUT_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUOUT[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUOUT_expected_prev);
		$display ("     Real value = %b", ALUOUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ALUOUT_exp[3] = ALUOUT_expected_prev[3];
	end
	if (
		( ALUOUT_expected_prev[4] !== 1'bx ) && ( ALUOUT_prev[4] !== ALUOUT_expected_prev[4] )
		&& ((ALUOUT_expected_prev[4] !== last_ALUOUT_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUOUT[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUOUT_expected_prev);
		$display ("     Real value = %b", ALUOUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ALUOUT_exp[4] = ALUOUT_expected_prev[4];
	end
	if (
		( ALUOUT_expected_prev[5] !== 1'bx ) && ( ALUOUT_prev[5] !== ALUOUT_expected_prev[5] )
		&& ((ALUOUT_expected_prev[5] !== last_ALUOUT_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUOUT[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUOUT_expected_prev);
		$display ("     Real value = %b", ALUOUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ALUOUT_exp[5] = ALUOUT_expected_prev[5];
	end
	if (
		( ALUOUT_expected_prev[6] !== 1'bx ) && ( ALUOUT_prev[6] !== ALUOUT_expected_prev[6] )
		&& ((ALUOUT_expected_prev[6] !== last_ALUOUT_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUOUT[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUOUT_expected_prev);
		$display ("     Real value = %b", ALUOUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ALUOUT_exp[6] = ALUOUT_expected_prev[6];
	end
	if (
		( ALUOUT_expected_prev[7] !== 1'bx ) && ( ALUOUT_prev[7] !== ALUOUT_expected_prev[7] )
		&& ((ALUOUT_expected_prev[7] !== last_ALUOUT_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUOUT[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUOUT_expected_prev);
		$display ("     Real value = %b", ALUOUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ALUOUT_exp[7] = ALUOUT_expected_prev[7];
	end
	if (
		( CO_expected_prev !== 1'bx ) && ( CO_prev !== CO_expected_prev )
		&& ((CO_expected_prev !== last_CO_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CO :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CO_expected_prev);
		$display ("     Real value = %b", CO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_CO_exp = CO_expected_prev;
	end
	if (
		( N_expected_prev !== 1'bx ) && ( N_prev !== N_expected_prev )
		&& ((N_expected_prev !== last_N_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port N :: @time = %t",  $realtime);
		$display ("     Expected value = %b", N_expected_prev);
		$display ("     Real value = %b", N_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_N_exp = N_expected_prev;
	end
	if (
		( OVF_expected_prev !== 1'bx ) && ( OVF_prev !== OVF_expected_prev )
		&& ((OVF_expected_prev !== last_OVF_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OVF :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OVF_expected_prev);
		$display ("     Real value = %b", OVF_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_OVF_exp = OVF_expected_prev;
	end
	if (
		( Product_expected_prev[0] !== 1'bx ) && ( Product_prev[0] !== Product_expected_prev[0] )
		&& ((Product_expected_prev[0] !== last_Product_exp[0]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Product[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Product_expected_prev);
		$display ("     Real value = %b", Product_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_Product_exp[0] = Product_expected_prev[0];
	end
	if (
		( Product_expected_prev[1] !== 1'bx ) && ( Product_prev[1] !== Product_expected_prev[1] )
		&& ((Product_expected_prev[1] !== last_Product_exp[1]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Product[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Product_expected_prev);
		$display ("     Real value = %b", Product_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_Product_exp[1] = Product_expected_prev[1];
	end
	if (
		( Product_expected_prev[2] !== 1'bx ) && ( Product_prev[2] !== Product_expected_prev[2] )
		&& ((Product_expected_prev[2] !== last_Product_exp[2]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Product[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Product_expected_prev);
		$display ("     Real value = %b", Product_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_Product_exp[2] = Product_expected_prev[2];
	end
	if (
		( Product_expected_prev[3] !== 1'bx ) && ( Product_prev[3] !== Product_expected_prev[3] )
		&& ((Product_expected_prev[3] !== last_Product_exp[3]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Product[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Product_expected_prev);
		$display ("     Real value = %b", Product_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_Product_exp[3] = Product_expected_prev[3];
	end
	if (
		( Product_expected_prev[4] !== 1'bx ) && ( Product_prev[4] !== Product_expected_prev[4] )
		&& ((Product_expected_prev[4] !== last_Product_exp[4]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Product[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Product_expected_prev);
		$display ("     Real value = %b", Product_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_Product_exp[4] = Product_expected_prev[4];
	end
	if (
		( Product_expected_prev[5] !== 1'bx ) && ( Product_prev[5] !== Product_expected_prev[5] )
		&& ((Product_expected_prev[5] !== last_Product_exp[5]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Product[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Product_expected_prev);
		$display ("     Real value = %b", Product_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_Product_exp[5] = Product_expected_prev[5];
	end
	if (
		( Product_expected_prev[6] !== 1'bx ) && ( Product_prev[6] !== Product_expected_prev[6] )
		&& ((Product_expected_prev[6] !== last_Product_exp[6]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Product[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Product_expected_prev);
		$display ("     Real value = %b", Product_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_Product_exp[6] = Product_expected_prev[6];
	end
	if (
		( Product_expected_prev[7] !== 1'bx ) && ( Product_prev[7] !== Product_expected_prev[7] )
		&& ((Product_expected_prev[7] !== last_Product_exp[7]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Product[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Product_expected_prev);
		$display ("     Real value = %b", Product_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_Product_exp[7] = Product_expected_prev[7];
	end
	if (
		( Product_expected_prev[8] !== 1'bx ) && ( Product_prev[8] !== Product_expected_prev[8] )
		&& ((Product_expected_prev[8] !== last_Product_exp[8]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Product[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Product_expected_prev);
		$display ("     Real value = %b", Product_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_Product_exp[8] = Product_expected_prev[8];
	end
	if (
		( Product_expected_prev[9] !== 1'bx ) && ( Product_prev[9] !== Product_expected_prev[9] )
		&& ((Product_expected_prev[9] !== last_Product_exp[9]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Product[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Product_expected_prev);
		$display ("     Real value = %b", Product_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_Product_exp[9] = Product_expected_prev[9];
	end
	if (
		( Product_expected_prev[10] !== 1'bx ) && ( Product_prev[10] !== Product_expected_prev[10] )
		&& ((Product_expected_prev[10] !== last_Product_exp[10]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Product[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Product_expected_prev);
		$display ("     Real value = %b", Product_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_Product_exp[10] = Product_expected_prev[10];
	end
	if (
		( Product_expected_prev[11] !== 1'bx ) && ( Product_prev[11] !== Product_expected_prev[11] )
		&& ((Product_expected_prev[11] !== last_Product_exp[11]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Product[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Product_expected_prev);
		$display ("     Real value = %b", Product_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_Product_exp[11] = Product_expected_prev[11];
	end
	if (
		( Product_expected_prev[12] !== 1'bx ) && ( Product_prev[12] !== Product_expected_prev[12] )
		&& ((Product_expected_prev[12] !== last_Product_exp[12]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Product[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Product_expected_prev);
		$display ("     Real value = %b", Product_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_Product_exp[12] = Product_expected_prev[12];
	end
	if (
		( Product_expected_prev[13] !== 1'bx ) && ( Product_prev[13] !== Product_expected_prev[13] )
		&& ((Product_expected_prev[13] !== last_Product_exp[13]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Product[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Product_expected_prev);
		$display ("     Real value = %b", Product_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_Product_exp[13] = Product_expected_prev[13];
	end
	if (
		( Product_expected_prev[14] !== 1'bx ) && ( Product_prev[14] !== Product_expected_prev[14] )
		&& ((Product_expected_prev[14] !== last_Product_exp[14]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Product[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Product_expected_prev);
		$display ("     Real value = %b", Product_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_Product_exp[14] = Product_expected_prev[14];
	end
	if (
		( Product_expected_prev[15] !== 1'bx ) && ( Product_prev[15] !== Product_expected_prev[15] )
		&& ((Product_expected_prev[15] !== last_Product_exp[15]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Product[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Product_expected_prev);
		$display ("     Real value = %b", Product_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_Product_exp[15] = Product_expected_prev[15];
	end
	if (
		( Q_expected_prev[0] !== 1'bx ) && ( Q_prev[0] !== Q_expected_prev[0] )
		&& ((Q_expected_prev[0] !== last_Q_exp[0]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q_expected_prev);
		$display ("     Real value = %b", Q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_Q_exp[0] = Q_expected_prev[0];
	end
	if (
		( Q_expected_prev[1] !== 1'bx ) && ( Q_prev[1] !== Q_expected_prev[1] )
		&& ((Q_expected_prev[1] !== last_Q_exp[1]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q_expected_prev);
		$display ("     Real value = %b", Q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_Q_exp[1] = Q_expected_prev[1];
	end
	if (
		( Q_expected_prev[2] !== 1'bx ) && ( Q_prev[2] !== Q_expected_prev[2] )
		&& ((Q_expected_prev[2] !== last_Q_exp[2]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q_expected_prev);
		$display ("     Real value = %b", Q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_Q_exp[2] = Q_expected_prev[2];
	end
	if (
		( Q_expected_prev[3] !== 1'bx ) && ( Q_prev[3] !== Q_expected_prev[3] )
		&& ((Q_expected_prev[3] !== last_Q_exp[3]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q_expected_prev);
		$display ("     Real value = %b", Q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_Q_exp[3] = Q_expected_prev[3];
	end
	if (
		( Q_expected_prev[4] !== 1'bx ) && ( Q_prev[4] !== Q_expected_prev[4] )
		&& ((Q_expected_prev[4] !== last_Q_exp[4]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q_expected_prev);
		$display ("     Real value = %b", Q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_Q_exp[4] = Q_expected_prev[4];
	end
	if (
		( Q_expected_prev[5] !== 1'bx ) && ( Q_prev[5] !== Q_expected_prev[5] )
		&& ((Q_expected_prev[5] !== last_Q_exp[5]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q_expected_prev);
		$display ("     Real value = %b", Q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_Q_exp[5] = Q_expected_prev[5];
	end
	if (
		( Q_expected_prev[6] !== 1'bx ) && ( Q_prev[6] !== Q_expected_prev[6] )
		&& ((Q_expected_prev[6] !== last_Q_exp[6]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q_expected_prev);
		$display ("     Real value = %b", Q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_Q_exp[6] = Q_expected_prev[6];
	end
	if (
		( Q_expected_prev[7] !== 1'bx ) && ( Q_prev[7] !== Q_expected_prev[7] )
		&& ((Q_expected_prev[7] !== last_Q_exp[7]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q_expected_prev);
		$display ("     Real value = %b", Q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_Q_exp[7] = Q_expected_prev[7];
	end
	if (
		( Qm1_expected_prev !== 1'bx ) && ( Qm1_prev !== Qm1_expected_prev )
		&& ((Qm1_expected_prev !== last_Qm1_exp) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Qm1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Qm1_expected_prev);
		$display ("     Real value = %b", Qm1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_Qm1_exp = Qm1_expected_prev;
	end
	if (
		( Z_expected_prev !== 1'bx ) && ( Z_prev !== Z_expected_prev )
		&& ((Z_expected_prev !== last_Z_exp) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Z :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Z_expected_prev);
		$display ("     Real value = %b", Z_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_Z_exp = Z_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module Datapath_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [2:0] AOP;
reg CLK;
reg [7:0] DAT1;
reg [7:0] DAT2;
reg [7:0] DAT3;
reg [7:0] Multiplicand;
reg [7:0] Multplier;
reg [4:0] uOP;
// wires                                               
wire [7:0] A;
wire [7:0] ALUOUT;
wire CO;
wire N;
wire OVF;
wire [15:0] Product;
wire [7:0] Q;
wire Qm1;
wire Z;

wire sampler;                             

// assign statements (if any)                          
Datapath i1 (
// port map - connection between master ports and signals/registers   
	.A(A),
	.ALUOUT(ALUOUT),
	.AOP(AOP),
	.CLK(CLK),
	.CO(CO),
	.DAT1(DAT1),
	.DAT2(DAT2),
	.DAT3(DAT3),
	.Multiplicand(Multiplicand),
	.Multplier(Multplier),
	.N(N),
	.OVF(OVF),
	.Product(Product),
	.Q(Q),
	.Qm1(Qm1),
	.uOP(uOP),
	.Z(Z)
);

// CLK
always
begin
	CLK = 1'b0;
	CLK = #25000 1'b1;
	#25000;
end 
// DAT1[ 7 ]
initial
begin
	DAT1[7] = 1'b0;
end 
// DAT1[ 6 ]
initial
begin
	DAT1[6] = 1'b0;
end 
// DAT1[ 5 ]
initial
begin
	DAT1[5] = 1'b0;
end 
// DAT1[ 4 ]
initial
begin
	DAT1[4] = 1'b0;
end 
// DAT1[ 3 ]
initial
begin
	DAT1[3] = 1'b0;
end 
// DAT1[ 2 ]
initial
begin
	DAT1[2] = 1'b0;
end 
// DAT1[ 1 ]
initial
begin
	DAT1[1] = 1'b0;
end 
// DAT1[ 0 ]
initial
begin
	DAT1[0] = 1'b0;
end 
// DAT2[ 7 ]
initial
begin
	DAT2[7] = 1'b0;
end 
// DAT2[ 6 ]
initial
begin
	DAT2[6] = 1'b0;
end 
// DAT2[ 5 ]
initial
begin
	DAT2[5] = 1'b0;
end 
// DAT2[ 4 ]
initial
begin
	DAT2[4] = 1'b0;
end 
// DAT2[ 3 ]
initial
begin
	DAT2[3] = 1'b0;
end 
// DAT2[ 2 ]
initial
begin
	DAT2[2] = 1'b0;
end 
// DAT2[ 1 ]
initial
begin
	DAT2[1] = 1'b0;
end 
// DAT2[ 0 ]
initial
begin
	DAT2[0] = 1'b0;
end 
// DAT3[ 7 ]
initial
begin
	DAT3[7] = 1'b0;
end 
// DAT3[ 6 ]
initial
begin
	DAT3[6] = 1'b0;
end 
// DAT3[ 5 ]
initial
begin
	DAT3[5] = 1'b0;
end 
// DAT3[ 4 ]
initial
begin
	DAT3[4] = 1'b0;
end 
// DAT3[ 3 ]
initial
begin
	DAT3[3] = 1'b0;
end 
// DAT3[ 2 ]
initial
begin
	DAT3[2] = 1'b0;
end 
// DAT3[ 1 ]
initial
begin
	DAT3[1] = 1'b0;
end 
// DAT3[ 0 ]
initial
begin
	DAT3[0] = 1'b0;
end 
// Multiplicand[ 7 ]
initial
begin
	Multiplicand[7] = 1'b0;
end 
// Multiplicand[ 6 ]
initial
begin
	Multiplicand[6] = 1'b1;
end 
// Multiplicand[ 5 ]
initial
begin
	Multiplicand[5] = 1'b1;
end 
// Multiplicand[ 4 ]
initial
begin
	Multiplicand[4] = 1'b1;
end 
// Multiplicand[ 3 ]
initial
begin
	Multiplicand[3] = 1'b1;
end 
// Multiplicand[ 2 ]
initial
begin
	Multiplicand[2] = 1'b1;
end 
// Multiplicand[ 1 ]
initial
begin
	Multiplicand[1] = 1'b1;
end 
// Multiplicand[ 0 ]
initial
begin
	Multiplicand[0] = 1'b1;
end 
// Multplier[ 7 ]
initial
begin
	Multplier[7] = 1'b0;
end 
// Multplier[ 6 ]
initial
begin
	Multplier[6] = 1'b1;
end 
// Multplier[ 5 ]
initial
begin
	Multplier[5] = 1'b1;
end 
// Multplier[ 4 ]
initial
begin
	Multplier[4] = 1'b1;
end 
// Multplier[ 3 ]
initial
begin
	Multplier[3] = 1'b1;
end 
// Multplier[ 2 ]
initial
begin
	Multplier[2] = 1'b1;
end 
// Multplier[ 1 ]
initial
begin
	Multplier[1] = 1'b1;
end 
// Multplier[ 0 ]
initial
begin
	Multplier[0] = 1'b1;
end 
// uOP[ 4 ]
initial
begin
	uOP[4] = 1'b1;
end 
// uOP[ 3 ]
initial
begin
	uOP[3] = 1'b0;
end 
// uOP[ 2 ]
initial
begin
	uOP[2] = 1'b1;
end 
// uOP[ 1 ]
initial
begin
	uOP[1] = 1'b1;
end 
// uOP[ 0 ]
initial
begin
	uOP[0] = 1'b0;
end 
// AOP[ 2 ]
initial
begin
	AOP[2] = 1'b0;
end 
// AOP[ 1 ]
initial
begin
	AOP[1] = 1'b0;
end 
// AOP[ 0 ]
initial
begin
	AOP[0] = 1'b0;
end 

Datapath_vlg_sample_tst tb_sample (
	.AOP(AOP),
	.CLK(CLK),
	.DAT1(DAT1),
	.DAT2(DAT2),
	.DAT3(DAT3),
	.Multiplicand(Multiplicand),
	.Multplier(Multplier),
	.uOP(uOP),
	.sampler_tx(sampler)
);

Datapath_vlg_check_tst tb_out(
	.A(A),
	.ALUOUT(ALUOUT),
	.CO(CO),
	.N(N),
	.OVF(OVF),
	.Product(Product),
	.Q(Q),
	.Qm1(Qm1),
	.Z(Z),
	.sampler_rx(sampler)
);
endmodule

