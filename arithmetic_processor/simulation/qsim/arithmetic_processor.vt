// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "05/10/2020 14:11:41"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    CPU
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module CPU_vlg_sample_tst(
	AUTO,
	CLK,
	RUN,
	sampler_tx
);
input  AUTO;
input  CLK;
input  RUN;
output sampler_tx;

reg sample;
time current_time;
always @(AUTO or CLK or RUN)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module CPU_vlg_check_tst (
	A_REG,
	ALU_OUT,
	CURRENT_INSTR,
	DATA_MEM_ADDR_IN,
	DATA_MEM_DATA_IN,
	DATA_MEM_DATA_OUT,
	DEBUG,
	IMMEDIATE,
	INSTR_MEM_ADDRESS,
	PRODUCT,
	Q_REG,
	RF_A_READ_PORT,
	RF_B_READ_PORT,
	RF_W_ADDR,
	RF_W_DATA,
	sampler_rx
);
input [7:0] A_REG;
input [7:0] ALU_OUT;
input [15:0] CURRENT_INSTR;
input [9:0] DATA_MEM_ADDR_IN;
input [15:0] DATA_MEM_DATA_IN;
input [15:0] DATA_MEM_DATA_OUT;
input [3:0] DEBUG;
input [7:0] IMMEDIATE;
input [9:0] INSTR_MEM_ADDRESS;
input [15:0] PRODUCT;
input [7:0] Q_REG;
input [7:0] RF_A_READ_PORT;
input [7:0] RF_B_READ_PORT;
input [2:0] RF_W_ADDR;
input [7:0] RF_W_DATA;
input sampler_rx;

reg [7:0] A_REG_expected;
reg [7:0] ALU_OUT_expected;
reg [15:0] CURRENT_INSTR_expected;
reg [9:0] DATA_MEM_ADDR_IN_expected;
reg [15:0] DATA_MEM_DATA_IN_expected;
reg [15:0] DATA_MEM_DATA_OUT_expected;
reg [3:0] DEBUG_expected;
reg [7:0] IMMEDIATE_expected;
reg [9:0] INSTR_MEM_ADDRESS_expected;
reg [15:0] PRODUCT_expected;
reg [7:0] Q_REG_expected;
reg [7:0] RF_A_READ_PORT_expected;
reg [7:0] RF_B_READ_PORT_expected;
reg [2:0] RF_W_ADDR_expected;
reg [7:0] RF_W_DATA_expected;

reg [7:0] A_REG_prev;
reg [7:0] ALU_OUT_prev;
reg [15:0] CURRENT_INSTR_prev;
reg [9:0] DATA_MEM_ADDR_IN_prev;
reg [15:0] DATA_MEM_DATA_IN_prev;
reg [15:0] DATA_MEM_DATA_OUT_prev;
reg [3:0] DEBUG_prev;
reg [7:0] IMMEDIATE_prev;
reg [9:0] INSTR_MEM_ADDRESS_prev;
reg [15:0] PRODUCT_prev;
reg [7:0] Q_REG_prev;
reg [7:0] RF_A_READ_PORT_prev;
reg [7:0] RF_B_READ_PORT_prev;
reg [2:0] RF_W_ADDR_prev;
reg [7:0] RF_W_DATA_prev;

reg [7:0] A_REG_expected_prev;
reg [7:0] ALU_OUT_expected_prev;
reg [15:0] CURRENT_INSTR_expected_prev;
reg [9:0] DATA_MEM_ADDR_IN_expected_prev;
reg [15:0] DATA_MEM_DATA_IN_expected_prev;
reg [15:0] DATA_MEM_DATA_OUT_expected_prev;
reg [3:0] DEBUG_expected_prev;
reg [7:0] IMMEDIATE_expected_prev;
reg [15:0] PRODUCT_expected_prev;
reg [7:0] Q_REG_expected_prev;
reg [7:0] RF_A_READ_PORT_expected_prev;
reg [7:0] RF_B_READ_PORT_expected_prev;
reg [2:0] RF_W_ADDR_expected_prev;
reg [7:0] RF_W_DATA_expected_prev;

reg [7:0] last_A_REG_exp;
reg [7:0] last_ALU_OUT_exp;
reg [15:0] last_CURRENT_INSTR_exp;
reg [9:0] last_DATA_MEM_ADDR_IN_exp;
reg [15:0] last_DATA_MEM_DATA_IN_exp;
reg [15:0] last_DATA_MEM_DATA_OUT_exp;
reg [3:0] last_DEBUG_exp;
reg [7:0] last_IMMEDIATE_exp;
reg [15:0] last_PRODUCT_exp;
reg [7:0] last_Q_REG_exp;
reg [7:0] last_RF_A_READ_PORT_exp;
reg [7:0] last_RF_B_READ_PORT_exp;
reg [2:0] last_RF_W_ADDR_exp;
reg [7:0] last_RF_W_DATA_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:15] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 15'b1;
end

// update real /o prevs

always @(trigger)
begin
	A_REG_prev = A_REG;
	ALU_OUT_prev = ALU_OUT;
	CURRENT_INSTR_prev = CURRENT_INSTR;
	DATA_MEM_ADDR_IN_prev = DATA_MEM_ADDR_IN;
	DATA_MEM_DATA_IN_prev = DATA_MEM_DATA_IN;
	DATA_MEM_DATA_OUT_prev = DATA_MEM_DATA_OUT;
	DEBUG_prev = DEBUG;
	IMMEDIATE_prev = IMMEDIATE;
	INSTR_MEM_ADDRESS_prev = INSTR_MEM_ADDRESS;
	PRODUCT_prev = PRODUCT;
	Q_REG_prev = Q_REG;
	RF_A_READ_PORT_prev = RF_A_READ_PORT;
	RF_B_READ_PORT_prev = RF_B_READ_PORT;
	RF_W_ADDR_prev = RF_W_ADDR;
	RF_W_DATA_prev = RF_W_DATA;
end

// update expected /o prevs

always @(trigger)
begin
	A_REG_expected_prev = A_REG_expected;
	ALU_OUT_expected_prev = ALU_OUT_expected;
	CURRENT_INSTR_expected_prev = CURRENT_INSTR_expected;
	DATA_MEM_ADDR_IN_expected_prev = DATA_MEM_ADDR_IN_expected;
	DATA_MEM_DATA_IN_expected_prev = DATA_MEM_DATA_IN_expected;
	DATA_MEM_DATA_OUT_expected_prev = DATA_MEM_DATA_OUT_expected;
	DEBUG_expected_prev = DEBUG_expected;
	IMMEDIATE_expected_prev = IMMEDIATE_expected;
	PRODUCT_expected_prev = PRODUCT_expected;
	Q_REG_expected_prev = Q_REG_expected;
	RF_A_READ_PORT_expected_prev = RF_A_READ_PORT_expected;
	RF_B_READ_PORT_expected_prev = RF_B_READ_PORT_expected;
	RF_W_ADDR_expected_prev = RF_W_ADDR_expected;
	RF_W_DATA_expected_prev = RF_W_DATA_expected;
end


// expected CURRENT_INSTR[ 15 ]
initial
begin
	CURRENT_INSTR_expected[15] = 1'bX;
end 
// expected CURRENT_INSTR[ 14 ]
initial
begin
	CURRENT_INSTR_expected[14] = 1'bX;
end 
// expected CURRENT_INSTR[ 13 ]
initial
begin
	CURRENT_INSTR_expected[13] = 1'bX;
end 
// expected CURRENT_INSTR[ 12 ]
initial
begin
	CURRENT_INSTR_expected[12] = 1'bX;
end 
// expected CURRENT_INSTR[ 11 ]
initial
begin
	CURRENT_INSTR_expected[11] = 1'bX;
end 
// expected CURRENT_INSTR[ 10 ]
initial
begin
	CURRENT_INSTR_expected[10] = 1'bX;
end 
// expected CURRENT_INSTR[ 9 ]
initial
begin
	CURRENT_INSTR_expected[9] = 1'bX;
end 
// expected CURRENT_INSTR[ 8 ]
initial
begin
	CURRENT_INSTR_expected[8] = 1'bX;
end 
// expected CURRENT_INSTR[ 7 ]
initial
begin
	CURRENT_INSTR_expected[7] = 1'bX;
end 
// expected CURRENT_INSTR[ 6 ]
initial
begin
	CURRENT_INSTR_expected[6] = 1'bX;
end 
// expected CURRENT_INSTR[ 5 ]
initial
begin
	CURRENT_INSTR_expected[5] = 1'bX;
end 
// expected CURRENT_INSTR[ 4 ]
initial
begin
	CURRENT_INSTR_expected[4] = 1'bX;
end 
// expected CURRENT_INSTR[ 3 ]
initial
begin
	CURRENT_INSTR_expected[3] = 1'bX;
end 
// expected CURRENT_INSTR[ 2 ]
initial
begin
	CURRENT_INSTR_expected[2] = 1'bX;
end 
// expected CURRENT_INSTR[ 1 ]
initial
begin
	CURRENT_INSTR_expected[1] = 1'bX;
end 
// expected CURRENT_INSTR[ 0 ]
initial
begin
	CURRENT_INSTR_expected[0] = 1'bX;
end 
// expected DEBUG[ 3 ]
initial
begin
	DEBUG_expected[3] = 1'bX;
end 
// expected DEBUG[ 2 ]
initial
begin
	DEBUG_expected[2] = 1'bX;
end 
// expected DEBUG[ 1 ]
initial
begin
	DEBUG_expected[1] = 1'bX;
end 
// expected DEBUG[ 0 ]
initial
begin
	DEBUG_expected[0] = 1'bX;
end 
// expected IMMEDIATE[ 7 ]
initial
begin
	IMMEDIATE_expected[7] = 1'bX;
end 
// expected IMMEDIATE[ 6 ]
initial
begin
	IMMEDIATE_expected[6] = 1'bX;
end 
// expected IMMEDIATE[ 5 ]
initial
begin
	IMMEDIATE_expected[5] = 1'bX;
end 
// expected IMMEDIATE[ 4 ]
initial
begin
	IMMEDIATE_expected[4] = 1'bX;
end 
// expected IMMEDIATE[ 3 ]
initial
begin
	IMMEDIATE_expected[3] = 1'bX;
end 
// expected IMMEDIATE[ 2 ]
initial
begin
	IMMEDIATE_expected[2] = 1'bX;
end 
// expected IMMEDIATE[ 1 ]
initial
begin
	IMMEDIATE_expected[1] = 1'bX;
end 
// expected IMMEDIATE[ 0 ]
initial
begin
	IMMEDIATE_expected[0] = 1'bX;
end 
// expected RF_A_READ_PORT[ 7 ]
initial
begin
	RF_A_READ_PORT_expected[7] = 1'bX;
end 
// expected RF_A_READ_PORT[ 6 ]
initial
begin
	RF_A_READ_PORT_expected[6] = 1'bX;
end 
// expected RF_A_READ_PORT[ 5 ]
initial
begin
	RF_A_READ_PORT_expected[5] = 1'bX;
end 
// expected RF_A_READ_PORT[ 4 ]
initial
begin
	RF_A_READ_PORT_expected[4] = 1'bX;
end 
// expected RF_A_READ_PORT[ 3 ]
initial
begin
	RF_A_READ_PORT_expected[3] = 1'bX;
end 
// expected RF_A_READ_PORT[ 2 ]
initial
begin
	RF_A_READ_PORT_expected[2] = 1'bX;
end 
// expected RF_A_READ_PORT[ 1 ]
initial
begin
	RF_A_READ_PORT_expected[1] = 1'bX;
end 
// expected RF_A_READ_PORT[ 0 ]
initial
begin
	RF_A_READ_PORT_expected[0] = 1'bX;
end 
// expected RF_B_READ_PORT[ 7 ]
initial
begin
	RF_B_READ_PORT_expected[7] = 1'bX;
end 
// expected RF_B_READ_PORT[ 6 ]
initial
begin
	RF_B_READ_PORT_expected[6] = 1'bX;
end 
// expected RF_B_READ_PORT[ 5 ]
initial
begin
	RF_B_READ_PORT_expected[5] = 1'bX;
end 
// expected RF_B_READ_PORT[ 4 ]
initial
begin
	RF_B_READ_PORT_expected[4] = 1'bX;
end 
// expected RF_B_READ_PORT[ 3 ]
initial
begin
	RF_B_READ_PORT_expected[3] = 1'bX;
end 
// expected RF_B_READ_PORT[ 2 ]
initial
begin
	RF_B_READ_PORT_expected[2] = 1'bX;
end 
// expected RF_B_READ_PORT[ 1 ]
initial
begin
	RF_B_READ_PORT_expected[1] = 1'bX;
end 
// expected RF_B_READ_PORT[ 0 ]
initial
begin
	RF_B_READ_PORT_expected[0] = 1'bX;
end 
// expected RF_W_ADDR[ 2 ]
initial
begin
	RF_W_ADDR_expected[2] = 1'bX;
end 
// expected RF_W_ADDR[ 1 ]
initial
begin
	RF_W_ADDR_expected[1] = 1'bX;
end 
// expected RF_W_ADDR[ 0 ]
initial
begin
	RF_W_ADDR_expected[0] = 1'bX;
end 
// expected RF_W_DATA[ 7 ]
initial
begin
	RF_W_DATA_expected[7] = 1'bX;
end 
// expected RF_W_DATA[ 6 ]
initial
begin
	RF_W_DATA_expected[6] = 1'bX;
end 
// expected RF_W_DATA[ 5 ]
initial
begin
	RF_W_DATA_expected[5] = 1'bX;
end 
// expected RF_W_DATA[ 4 ]
initial
begin
	RF_W_DATA_expected[4] = 1'bX;
end 
// expected RF_W_DATA[ 3 ]
initial
begin
	RF_W_DATA_expected[3] = 1'bX;
end 
// expected RF_W_DATA[ 2 ]
initial
begin
	RF_W_DATA_expected[2] = 1'bX;
end 
// expected RF_W_DATA[ 1 ]
initial
begin
	RF_W_DATA_expected[1] = 1'bX;
end 
// expected RF_W_DATA[ 0 ]
initial
begin
	RF_W_DATA_expected[0] = 1'bX;
end 
// expected ALU_OUT[ 7 ]
initial
begin
	ALU_OUT_expected[7] = 1'bX;
end 
// expected ALU_OUT[ 6 ]
initial
begin
	ALU_OUT_expected[6] = 1'bX;
end 
// expected ALU_OUT[ 5 ]
initial
begin
	ALU_OUT_expected[5] = 1'bX;
end 
// expected ALU_OUT[ 4 ]
initial
begin
	ALU_OUT_expected[4] = 1'bX;
end 
// expected ALU_OUT[ 3 ]
initial
begin
	ALU_OUT_expected[3] = 1'bX;
end 
// expected ALU_OUT[ 2 ]
initial
begin
	ALU_OUT_expected[2] = 1'bX;
end 
// expected ALU_OUT[ 1 ]
initial
begin
	ALU_OUT_expected[1] = 1'bX;
end 
// expected ALU_OUT[ 0 ]
initial
begin
	ALU_OUT_expected[0] = 1'bX;
end 
// expected PRODUCT[ 15 ]
initial
begin
	PRODUCT_expected[15] = 1'bX;
end 
// expected PRODUCT[ 14 ]
initial
begin
	PRODUCT_expected[14] = 1'bX;
end 
// expected PRODUCT[ 13 ]
initial
begin
	PRODUCT_expected[13] = 1'bX;
end 
// expected PRODUCT[ 12 ]
initial
begin
	PRODUCT_expected[12] = 1'bX;
end 
// expected PRODUCT[ 11 ]
initial
begin
	PRODUCT_expected[11] = 1'bX;
end 
// expected PRODUCT[ 10 ]
initial
begin
	PRODUCT_expected[10] = 1'bX;
end 
// expected PRODUCT[ 9 ]
initial
begin
	PRODUCT_expected[9] = 1'bX;
end 
// expected PRODUCT[ 8 ]
initial
begin
	PRODUCT_expected[8] = 1'bX;
end 
// expected PRODUCT[ 7 ]
initial
begin
	PRODUCT_expected[7] = 1'bX;
end 
// expected PRODUCT[ 6 ]
initial
begin
	PRODUCT_expected[6] = 1'bX;
end 
// expected PRODUCT[ 5 ]
initial
begin
	PRODUCT_expected[5] = 1'bX;
end 
// expected PRODUCT[ 4 ]
initial
begin
	PRODUCT_expected[4] = 1'bX;
end 
// expected PRODUCT[ 3 ]
initial
begin
	PRODUCT_expected[3] = 1'bX;
end 
// expected PRODUCT[ 2 ]
initial
begin
	PRODUCT_expected[2] = 1'bX;
end 
// expected PRODUCT[ 1 ]
initial
begin
	PRODUCT_expected[1] = 1'bX;
end 
// expected PRODUCT[ 0 ]
initial
begin
	PRODUCT_expected[0] = 1'bX;
end 
// expected A_REG[ 7 ]
initial
begin
	A_REG_expected[7] = 1'bX;
end 
// expected A_REG[ 6 ]
initial
begin
	A_REG_expected[6] = 1'bX;
end 
// expected A_REG[ 5 ]
initial
begin
	A_REG_expected[5] = 1'bX;
end 
// expected A_REG[ 4 ]
initial
begin
	A_REG_expected[4] = 1'bX;
end 
// expected A_REG[ 3 ]
initial
begin
	A_REG_expected[3] = 1'bX;
end 
// expected A_REG[ 2 ]
initial
begin
	A_REG_expected[2] = 1'bX;
end 
// expected A_REG[ 1 ]
initial
begin
	A_REG_expected[1] = 1'bX;
end 
// expected A_REG[ 0 ]
initial
begin
	A_REG_expected[0] = 1'bX;
end 
// expected Q_REG[ 7 ]
initial
begin
	Q_REG_expected[7] = 1'bX;
end 
// expected Q_REG[ 6 ]
initial
begin
	Q_REG_expected[6] = 1'bX;
end 
// expected Q_REG[ 5 ]
initial
begin
	Q_REG_expected[5] = 1'bX;
end 
// expected Q_REG[ 4 ]
initial
begin
	Q_REG_expected[4] = 1'bX;
end 
// expected Q_REG[ 3 ]
initial
begin
	Q_REG_expected[3] = 1'bX;
end 
// expected Q_REG[ 2 ]
initial
begin
	Q_REG_expected[2] = 1'bX;
end 
// expected Q_REG[ 1 ]
initial
begin
	Q_REG_expected[1] = 1'bX;
end 
// expected Q_REG[ 0 ]
initial
begin
	Q_REG_expected[0] = 1'bX;
end 
// expected DATA_MEM_ADDR_IN[ 9 ]
initial
begin
	DATA_MEM_ADDR_IN_expected[9] = 1'bX;
end 
// expected DATA_MEM_ADDR_IN[ 8 ]
initial
begin
	DATA_MEM_ADDR_IN_expected[8] = 1'bX;
end 
// expected DATA_MEM_ADDR_IN[ 7 ]
initial
begin
	DATA_MEM_ADDR_IN_expected[7] = 1'bX;
end 
// expected DATA_MEM_ADDR_IN[ 6 ]
initial
begin
	DATA_MEM_ADDR_IN_expected[6] = 1'bX;
end 
// expected DATA_MEM_ADDR_IN[ 5 ]
initial
begin
	DATA_MEM_ADDR_IN_expected[5] = 1'bX;
end 
// expected DATA_MEM_ADDR_IN[ 4 ]
initial
begin
	DATA_MEM_ADDR_IN_expected[4] = 1'bX;
end 
// expected DATA_MEM_ADDR_IN[ 3 ]
initial
begin
	DATA_MEM_ADDR_IN_expected[3] = 1'bX;
end 
// expected DATA_MEM_ADDR_IN[ 2 ]
initial
begin
	DATA_MEM_ADDR_IN_expected[2] = 1'bX;
end 
// expected DATA_MEM_ADDR_IN[ 1 ]
initial
begin
	DATA_MEM_ADDR_IN_expected[1] = 1'bX;
end 
// expected DATA_MEM_ADDR_IN[ 0 ]
initial
begin
	DATA_MEM_ADDR_IN_expected[0] = 1'bX;
end 
// expected DATA_MEM_DATA_IN[ 15 ]
initial
begin
	DATA_MEM_DATA_IN_expected[15] = 1'bX;
end 
// expected DATA_MEM_DATA_IN[ 14 ]
initial
begin
	DATA_MEM_DATA_IN_expected[14] = 1'bX;
end 
// expected DATA_MEM_DATA_IN[ 13 ]
initial
begin
	DATA_MEM_DATA_IN_expected[13] = 1'bX;
end 
// expected DATA_MEM_DATA_IN[ 12 ]
initial
begin
	DATA_MEM_DATA_IN_expected[12] = 1'bX;
end 
// expected DATA_MEM_DATA_IN[ 11 ]
initial
begin
	DATA_MEM_DATA_IN_expected[11] = 1'bX;
end 
// expected DATA_MEM_DATA_IN[ 10 ]
initial
begin
	DATA_MEM_DATA_IN_expected[10] = 1'bX;
end 
// expected DATA_MEM_DATA_IN[ 9 ]
initial
begin
	DATA_MEM_DATA_IN_expected[9] = 1'bX;
end 
// expected DATA_MEM_DATA_IN[ 8 ]
initial
begin
	DATA_MEM_DATA_IN_expected[8] = 1'bX;
end 
// expected DATA_MEM_DATA_IN[ 7 ]
initial
begin
	DATA_MEM_DATA_IN_expected[7] = 1'bX;
end 
// expected DATA_MEM_DATA_IN[ 6 ]
initial
begin
	DATA_MEM_DATA_IN_expected[6] = 1'bX;
end 
// expected DATA_MEM_DATA_IN[ 5 ]
initial
begin
	DATA_MEM_DATA_IN_expected[5] = 1'bX;
end 
// expected DATA_MEM_DATA_IN[ 4 ]
initial
begin
	DATA_MEM_DATA_IN_expected[4] = 1'bX;
end 
// expected DATA_MEM_DATA_IN[ 3 ]
initial
begin
	DATA_MEM_DATA_IN_expected[3] = 1'bX;
end 
// expected DATA_MEM_DATA_IN[ 2 ]
initial
begin
	DATA_MEM_DATA_IN_expected[2] = 1'bX;
end 
// expected DATA_MEM_DATA_IN[ 1 ]
initial
begin
	DATA_MEM_DATA_IN_expected[1] = 1'bX;
end 
// expected DATA_MEM_DATA_IN[ 0 ]
initial
begin
	DATA_MEM_DATA_IN_expected[0] = 1'bX;
end 
// expected DATA_MEM_DATA_OUT[ 15 ]
initial
begin
	DATA_MEM_DATA_OUT_expected[15] = 1'bX;
end 
// expected DATA_MEM_DATA_OUT[ 14 ]
initial
begin
	DATA_MEM_DATA_OUT_expected[14] = 1'bX;
end 
// expected DATA_MEM_DATA_OUT[ 13 ]
initial
begin
	DATA_MEM_DATA_OUT_expected[13] = 1'bX;
end 
// expected DATA_MEM_DATA_OUT[ 12 ]
initial
begin
	DATA_MEM_DATA_OUT_expected[12] = 1'bX;
end 
// expected DATA_MEM_DATA_OUT[ 11 ]
initial
begin
	DATA_MEM_DATA_OUT_expected[11] = 1'bX;
end 
// expected DATA_MEM_DATA_OUT[ 10 ]
initial
begin
	DATA_MEM_DATA_OUT_expected[10] = 1'bX;
end 
// expected DATA_MEM_DATA_OUT[ 9 ]
initial
begin
	DATA_MEM_DATA_OUT_expected[9] = 1'bX;
end 
// expected DATA_MEM_DATA_OUT[ 8 ]
initial
begin
	DATA_MEM_DATA_OUT_expected[8] = 1'bX;
end 
// expected DATA_MEM_DATA_OUT[ 7 ]
initial
begin
	DATA_MEM_DATA_OUT_expected[7] = 1'bX;
end 
// expected DATA_MEM_DATA_OUT[ 6 ]
initial
begin
	DATA_MEM_DATA_OUT_expected[6] = 1'bX;
end 
// expected DATA_MEM_DATA_OUT[ 5 ]
initial
begin
	DATA_MEM_DATA_OUT_expected[5] = 1'bX;
end 
// expected DATA_MEM_DATA_OUT[ 4 ]
initial
begin
	DATA_MEM_DATA_OUT_expected[4] = 1'bX;
end 
// expected DATA_MEM_DATA_OUT[ 3 ]
initial
begin
	DATA_MEM_DATA_OUT_expected[3] = 1'bX;
end 
// expected DATA_MEM_DATA_OUT[ 2 ]
initial
begin
	DATA_MEM_DATA_OUT_expected[2] = 1'bX;
end 
// expected DATA_MEM_DATA_OUT[ 1 ]
initial
begin
	DATA_MEM_DATA_OUT_expected[1] = 1'bX;
end 
// expected DATA_MEM_DATA_OUT[ 0 ]
initial
begin
	DATA_MEM_DATA_OUT_expected[0] = 1'bX;
end 
// generate trigger
always @(A_REG_expected or A_REG or ALU_OUT_expected or ALU_OUT or CURRENT_INSTR_expected or CURRENT_INSTR or DATA_MEM_ADDR_IN_expected or DATA_MEM_ADDR_IN or DATA_MEM_DATA_IN_expected or DATA_MEM_DATA_IN or DATA_MEM_DATA_OUT_expected or DATA_MEM_DATA_OUT or DEBUG_expected or DEBUG or IMMEDIATE_expected or IMMEDIATE or INSTR_MEM_ADDRESS_expected or INSTR_MEM_ADDRESS or PRODUCT_expected or PRODUCT or Q_REG_expected or Q_REG or RF_A_READ_PORT_expected or RF_A_READ_PORT or RF_B_READ_PORT_expected or RF_B_READ_PORT or RF_W_ADDR_expected or RF_W_ADDR or RF_W_DATA_expected or RF_W_DATA)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected A_REG = %b | expected ALU_OUT = %b | expected CURRENT_INSTR = %b | expected DATA_MEM_ADDR_IN = %b | expected DATA_MEM_DATA_IN = %b | expected DATA_MEM_DATA_OUT = %b | expected DEBUG = %b | expected IMMEDIATE = %b | expected INSTR_MEM_ADDRESS = %b | expected PRODUCT = %b | expected Q_REG = %b | expected RF_A_READ_PORT = %b | expected RF_B_READ_PORT = %b | expected RF_W_ADDR = %b | expected RF_W_DATA = %b | ",A_REG_expected_prev,ALU_OUT_expected_prev,CURRENT_INSTR_expected_prev,DATA_MEM_ADDR_IN_expected_prev,DATA_MEM_DATA_IN_expected_prev,DATA_MEM_DATA_OUT_expected_prev,DEBUG_expected_prev,IMMEDIATE_expected_prev,INSTR_MEM_ADDRESS_expected_prev,PRODUCT_expected_prev,Q_REG_expected_prev,RF_A_READ_PORT_expected_prev,RF_B_READ_PORT_expected_prev,RF_W_ADDR_expected_prev,RF_W_DATA_expected_prev);
	$display("| real A_REG = %b | real ALU_OUT = %b | real CURRENT_INSTR = %b | real DATA_MEM_ADDR_IN = %b | real DATA_MEM_DATA_IN = %b | real DATA_MEM_DATA_OUT = %b | real DEBUG = %b | real IMMEDIATE = %b | real INSTR_MEM_ADDRESS = %b | real PRODUCT = %b | real Q_REG = %b | real RF_A_READ_PORT = %b | real RF_B_READ_PORT = %b | real RF_W_ADDR = %b | real RF_W_DATA = %b | ",A_REG_prev,ALU_OUT_prev,CURRENT_INSTR_prev,DATA_MEM_ADDR_IN_prev,DATA_MEM_DATA_IN_prev,DATA_MEM_DATA_OUT_prev,DEBUG_prev,IMMEDIATE_prev,INSTR_MEM_ADDRESS_prev,PRODUCT_prev,Q_REG_prev,RF_A_READ_PORT_prev,RF_B_READ_PORT_prev,RF_W_ADDR_prev,RF_W_DATA_prev);
`endif
	if (
		( A_REG_expected_prev[0] !== 1'bx ) && ( A_REG_prev[0] !== A_REG_expected_prev[0] )
		&& ((A_REG_expected_prev[0] !== last_A_REG_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A_REG[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_REG_expected_prev);
		$display ("     Real value = %b", A_REG_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_REG_exp[0] = A_REG_expected_prev[0];
	end
	if (
		( A_REG_expected_prev[1] !== 1'bx ) && ( A_REG_prev[1] !== A_REG_expected_prev[1] )
		&& ((A_REG_expected_prev[1] !== last_A_REG_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A_REG[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_REG_expected_prev);
		$display ("     Real value = %b", A_REG_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_REG_exp[1] = A_REG_expected_prev[1];
	end
	if (
		( A_REG_expected_prev[2] !== 1'bx ) && ( A_REG_prev[2] !== A_REG_expected_prev[2] )
		&& ((A_REG_expected_prev[2] !== last_A_REG_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A_REG[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_REG_expected_prev);
		$display ("     Real value = %b", A_REG_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_REG_exp[2] = A_REG_expected_prev[2];
	end
	if (
		( A_REG_expected_prev[3] !== 1'bx ) && ( A_REG_prev[3] !== A_REG_expected_prev[3] )
		&& ((A_REG_expected_prev[3] !== last_A_REG_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A_REG[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_REG_expected_prev);
		$display ("     Real value = %b", A_REG_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_REG_exp[3] = A_REG_expected_prev[3];
	end
	if (
		( A_REG_expected_prev[4] !== 1'bx ) && ( A_REG_prev[4] !== A_REG_expected_prev[4] )
		&& ((A_REG_expected_prev[4] !== last_A_REG_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A_REG[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_REG_expected_prev);
		$display ("     Real value = %b", A_REG_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_REG_exp[4] = A_REG_expected_prev[4];
	end
	if (
		( A_REG_expected_prev[5] !== 1'bx ) && ( A_REG_prev[5] !== A_REG_expected_prev[5] )
		&& ((A_REG_expected_prev[5] !== last_A_REG_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A_REG[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_REG_expected_prev);
		$display ("     Real value = %b", A_REG_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_REG_exp[5] = A_REG_expected_prev[5];
	end
	if (
		( A_REG_expected_prev[6] !== 1'bx ) && ( A_REG_prev[6] !== A_REG_expected_prev[6] )
		&& ((A_REG_expected_prev[6] !== last_A_REG_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A_REG[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_REG_expected_prev);
		$display ("     Real value = %b", A_REG_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_REG_exp[6] = A_REG_expected_prev[6];
	end
	if (
		( A_REG_expected_prev[7] !== 1'bx ) && ( A_REG_prev[7] !== A_REG_expected_prev[7] )
		&& ((A_REG_expected_prev[7] !== last_A_REG_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A_REG[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_REG_expected_prev);
		$display ("     Real value = %b", A_REG_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_REG_exp[7] = A_REG_expected_prev[7];
	end
	if (
		( ALU_OUT_expected_prev[0] !== 1'bx ) && ( ALU_OUT_prev[0] !== ALU_OUT_expected_prev[0] )
		&& ((ALU_OUT_expected_prev[0] !== last_ALU_OUT_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_OUT[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_OUT_expected_prev);
		$display ("     Real value = %b", ALU_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ALU_OUT_exp[0] = ALU_OUT_expected_prev[0];
	end
	if (
		( ALU_OUT_expected_prev[1] !== 1'bx ) && ( ALU_OUT_prev[1] !== ALU_OUT_expected_prev[1] )
		&& ((ALU_OUT_expected_prev[1] !== last_ALU_OUT_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_OUT[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_OUT_expected_prev);
		$display ("     Real value = %b", ALU_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ALU_OUT_exp[1] = ALU_OUT_expected_prev[1];
	end
	if (
		( ALU_OUT_expected_prev[2] !== 1'bx ) && ( ALU_OUT_prev[2] !== ALU_OUT_expected_prev[2] )
		&& ((ALU_OUT_expected_prev[2] !== last_ALU_OUT_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_OUT[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_OUT_expected_prev);
		$display ("     Real value = %b", ALU_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ALU_OUT_exp[2] = ALU_OUT_expected_prev[2];
	end
	if (
		( ALU_OUT_expected_prev[3] !== 1'bx ) && ( ALU_OUT_prev[3] !== ALU_OUT_expected_prev[3] )
		&& ((ALU_OUT_expected_prev[3] !== last_ALU_OUT_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_OUT[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_OUT_expected_prev);
		$display ("     Real value = %b", ALU_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ALU_OUT_exp[3] = ALU_OUT_expected_prev[3];
	end
	if (
		( ALU_OUT_expected_prev[4] !== 1'bx ) && ( ALU_OUT_prev[4] !== ALU_OUT_expected_prev[4] )
		&& ((ALU_OUT_expected_prev[4] !== last_ALU_OUT_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_OUT[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_OUT_expected_prev);
		$display ("     Real value = %b", ALU_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ALU_OUT_exp[4] = ALU_OUT_expected_prev[4];
	end
	if (
		( ALU_OUT_expected_prev[5] !== 1'bx ) && ( ALU_OUT_prev[5] !== ALU_OUT_expected_prev[5] )
		&& ((ALU_OUT_expected_prev[5] !== last_ALU_OUT_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_OUT[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_OUT_expected_prev);
		$display ("     Real value = %b", ALU_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ALU_OUT_exp[5] = ALU_OUT_expected_prev[5];
	end
	if (
		( ALU_OUT_expected_prev[6] !== 1'bx ) && ( ALU_OUT_prev[6] !== ALU_OUT_expected_prev[6] )
		&& ((ALU_OUT_expected_prev[6] !== last_ALU_OUT_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_OUT[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_OUT_expected_prev);
		$display ("     Real value = %b", ALU_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ALU_OUT_exp[6] = ALU_OUT_expected_prev[6];
	end
	if (
		( ALU_OUT_expected_prev[7] !== 1'bx ) && ( ALU_OUT_prev[7] !== ALU_OUT_expected_prev[7] )
		&& ((ALU_OUT_expected_prev[7] !== last_ALU_OUT_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_OUT[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_OUT_expected_prev);
		$display ("     Real value = %b", ALU_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ALU_OUT_exp[7] = ALU_OUT_expected_prev[7];
	end
	if (
		( CURRENT_INSTR_expected_prev[0] !== 1'bx ) && ( CURRENT_INSTR_prev[0] !== CURRENT_INSTR_expected_prev[0] )
		&& ((CURRENT_INSTR_expected_prev[0] !== last_CURRENT_INSTR_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CURRENT_INSTR[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CURRENT_INSTR_expected_prev);
		$display ("     Real value = %b", CURRENT_INSTR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_CURRENT_INSTR_exp[0] = CURRENT_INSTR_expected_prev[0];
	end
	if (
		( CURRENT_INSTR_expected_prev[1] !== 1'bx ) && ( CURRENT_INSTR_prev[1] !== CURRENT_INSTR_expected_prev[1] )
		&& ((CURRENT_INSTR_expected_prev[1] !== last_CURRENT_INSTR_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CURRENT_INSTR[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CURRENT_INSTR_expected_prev);
		$display ("     Real value = %b", CURRENT_INSTR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_CURRENT_INSTR_exp[1] = CURRENT_INSTR_expected_prev[1];
	end
	if (
		( CURRENT_INSTR_expected_prev[2] !== 1'bx ) && ( CURRENT_INSTR_prev[2] !== CURRENT_INSTR_expected_prev[2] )
		&& ((CURRENT_INSTR_expected_prev[2] !== last_CURRENT_INSTR_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CURRENT_INSTR[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CURRENT_INSTR_expected_prev);
		$display ("     Real value = %b", CURRENT_INSTR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_CURRENT_INSTR_exp[2] = CURRENT_INSTR_expected_prev[2];
	end
	if (
		( CURRENT_INSTR_expected_prev[3] !== 1'bx ) && ( CURRENT_INSTR_prev[3] !== CURRENT_INSTR_expected_prev[3] )
		&& ((CURRENT_INSTR_expected_prev[3] !== last_CURRENT_INSTR_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CURRENT_INSTR[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CURRENT_INSTR_expected_prev);
		$display ("     Real value = %b", CURRENT_INSTR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_CURRENT_INSTR_exp[3] = CURRENT_INSTR_expected_prev[3];
	end
	if (
		( CURRENT_INSTR_expected_prev[4] !== 1'bx ) && ( CURRENT_INSTR_prev[4] !== CURRENT_INSTR_expected_prev[4] )
		&& ((CURRENT_INSTR_expected_prev[4] !== last_CURRENT_INSTR_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CURRENT_INSTR[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CURRENT_INSTR_expected_prev);
		$display ("     Real value = %b", CURRENT_INSTR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_CURRENT_INSTR_exp[4] = CURRENT_INSTR_expected_prev[4];
	end
	if (
		( CURRENT_INSTR_expected_prev[5] !== 1'bx ) && ( CURRENT_INSTR_prev[5] !== CURRENT_INSTR_expected_prev[5] )
		&& ((CURRENT_INSTR_expected_prev[5] !== last_CURRENT_INSTR_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CURRENT_INSTR[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CURRENT_INSTR_expected_prev);
		$display ("     Real value = %b", CURRENT_INSTR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_CURRENT_INSTR_exp[5] = CURRENT_INSTR_expected_prev[5];
	end
	if (
		( CURRENT_INSTR_expected_prev[6] !== 1'bx ) && ( CURRENT_INSTR_prev[6] !== CURRENT_INSTR_expected_prev[6] )
		&& ((CURRENT_INSTR_expected_prev[6] !== last_CURRENT_INSTR_exp[6]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CURRENT_INSTR[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CURRENT_INSTR_expected_prev);
		$display ("     Real value = %b", CURRENT_INSTR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_CURRENT_INSTR_exp[6] = CURRENT_INSTR_expected_prev[6];
	end
	if (
		( CURRENT_INSTR_expected_prev[7] !== 1'bx ) && ( CURRENT_INSTR_prev[7] !== CURRENT_INSTR_expected_prev[7] )
		&& ((CURRENT_INSTR_expected_prev[7] !== last_CURRENT_INSTR_exp[7]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CURRENT_INSTR[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CURRENT_INSTR_expected_prev);
		$display ("     Real value = %b", CURRENT_INSTR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_CURRENT_INSTR_exp[7] = CURRENT_INSTR_expected_prev[7];
	end
	if (
		( CURRENT_INSTR_expected_prev[8] !== 1'bx ) && ( CURRENT_INSTR_prev[8] !== CURRENT_INSTR_expected_prev[8] )
		&& ((CURRENT_INSTR_expected_prev[8] !== last_CURRENT_INSTR_exp[8]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CURRENT_INSTR[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CURRENT_INSTR_expected_prev);
		$display ("     Real value = %b", CURRENT_INSTR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_CURRENT_INSTR_exp[8] = CURRENT_INSTR_expected_prev[8];
	end
	if (
		( CURRENT_INSTR_expected_prev[9] !== 1'bx ) && ( CURRENT_INSTR_prev[9] !== CURRENT_INSTR_expected_prev[9] )
		&& ((CURRENT_INSTR_expected_prev[9] !== last_CURRENT_INSTR_exp[9]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CURRENT_INSTR[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CURRENT_INSTR_expected_prev);
		$display ("     Real value = %b", CURRENT_INSTR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_CURRENT_INSTR_exp[9] = CURRENT_INSTR_expected_prev[9];
	end
	if (
		( CURRENT_INSTR_expected_prev[10] !== 1'bx ) && ( CURRENT_INSTR_prev[10] !== CURRENT_INSTR_expected_prev[10] )
		&& ((CURRENT_INSTR_expected_prev[10] !== last_CURRENT_INSTR_exp[10]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CURRENT_INSTR[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CURRENT_INSTR_expected_prev);
		$display ("     Real value = %b", CURRENT_INSTR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_CURRENT_INSTR_exp[10] = CURRENT_INSTR_expected_prev[10];
	end
	if (
		( CURRENT_INSTR_expected_prev[11] !== 1'bx ) && ( CURRENT_INSTR_prev[11] !== CURRENT_INSTR_expected_prev[11] )
		&& ((CURRENT_INSTR_expected_prev[11] !== last_CURRENT_INSTR_exp[11]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CURRENT_INSTR[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CURRENT_INSTR_expected_prev);
		$display ("     Real value = %b", CURRENT_INSTR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_CURRENT_INSTR_exp[11] = CURRENT_INSTR_expected_prev[11];
	end
	if (
		( CURRENT_INSTR_expected_prev[12] !== 1'bx ) && ( CURRENT_INSTR_prev[12] !== CURRENT_INSTR_expected_prev[12] )
		&& ((CURRENT_INSTR_expected_prev[12] !== last_CURRENT_INSTR_exp[12]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CURRENT_INSTR[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CURRENT_INSTR_expected_prev);
		$display ("     Real value = %b", CURRENT_INSTR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_CURRENT_INSTR_exp[12] = CURRENT_INSTR_expected_prev[12];
	end
	if (
		( CURRENT_INSTR_expected_prev[13] !== 1'bx ) && ( CURRENT_INSTR_prev[13] !== CURRENT_INSTR_expected_prev[13] )
		&& ((CURRENT_INSTR_expected_prev[13] !== last_CURRENT_INSTR_exp[13]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CURRENT_INSTR[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CURRENT_INSTR_expected_prev);
		$display ("     Real value = %b", CURRENT_INSTR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_CURRENT_INSTR_exp[13] = CURRENT_INSTR_expected_prev[13];
	end
	if (
		( CURRENT_INSTR_expected_prev[14] !== 1'bx ) && ( CURRENT_INSTR_prev[14] !== CURRENT_INSTR_expected_prev[14] )
		&& ((CURRENT_INSTR_expected_prev[14] !== last_CURRENT_INSTR_exp[14]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CURRENT_INSTR[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CURRENT_INSTR_expected_prev);
		$display ("     Real value = %b", CURRENT_INSTR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_CURRENT_INSTR_exp[14] = CURRENT_INSTR_expected_prev[14];
	end
	if (
		( CURRENT_INSTR_expected_prev[15] !== 1'bx ) && ( CURRENT_INSTR_prev[15] !== CURRENT_INSTR_expected_prev[15] )
		&& ((CURRENT_INSTR_expected_prev[15] !== last_CURRENT_INSTR_exp[15]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CURRENT_INSTR[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CURRENT_INSTR_expected_prev);
		$display ("     Real value = %b", CURRENT_INSTR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_CURRENT_INSTR_exp[15] = CURRENT_INSTR_expected_prev[15];
	end
	if (
		( DATA_MEM_ADDR_IN_expected_prev[0] !== 1'bx ) && ( DATA_MEM_ADDR_IN_prev[0] !== DATA_MEM_ADDR_IN_expected_prev[0] )
		&& ((DATA_MEM_ADDR_IN_expected_prev[0] !== last_DATA_MEM_ADDR_IN_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_MEM_ADDR_IN[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_MEM_ADDR_IN_expected_prev);
		$display ("     Real value = %b", DATA_MEM_ADDR_IN_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_DATA_MEM_ADDR_IN_exp[0] = DATA_MEM_ADDR_IN_expected_prev[0];
	end
	if (
		( DATA_MEM_ADDR_IN_expected_prev[1] !== 1'bx ) && ( DATA_MEM_ADDR_IN_prev[1] !== DATA_MEM_ADDR_IN_expected_prev[1] )
		&& ((DATA_MEM_ADDR_IN_expected_prev[1] !== last_DATA_MEM_ADDR_IN_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_MEM_ADDR_IN[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_MEM_ADDR_IN_expected_prev);
		$display ("     Real value = %b", DATA_MEM_ADDR_IN_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_DATA_MEM_ADDR_IN_exp[1] = DATA_MEM_ADDR_IN_expected_prev[1];
	end
	if (
		( DATA_MEM_ADDR_IN_expected_prev[2] !== 1'bx ) && ( DATA_MEM_ADDR_IN_prev[2] !== DATA_MEM_ADDR_IN_expected_prev[2] )
		&& ((DATA_MEM_ADDR_IN_expected_prev[2] !== last_DATA_MEM_ADDR_IN_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_MEM_ADDR_IN[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_MEM_ADDR_IN_expected_prev);
		$display ("     Real value = %b", DATA_MEM_ADDR_IN_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_DATA_MEM_ADDR_IN_exp[2] = DATA_MEM_ADDR_IN_expected_prev[2];
	end
	if (
		( DATA_MEM_ADDR_IN_expected_prev[3] !== 1'bx ) && ( DATA_MEM_ADDR_IN_prev[3] !== DATA_MEM_ADDR_IN_expected_prev[3] )
		&& ((DATA_MEM_ADDR_IN_expected_prev[3] !== last_DATA_MEM_ADDR_IN_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_MEM_ADDR_IN[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_MEM_ADDR_IN_expected_prev);
		$display ("     Real value = %b", DATA_MEM_ADDR_IN_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_DATA_MEM_ADDR_IN_exp[3] = DATA_MEM_ADDR_IN_expected_prev[3];
	end
	if (
		( DATA_MEM_ADDR_IN_expected_prev[4] !== 1'bx ) && ( DATA_MEM_ADDR_IN_prev[4] !== DATA_MEM_ADDR_IN_expected_prev[4] )
		&& ((DATA_MEM_ADDR_IN_expected_prev[4] !== last_DATA_MEM_ADDR_IN_exp[4]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_MEM_ADDR_IN[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_MEM_ADDR_IN_expected_prev);
		$display ("     Real value = %b", DATA_MEM_ADDR_IN_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_DATA_MEM_ADDR_IN_exp[4] = DATA_MEM_ADDR_IN_expected_prev[4];
	end
	if (
		( DATA_MEM_ADDR_IN_expected_prev[5] !== 1'bx ) && ( DATA_MEM_ADDR_IN_prev[5] !== DATA_MEM_ADDR_IN_expected_prev[5] )
		&& ((DATA_MEM_ADDR_IN_expected_prev[5] !== last_DATA_MEM_ADDR_IN_exp[5]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_MEM_ADDR_IN[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_MEM_ADDR_IN_expected_prev);
		$display ("     Real value = %b", DATA_MEM_ADDR_IN_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_DATA_MEM_ADDR_IN_exp[5] = DATA_MEM_ADDR_IN_expected_prev[5];
	end
	if (
		( DATA_MEM_ADDR_IN_expected_prev[6] !== 1'bx ) && ( DATA_MEM_ADDR_IN_prev[6] !== DATA_MEM_ADDR_IN_expected_prev[6] )
		&& ((DATA_MEM_ADDR_IN_expected_prev[6] !== last_DATA_MEM_ADDR_IN_exp[6]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_MEM_ADDR_IN[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_MEM_ADDR_IN_expected_prev);
		$display ("     Real value = %b", DATA_MEM_ADDR_IN_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_DATA_MEM_ADDR_IN_exp[6] = DATA_MEM_ADDR_IN_expected_prev[6];
	end
	if (
		( DATA_MEM_ADDR_IN_expected_prev[7] !== 1'bx ) && ( DATA_MEM_ADDR_IN_prev[7] !== DATA_MEM_ADDR_IN_expected_prev[7] )
		&& ((DATA_MEM_ADDR_IN_expected_prev[7] !== last_DATA_MEM_ADDR_IN_exp[7]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_MEM_ADDR_IN[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_MEM_ADDR_IN_expected_prev);
		$display ("     Real value = %b", DATA_MEM_ADDR_IN_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_DATA_MEM_ADDR_IN_exp[7] = DATA_MEM_ADDR_IN_expected_prev[7];
	end
	if (
		( DATA_MEM_ADDR_IN_expected_prev[8] !== 1'bx ) && ( DATA_MEM_ADDR_IN_prev[8] !== DATA_MEM_ADDR_IN_expected_prev[8] )
		&& ((DATA_MEM_ADDR_IN_expected_prev[8] !== last_DATA_MEM_ADDR_IN_exp[8]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_MEM_ADDR_IN[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_MEM_ADDR_IN_expected_prev);
		$display ("     Real value = %b", DATA_MEM_ADDR_IN_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_DATA_MEM_ADDR_IN_exp[8] = DATA_MEM_ADDR_IN_expected_prev[8];
	end
	if (
		( DATA_MEM_ADDR_IN_expected_prev[9] !== 1'bx ) && ( DATA_MEM_ADDR_IN_prev[9] !== DATA_MEM_ADDR_IN_expected_prev[9] )
		&& ((DATA_MEM_ADDR_IN_expected_prev[9] !== last_DATA_MEM_ADDR_IN_exp[9]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_MEM_ADDR_IN[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_MEM_ADDR_IN_expected_prev);
		$display ("     Real value = %b", DATA_MEM_ADDR_IN_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_DATA_MEM_ADDR_IN_exp[9] = DATA_MEM_ADDR_IN_expected_prev[9];
	end
	if (
		( DATA_MEM_DATA_IN_expected_prev[0] !== 1'bx ) && ( DATA_MEM_DATA_IN_prev[0] !== DATA_MEM_DATA_IN_expected_prev[0] )
		&& ((DATA_MEM_DATA_IN_expected_prev[0] !== last_DATA_MEM_DATA_IN_exp[0]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_MEM_DATA_IN[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_MEM_DATA_IN_expected_prev);
		$display ("     Real value = %b", DATA_MEM_DATA_IN_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_DATA_MEM_DATA_IN_exp[0] = DATA_MEM_DATA_IN_expected_prev[0];
	end
	if (
		( DATA_MEM_DATA_IN_expected_prev[1] !== 1'bx ) && ( DATA_MEM_DATA_IN_prev[1] !== DATA_MEM_DATA_IN_expected_prev[1] )
		&& ((DATA_MEM_DATA_IN_expected_prev[1] !== last_DATA_MEM_DATA_IN_exp[1]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_MEM_DATA_IN[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_MEM_DATA_IN_expected_prev);
		$display ("     Real value = %b", DATA_MEM_DATA_IN_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_DATA_MEM_DATA_IN_exp[1] = DATA_MEM_DATA_IN_expected_prev[1];
	end
	if (
		( DATA_MEM_DATA_IN_expected_prev[2] !== 1'bx ) && ( DATA_MEM_DATA_IN_prev[2] !== DATA_MEM_DATA_IN_expected_prev[2] )
		&& ((DATA_MEM_DATA_IN_expected_prev[2] !== last_DATA_MEM_DATA_IN_exp[2]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_MEM_DATA_IN[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_MEM_DATA_IN_expected_prev);
		$display ("     Real value = %b", DATA_MEM_DATA_IN_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_DATA_MEM_DATA_IN_exp[2] = DATA_MEM_DATA_IN_expected_prev[2];
	end
	if (
		( DATA_MEM_DATA_IN_expected_prev[3] !== 1'bx ) && ( DATA_MEM_DATA_IN_prev[3] !== DATA_MEM_DATA_IN_expected_prev[3] )
		&& ((DATA_MEM_DATA_IN_expected_prev[3] !== last_DATA_MEM_DATA_IN_exp[3]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_MEM_DATA_IN[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_MEM_DATA_IN_expected_prev);
		$display ("     Real value = %b", DATA_MEM_DATA_IN_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_DATA_MEM_DATA_IN_exp[3] = DATA_MEM_DATA_IN_expected_prev[3];
	end
	if (
		( DATA_MEM_DATA_IN_expected_prev[4] !== 1'bx ) && ( DATA_MEM_DATA_IN_prev[4] !== DATA_MEM_DATA_IN_expected_prev[4] )
		&& ((DATA_MEM_DATA_IN_expected_prev[4] !== last_DATA_MEM_DATA_IN_exp[4]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_MEM_DATA_IN[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_MEM_DATA_IN_expected_prev);
		$display ("     Real value = %b", DATA_MEM_DATA_IN_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_DATA_MEM_DATA_IN_exp[4] = DATA_MEM_DATA_IN_expected_prev[4];
	end
	if (
		( DATA_MEM_DATA_IN_expected_prev[5] !== 1'bx ) && ( DATA_MEM_DATA_IN_prev[5] !== DATA_MEM_DATA_IN_expected_prev[5] )
		&& ((DATA_MEM_DATA_IN_expected_prev[5] !== last_DATA_MEM_DATA_IN_exp[5]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_MEM_DATA_IN[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_MEM_DATA_IN_expected_prev);
		$display ("     Real value = %b", DATA_MEM_DATA_IN_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_DATA_MEM_DATA_IN_exp[5] = DATA_MEM_DATA_IN_expected_prev[5];
	end
	if (
		( DATA_MEM_DATA_IN_expected_prev[6] !== 1'bx ) && ( DATA_MEM_DATA_IN_prev[6] !== DATA_MEM_DATA_IN_expected_prev[6] )
		&& ((DATA_MEM_DATA_IN_expected_prev[6] !== last_DATA_MEM_DATA_IN_exp[6]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_MEM_DATA_IN[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_MEM_DATA_IN_expected_prev);
		$display ("     Real value = %b", DATA_MEM_DATA_IN_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_DATA_MEM_DATA_IN_exp[6] = DATA_MEM_DATA_IN_expected_prev[6];
	end
	if (
		( DATA_MEM_DATA_IN_expected_prev[7] !== 1'bx ) && ( DATA_MEM_DATA_IN_prev[7] !== DATA_MEM_DATA_IN_expected_prev[7] )
		&& ((DATA_MEM_DATA_IN_expected_prev[7] !== last_DATA_MEM_DATA_IN_exp[7]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_MEM_DATA_IN[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_MEM_DATA_IN_expected_prev);
		$display ("     Real value = %b", DATA_MEM_DATA_IN_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_DATA_MEM_DATA_IN_exp[7] = DATA_MEM_DATA_IN_expected_prev[7];
	end
	if (
		( DATA_MEM_DATA_IN_expected_prev[8] !== 1'bx ) && ( DATA_MEM_DATA_IN_prev[8] !== DATA_MEM_DATA_IN_expected_prev[8] )
		&& ((DATA_MEM_DATA_IN_expected_prev[8] !== last_DATA_MEM_DATA_IN_exp[8]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_MEM_DATA_IN[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_MEM_DATA_IN_expected_prev);
		$display ("     Real value = %b", DATA_MEM_DATA_IN_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_DATA_MEM_DATA_IN_exp[8] = DATA_MEM_DATA_IN_expected_prev[8];
	end
	if (
		( DATA_MEM_DATA_IN_expected_prev[9] !== 1'bx ) && ( DATA_MEM_DATA_IN_prev[9] !== DATA_MEM_DATA_IN_expected_prev[9] )
		&& ((DATA_MEM_DATA_IN_expected_prev[9] !== last_DATA_MEM_DATA_IN_exp[9]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_MEM_DATA_IN[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_MEM_DATA_IN_expected_prev);
		$display ("     Real value = %b", DATA_MEM_DATA_IN_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_DATA_MEM_DATA_IN_exp[9] = DATA_MEM_DATA_IN_expected_prev[9];
	end
	if (
		( DATA_MEM_DATA_IN_expected_prev[10] !== 1'bx ) && ( DATA_MEM_DATA_IN_prev[10] !== DATA_MEM_DATA_IN_expected_prev[10] )
		&& ((DATA_MEM_DATA_IN_expected_prev[10] !== last_DATA_MEM_DATA_IN_exp[10]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_MEM_DATA_IN[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_MEM_DATA_IN_expected_prev);
		$display ("     Real value = %b", DATA_MEM_DATA_IN_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_DATA_MEM_DATA_IN_exp[10] = DATA_MEM_DATA_IN_expected_prev[10];
	end
	if (
		( DATA_MEM_DATA_IN_expected_prev[11] !== 1'bx ) && ( DATA_MEM_DATA_IN_prev[11] !== DATA_MEM_DATA_IN_expected_prev[11] )
		&& ((DATA_MEM_DATA_IN_expected_prev[11] !== last_DATA_MEM_DATA_IN_exp[11]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_MEM_DATA_IN[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_MEM_DATA_IN_expected_prev);
		$display ("     Real value = %b", DATA_MEM_DATA_IN_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_DATA_MEM_DATA_IN_exp[11] = DATA_MEM_DATA_IN_expected_prev[11];
	end
	if (
		( DATA_MEM_DATA_IN_expected_prev[12] !== 1'bx ) && ( DATA_MEM_DATA_IN_prev[12] !== DATA_MEM_DATA_IN_expected_prev[12] )
		&& ((DATA_MEM_DATA_IN_expected_prev[12] !== last_DATA_MEM_DATA_IN_exp[12]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_MEM_DATA_IN[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_MEM_DATA_IN_expected_prev);
		$display ("     Real value = %b", DATA_MEM_DATA_IN_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_DATA_MEM_DATA_IN_exp[12] = DATA_MEM_DATA_IN_expected_prev[12];
	end
	if (
		( DATA_MEM_DATA_IN_expected_prev[13] !== 1'bx ) && ( DATA_MEM_DATA_IN_prev[13] !== DATA_MEM_DATA_IN_expected_prev[13] )
		&& ((DATA_MEM_DATA_IN_expected_prev[13] !== last_DATA_MEM_DATA_IN_exp[13]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_MEM_DATA_IN[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_MEM_DATA_IN_expected_prev);
		$display ("     Real value = %b", DATA_MEM_DATA_IN_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_DATA_MEM_DATA_IN_exp[13] = DATA_MEM_DATA_IN_expected_prev[13];
	end
	if (
		( DATA_MEM_DATA_IN_expected_prev[14] !== 1'bx ) && ( DATA_MEM_DATA_IN_prev[14] !== DATA_MEM_DATA_IN_expected_prev[14] )
		&& ((DATA_MEM_DATA_IN_expected_prev[14] !== last_DATA_MEM_DATA_IN_exp[14]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_MEM_DATA_IN[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_MEM_DATA_IN_expected_prev);
		$display ("     Real value = %b", DATA_MEM_DATA_IN_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_DATA_MEM_DATA_IN_exp[14] = DATA_MEM_DATA_IN_expected_prev[14];
	end
	if (
		( DATA_MEM_DATA_IN_expected_prev[15] !== 1'bx ) && ( DATA_MEM_DATA_IN_prev[15] !== DATA_MEM_DATA_IN_expected_prev[15] )
		&& ((DATA_MEM_DATA_IN_expected_prev[15] !== last_DATA_MEM_DATA_IN_exp[15]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_MEM_DATA_IN[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_MEM_DATA_IN_expected_prev);
		$display ("     Real value = %b", DATA_MEM_DATA_IN_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_DATA_MEM_DATA_IN_exp[15] = DATA_MEM_DATA_IN_expected_prev[15];
	end
	if (
		( DATA_MEM_DATA_OUT_expected_prev[0] !== 1'bx ) && ( DATA_MEM_DATA_OUT_prev[0] !== DATA_MEM_DATA_OUT_expected_prev[0] )
		&& ((DATA_MEM_DATA_OUT_expected_prev[0] !== last_DATA_MEM_DATA_OUT_exp[0]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_MEM_DATA_OUT[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_MEM_DATA_OUT_expected_prev);
		$display ("     Real value = %b", DATA_MEM_DATA_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_DATA_MEM_DATA_OUT_exp[0] = DATA_MEM_DATA_OUT_expected_prev[0];
	end
	if (
		( DATA_MEM_DATA_OUT_expected_prev[1] !== 1'bx ) && ( DATA_MEM_DATA_OUT_prev[1] !== DATA_MEM_DATA_OUT_expected_prev[1] )
		&& ((DATA_MEM_DATA_OUT_expected_prev[1] !== last_DATA_MEM_DATA_OUT_exp[1]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_MEM_DATA_OUT[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_MEM_DATA_OUT_expected_prev);
		$display ("     Real value = %b", DATA_MEM_DATA_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_DATA_MEM_DATA_OUT_exp[1] = DATA_MEM_DATA_OUT_expected_prev[1];
	end
	if (
		( DATA_MEM_DATA_OUT_expected_prev[2] !== 1'bx ) && ( DATA_MEM_DATA_OUT_prev[2] !== DATA_MEM_DATA_OUT_expected_prev[2] )
		&& ((DATA_MEM_DATA_OUT_expected_prev[2] !== last_DATA_MEM_DATA_OUT_exp[2]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_MEM_DATA_OUT[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_MEM_DATA_OUT_expected_prev);
		$display ("     Real value = %b", DATA_MEM_DATA_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_DATA_MEM_DATA_OUT_exp[2] = DATA_MEM_DATA_OUT_expected_prev[2];
	end
	if (
		( DATA_MEM_DATA_OUT_expected_prev[3] !== 1'bx ) && ( DATA_MEM_DATA_OUT_prev[3] !== DATA_MEM_DATA_OUT_expected_prev[3] )
		&& ((DATA_MEM_DATA_OUT_expected_prev[3] !== last_DATA_MEM_DATA_OUT_exp[3]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_MEM_DATA_OUT[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_MEM_DATA_OUT_expected_prev);
		$display ("     Real value = %b", DATA_MEM_DATA_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_DATA_MEM_DATA_OUT_exp[3] = DATA_MEM_DATA_OUT_expected_prev[3];
	end
	if (
		( DATA_MEM_DATA_OUT_expected_prev[4] !== 1'bx ) && ( DATA_MEM_DATA_OUT_prev[4] !== DATA_MEM_DATA_OUT_expected_prev[4] )
		&& ((DATA_MEM_DATA_OUT_expected_prev[4] !== last_DATA_MEM_DATA_OUT_exp[4]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_MEM_DATA_OUT[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_MEM_DATA_OUT_expected_prev);
		$display ("     Real value = %b", DATA_MEM_DATA_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_DATA_MEM_DATA_OUT_exp[4] = DATA_MEM_DATA_OUT_expected_prev[4];
	end
	if (
		( DATA_MEM_DATA_OUT_expected_prev[5] !== 1'bx ) && ( DATA_MEM_DATA_OUT_prev[5] !== DATA_MEM_DATA_OUT_expected_prev[5] )
		&& ((DATA_MEM_DATA_OUT_expected_prev[5] !== last_DATA_MEM_DATA_OUT_exp[5]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_MEM_DATA_OUT[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_MEM_DATA_OUT_expected_prev);
		$display ("     Real value = %b", DATA_MEM_DATA_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_DATA_MEM_DATA_OUT_exp[5] = DATA_MEM_DATA_OUT_expected_prev[5];
	end
	if (
		( DATA_MEM_DATA_OUT_expected_prev[6] !== 1'bx ) && ( DATA_MEM_DATA_OUT_prev[6] !== DATA_MEM_DATA_OUT_expected_prev[6] )
		&& ((DATA_MEM_DATA_OUT_expected_prev[6] !== last_DATA_MEM_DATA_OUT_exp[6]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_MEM_DATA_OUT[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_MEM_DATA_OUT_expected_prev);
		$display ("     Real value = %b", DATA_MEM_DATA_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_DATA_MEM_DATA_OUT_exp[6] = DATA_MEM_DATA_OUT_expected_prev[6];
	end
	if (
		( DATA_MEM_DATA_OUT_expected_prev[7] !== 1'bx ) && ( DATA_MEM_DATA_OUT_prev[7] !== DATA_MEM_DATA_OUT_expected_prev[7] )
		&& ((DATA_MEM_DATA_OUT_expected_prev[7] !== last_DATA_MEM_DATA_OUT_exp[7]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_MEM_DATA_OUT[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_MEM_DATA_OUT_expected_prev);
		$display ("     Real value = %b", DATA_MEM_DATA_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_DATA_MEM_DATA_OUT_exp[7] = DATA_MEM_DATA_OUT_expected_prev[7];
	end
	if (
		( DATA_MEM_DATA_OUT_expected_prev[8] !== 1'bx ) && ( DATA_MEM_DATA_OUT_prev[8] !== DATA_MEM_DATA_OUT_expected_prev[8] )
		&& ((DATA_MEM_DATA_OUT_expected_prev[8] !== last_DATA_MEM_DATA_OUT_exp[8]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_MEM_DATA_OUT[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_MEM_DATA_OUT_expected_prev);
		$display ("     Real value = %b", DATA_MEM_DATA_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_DATA_MEM_DATA_OUT_exp[8] = DATA_MEM_DATA_OUT_expected_prev[8];
	end
	if (
		( DATA_MEM_DATA_OUT_expected_prev[9] !== 1'bx ) && ( DATA_MEM_DATA_OUT_prev[9] !== DATA_MEM_DATA_OUT_expected_prev[9] )
		&& ((DATA_MEM_DATA_OUT_expected_prev[9] !== last_DATA_MEM_DATA_OUT_exp[9]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_MEM_DATA_OUT[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_MEM_DATA_OUT_expected_prev);
		$display ("     Real value = %b", DATA_MEM_DATA_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_DATA_MEM_DATA_OUT_exp[9] = DATA_MEM_DATA_OUT_expected_prev[9];
	end
	if (
		( DATA_MEM_DATA_OUT_expected_prev[10] !== 1'bx ) && ( DATA_MEM_DATA_OUT_prev[10] !== DATA_MEM_DATA_OUT_expected_prev[10] )
		&& ((DATA_MEM_DATA_OUT_expected_prev[10] !== last_DATA_MEM_DATA_OUT_exp[10]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_MEM_DATA_OUT[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_MEM_DATA_OUT_expected_prev);
		$display ("     Real value = %b", DATA_MEM_DATA_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_DATA_MEM_DATA_OUT_exp[10] = DATA_MEM_DATA_OUT_expected_prev[10];
	end
	if (
		( DATA_MEM_DATA_OUT_expected_prev[11] !== 1'bx ) && ( DATA_MEM_DATA_OUT_prev[11] !== DATA_MEM_DATA_OUT_expected_prev[11] )
		&& ((DATA_MEM_DATA_OUT_expected_prev[11] !== last_DATA_MEM_DATA_OUT_exp[11]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_MEM_DATA_OUT[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_MEM_DATA_OUT_expected_prev);
		$display ("     Real value = %b", DATA_MEM_DATA_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_DATA_MEM_DATA_OUT_exp[11] = DATA_MEM_DATA_OUT_expected_prev[11];
	end
	if (
		( DATA_MEM_DATA_OUT_expected_prev[12] !== 1'bx ) && ( DATA_MEM_DATA_OUT_prev[12] !== DATA_MEM_DATA_OUT_expected_prev[12] )
		&& ((DATA_MEM_DATA_OUT_expected_prev[12] !== last_DATA_MEM_DATA_OUT_exp[12]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_MEM_DATA_OUT[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_MEM_DATA_OUT_expected_prev);
		$display ("     Real value = %b", DATA_MEM_DATA_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_DATA_MEM_DATA_OUT_exp[12] = DATA_MEM_DATA_OUT_expected_prev[12];
	end
	if (
		( DATA_MEM_DATA_OUT_expected_prev[13] !== 1'bx ) && ( DATA_MEM_DATA_OUT_prev[13] !== DATA_MEM_DATA_OUT_expected_prev[13] )
		&& ((DATA_MEM_DATA_OUT_expected_prev[13] !== last_DATA_MEM_DATA_OUT_exp[13]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_MEM_DATA_OUT[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_MEM_DATA_OUT_expected_prev);
		$display ("     Real value = %b", DATA_MEM_DATA_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_DATA_MEM_DATA_OUT_exp[13] = DATA_MEM_DATA_OUT_expected_prev[13];
	end
	if (
		( DATA_MEM_DATA_OUT_expected_prev[14] !== 1'bx ) && ( DATA_MEM_DATA_OUT_prev[14] !== DATA_MEM_DATA_OUT_expected_prev[14] )
		&& ((DATA_MEM_DATA_OUT_expected_prev[14] !== last_DATA_MEM_DATA_OUT_exp[14]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_MEM_DATA_OUT[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_MEM_DATA_OUT_expected_prev);
		$display ("     Real value = %b", DATA_MEM_DATA_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_DATA_MEM_DATA_OUT_exp[14] = DATA_MEM_DATA_OUT_expected_prev[14];
	end
	if (
		( DATA_MEM_DATA_OUT_expected_prev[15] !== 1'bx ) && ( DATA_MEM_DATA_OUT_prev[15] !== DATA_MEM_DATA_OUT_expected_prev[15] )
		&& ((DATA_MEM_DATA_OUT_expected_prev[15] !== last_DATA_MEM_DATA_OUT_exp[15]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_MEM_DATA_OUT[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_MEM_DATA_OUT_expected_prev);
		$display ("     Real value = %b", DATA_MEM_DATA_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_DATA_MEM_DATA_OUT_exp[15] = DATA_MEM_DATA_OUT_expected_prev[15];
	end
	if (
		( DEBUG_expected_prev[0] !== 1'bx ) && ( DEBUG_prev[0] !== DEBUG_expected_prev[0] )
		&& ((DEBUG_expected_prev[0] !== last_DEBUG_exp[0]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DEBUG[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DEBUG_expected_prev);
		$display ("     Real value = %b", DEBUG_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_DEBUG_exp[0] = DEBUG_expected_prev[0];
	end
	if (
		( DEBUG_expected_prev[1] !== 1'bx ) && ( DEBUG_prev[1] !== DEBUG_expected_prev[1] )
		&& ((DEBUG_expected_prev[1] !== last_DEBUG_exp[1]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DEBUG[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DEBUG_expected_prev);
		$display ("     Real value = %b", DEBUG_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_DEBUG_exp[1] = DEBUG_expected_prev[1];
	end
	if (
		( DEBUG_expected_prev[2] !== 1'bx ) && ( DEBUG_prev[2] !== DEBUG_expected_prev[2] )
		&& ((DEBUG_expected_prev[2] !== last_DEBUG_exp[2]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DEBUG[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DEBUG_expected_prev);
		$display ("     Real value = %b", DEBUG_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_DEBUG_exp[2] = DEBUG_expected_prev[2];
	end
	if (
		( DEBUG_expected_prev[3] !== 1'bx ) && ( DEBUG_prev[3] !== DEBUG_expected_prev[3] )
		&& ((DEBUG_expected_prev[3] !== last_DEBUG_exp[3]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DEBUG[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DEBUG_expected_prev);
		$display ("     Real value = %b", DEBUG_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_DEBUG_exp[3] = DEBUG_expected_prev[3];
	end
	if (
		( IMMEDIATE_expected_prev[0] !== 1'bx ) && ( IMMEDIATE_prev[0] !== IMMEDIATE_expected_prev[0] )
		&& ((IMMEDIATE_expected_prev[0] !== last_IMMEDIATE_exp[0]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IMMEDIATE[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IMMEDIATE_expected_prev);
		$display ("     Real value = %b", IMMEDIATE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_IMMEDIATE_exp[0] = IMMEDIATE_expected_prev[0];
	end
	if (
		( IMMEDIATE_expected_prev[1] !== 1'bx ) && ( IMMEDIATE_prev[1] !== IMMEDIATE_expected_prev[1] )
		&& ((IMMEDIATE_expected_prev[1] !== last_IMMEDIATE_exp[1]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IMMEDIATE[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IMMEDIATE_expected_prev);
		$display ("     Real value = %b", IMMEDIATE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_IMMEDIATE_exp[1] = IMMEDIATE_expected_prev[1];
	end
	if (
		( IMMEDIATE_expected_prev[2] !== 1'bx ) && ( IMMEDIATE_prev[2] !== IMMEDIATE_expected_prev[2] )
		&& ((IMMEDIATE_expected_prev[2] !== last_IMMEDIATE_exp[2]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IMMEDIATE[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IMMEDIATE_expected_prev);
		$display ("     Real value = %b", IMMEDIATE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_IMMEDIATE_exp[2] = IMMEDIATE_expected_prev[2];
	end
	if (
		( IMMEDIATE_expected_prev[3] !== 1'bx ) && ( IMMEDIATE_prev[3] !== IMMEDIATE_expected_prev[3] )
		&& ((IMMEDIATE_expected_prev[3] !== last_IMMEDIATE_exp[3]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IMMEDIATE[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IMMEDIATE_expected_prev);
		$display ("     Real value = %b", IMMEDIATE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_IMMEDIATE_exp[3] = IMMEDIATE_expected_prev[3];
	end
	if (
		( IMMEDIATE_expected_prev[4] !== 1'bx ) && ( IMMEDIATE_prev[4] !== IMMEDIATE_expected_prev[4] )
		&& ((IMMEDIATE_expected_prev[4] !== last_IMMEDIATE_exp[4]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IMMEDIATE[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IMMEDIATE_expected_prev);
		$display ("     Real value = %b", IMMEDIATE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_IMMEDIATE_exp[4] = IMMEDIATE_expected_prev[4];
	end
	if (
		( IMMEDIATE_expected_prev[5] !== 1'bx ) && ( IMMEDIATE_prev[5] !== IMMEDIATE_expected_prev[5] )
		&& ((IMMEDIATE_expected_prev[5] !== last_IMMEDIATE_exp[5]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IMMEDIATE[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IMMEDIATE_expected_prev);
		$display ("     Real value = %b", IMMEDIATE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_IMMEDIATE_exp[5] = IMMEDIATE_expected_prev[5];
	end
	if (
		( IMMEDIATE_expected_prev[6] !== 1'bx ) && ( IMMEDIATE_prev[6] !== IMMEDIATE_expected_prev[6] )
		&& ((IMMEDIATE_expected_prev[6] !== last_IMMEDIATE_exp[6]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IMMEDIATE[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IMMEDIATE_expected_prev);
		$display ("     Real value = %b", IMMEDIATE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_IMMEDIATE_exp[6] = IMMEDIATE_expected_prev[6];
	end
	if (
		( IMMEDIATE_expected_prev[7] !== 1'bx ) && ( IMMEDIATE_prev[7] !== IMMEDIATE_expected_prev[7] )
		&& ((IMMEDIATE_expected_prev[7] !== last_IMMEDIATE_exp[7]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IMMEDIATE[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IMMEDIATE_expected_prev);
		$display ("     Real value = %b", IMMEDIATE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_IMMEDIATE_exp[7] = IMMEDIATE_expected_prev[7];
	end
	if (
		( PRODUCT_expected_prev[0] !== 1'bx ) && ( PRODUCT_prev[0] !== PRODUCT_expected_prev[0] )
		&& ((PRODUCT_expected_prev[0] !== last_PRODUCT_exp[0]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PRODUCT[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PRODUCT_expected_prev);
		$display ("     Real value = %b", PRODUCT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_PRODUCT_exp[0] = PRODUCT_expected_prev[0];
	end
	if (
		( PRODUCT_expected_prev[1] !== 1'bx ) && ( PRODUCT_prev[1] !== PRODUCT_expected_prev[1] )
		&& ((PRODUCT_expected_prev[1] !== last_PRODUCT_exp[1]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PRODUCT[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PRODUCT_expected_prev);
		$display ("     Real value = %b", PRODUCT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_PRODUCT_exp[1] = PRODUCT_expected_prev[1];
	end
	if (
		( PRODUCT_expected_prev[2] !== 1'bx ) && ( PRODUCT_prev[2] !== PRODUCT_expected_prev[2] )
		&& ((PRODUCT_expected_prev[2] !== last_PRODUCT_exp[2]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PRODUCT[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PRODUCT_expected_prev);
		$display ("     Real value = %b", PRODUCT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_PRODUCT_exp[2] = PRODUCT_expected_prev[2];
	end
	if (
		( PRODUCT_expected_prev[3] !== 1'bx ) && ( PRODUCT_prev[3] !== PRODUCT_expected_prev[3] )
		&& ((PRODUCT_expected_prev[3] !== last_PRODUCT_exp[3]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PRODUCT[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PRODUCT_expected_prev);
		$display ("     Real value = %b", PRODUCT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_PRODUCT_exp[3] = PRODUCT_expected_prev[3];
	end
	if (
		( PRODUCT_expected_prev[4] !== 1'bx ) && ( PRODUCT_prev[4] !== PRODUCT_expected_prev[4] )
		&& ((PRODUCT_expected_prev[4] !== last_PRODUCT_exp[4]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PRODUCT[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PRODUCT_expected_prev);
		$display ("     Real value = %b", PRODUCT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_PRODUCT_exp[4] = PRODUCT_expected_prev[4];
	end
	if (
		( PRODUCT_expected_prev[5] !== 1'bx ) && ( PRODUCT_prev[5] !== PRODUCT_expected_prev[5] )
		&& ((PRODUCT_expected_prev[5] !== last_PRODUCT_exp[5]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PRODUCT[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PRODUCT_expected_prev);
		$display ("     Real value = %b", PRODUCT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_PRODUCT_exp[5] = PRODUCT_expected_prev[5];
	end
	if (
		( PRODUCT_expected_prev[6] !== 1'bx ) && ( PRODUCT_prev[6] !== PRODUCT_expected_prev[6] )
		&& ((PRODUCT_expected_prev[6] !== last_PRODUCT_exp[6]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PRODUCT[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PRODUCT_expected_prev);
		$display ("     Real value = %b", PRODUCT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_PRODUCT_exp[6] = PRODUCT_expected_prev[6];
	end
	if (
		( PRODUCT_expected_prev[7] !== 1'bx ) && ( PRODUCT_prev[7] !== PRODUCT_expected_prev[7] )
		&& ((PRODUCT_expected_prev[7] !== last_PRODUCT_exp[7]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PRODUCT[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PRODUCT_expected_prev);
		$display ("     Real value = %b", PRODUCT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_PRODUCT_exp[7] = PRODUCT_expected_prev[7];
	end
	if (
		( PRODUCT_expected_prev[8] !== 1'bx ) && ( PRODUCT_prev[8] !== PRODUCT_expected_prev[8] )
		&& ((PRODUCT_expected_prev[8] !== last_PRODUCT_exp[8]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PRODUCT[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PRODUCT_expected_prev);
		$display ("     Real value = %b", PRODUCT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_PRODUCT_exp[8] = PRODUCT_expected_prev[8];
	end
	if (
		( PRODUCT_expected_prev[9] !== 1'bx ) && ( PRODUCT_prev[9] !== PRODUCT_expected_prev[9] )
		&& ((PRODUCT_expected_prev[9] !== last_PRODUCT_exp[9]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PRODUCT[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PRODUCT_expected_prev);
		$display ("     Real value = %b", PRODUCT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_PRODUCT_exp[9] = PRODUCT_expected_prev[9];
	end
	if (
		( PRODUCT_expected_prev[10] !== 1'bx ) && ( PRODUCT_prev[10] !== PRODUCT_expected_prev[10] )
		&& ((PRODUCT_expected_prev[10] !== last_PRODUCT_exp[10]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PRODUCT[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PRODUCT_expected_prev);
		$display ("     Real value = %b", PRODUCT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_PRODUCT_exp[10] = PRODUCT_expected_prev[10];
	end
	if (
		( PRODUCT_expected_prev[11] !== 1'bx ) && ( PRODUCT_prev[11] !== PRODUCT_expected_prev[11] )
		&& ((PRODUCT_expected_prev[11] !== last_PRODUCT_exp[11]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PRODUCT[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PRODUCT_expected_prev);
		$display ("     Real value = %b", PRODUCT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_PRODUCT_exp[11] = PRODUCT_expected_prev[11];
	end
	if (
		( PRODUCT_expected_prev[12] !== 1'bx ) && ( PRODUCT_prev[12] !== PRODUCT_expected_prev[12] )
		&& ((PRODUCT_expected_prev[12] !== last_PRODUCT_exp[12]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PRODUCT[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PRODUCT_expected_prev);
		$display ("     Real value = %b", PRODUCT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_PRODUCT_exp[12] = PRODUCT_expected_prev[12];
	end
	if (
		( PRODUCT_expected_prev[13] !== 1'bx ) && ( PRODUCT_prev[13] !== PRODUCT_expected_prev[13] )
		&& ((PRODUCT_expected_prev[13] !== last_PRODUCT_exp[13]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PRODUCT[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PRODUCT_expected_prev);
		$display ("     Real value = %b", PRODUCT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_PRODUCT_exp[13] = PRODUCT_expected_prev[13];
	end
	if (
		( PRODUCT_expected_prev[14] !== 1'bx ) && ( PRODUCT_prev[14] !== PRODUCT_expected_prev[14] )
		&& ((PRODUCT_expected_prev[14] !== last_PRODUCT_exp[14]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PRODUCT[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PRODUCT_expected_prev);
		$display ("     Real value = %b", PRODUCT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_PRODUCT_exp[14] = PRODUCT_expected_prev[14];
	end
	if (
		( PRODUCT_expected_prev[15] !== 1'bx ) && ( PRODUCT_prev[15] !== PRODUCT_expected_prev[15] )
		&& ((PRODUCT_expected_prev[15] !== last_PRODUCT_exp[15]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PRODUCT[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PRODUCT_expected_prev);
		$display ("     Real value = %b", PRODUCT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_PRODUCT_exp[15] = PRODUCT_expected_prev[15];
	end
	if (
		( Q_REG_expected_prev[0] !== 1'bx ) && ( Q_REG_prev[0] !== Q_REG_expected_prev[0] )
		&& ((Q_REG_expected_prev[0] !== last_Q_REG_exp[0]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q_REG[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q_REG_expected_prev);
		$display ("     Real value = %b", Q_REG_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_Q_REG_exp[0] = Q_REG_expected_prev[0];
	end
	if (
		( Q_REG_expected_prev[1] !== 1'bx ) && ( Q_REG_prev[1] !== Q_REG_expected_prev[1] )
		&& ((Q_REG_expected_prev[1] !== last_Q_REG_exp[1]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q_REG[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q_REG_expected_prev);
		$display ("     Real value = %b", Q_REG_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_Q_REG_exp[1] = Q_REG_expected_prev[1];
	end
	if (
		( Q_REG_expected_prev[2] !== 1'bx ) && ( Q_REG_prev[2] !== Q_REG_expected_prev[2] )
		&& ((Q_REG_expected_prev[2] !== last_Q_REG_exp[2]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q_REG[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q_REG_expected_prev);
		$display ("     Real value = %b", Q_REG_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_Q_REG_exp[2] = Q_REG_expected_prev[2];
	end
	if (
		( Q_REG_expected_prev[3] !== 1'bx ) && ( Q_REG_prev[3] !== Q_REG_expected_prev[3] )
		&& ((Q_REG_expected_prev[3] !== last_Q_REG_exp[3]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q_REG[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q_REG_expected_prev);
		$display ("     Real value = %b", Q_REG_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_Q_REG_exp[3] = Q_REG_expected_prev[3];
	end
	if (
		( Q_REG_expected_prev[4] !== 1'bx ) && ( Q_REG_prev[4] !== Q_REG_expected_prev[4] )
		&& ((Q_REG_expected_prev[4] !== last_Q_REG_exp[4]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q_REG[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q_REG_expected_prev);
		$display ("     Real value = %b", Q_REG_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_Q_REG_exp[4] = Q_REG_expected_prev[4];
	end
	if (
		( Q_REG_expected_prev[5] !== 1'bx ) && ( Q_REG_prev[5] !== Q_REG_expected_prev[5] )
		&& ((Q_REG_expected_prev[5] !== last_Q_REG_exp[5]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q_REG[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q_REG_expected_prev);
		$display ("     Real value = %b", Q_REG_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_Q_REG_exp[5] = Q_REG_expected_prev[5];
	end
	if (
		( Q_REG_expected_prev[6] !== 1'bx ) && ( Q_REG_prev[6] !== Q_REG_expected_prev[6] )
		&& ((Q_REG_expected_prev[6] !== last_Q_REG_exp[6]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q_REG[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q_REG_expected_prev);
		$display ("     Real value = %b", Q_REG_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_Q_REG_exp[6] = Q_REG_expected_prev[6];
	end
	if (
		( Q_REG_expected_prev[7] !== 1'bx ) && ( Q_REG_prev[7] !== Q_REG_expected_prev[7] )
		&& ((Q_REG_expected_prev[7] !== last_Q_REG_exp[7]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q_REG[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q_REG_expected_prev);
		$display ("     Real value = %b", Q_REG_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_Q_REG_exp[7] = Q_REG_expected_prev[7];
	end
	if (
		( RF_A_READ_PORT_expected_prev[0] !== 1'bx ) && ( RF_A_READ_PORT_prev[0] !== RF_A_READ_PORT_expected_prev[0] )
		&& ((RF_A_READ_PORT_expected_prev[0] !== last_RF_A_READ_PORT_exp[0]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RF_A_READ_PORT[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RF_A_READ_PORT_expected_prev);
		$display ("     Real value = %b", RF_A_READ_PORT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_RF_A_READ_PORT_exp[0] = RF_A_READ_PORT_expected_prev[0];
	end
	if (
		( RF_A_READ_PORT_expected_prev[1] !== 1'bx ) && ( RF_A_READ_PORT_prev[1] !== RF_A_READ_PORT_expected_prev[1] )
		&& ((RF_A_READ_PORT_expected_prev[1] !== last_RF_A_READ_PORT_exp[1]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RF_A_READ_PORT[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RF_A_READ_PORT_expected_prev);
		$display ("     Real value = %b", RF_A_READ_PORT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_RF_A_READ_PORT_exp[1] = RF_A_READ_PORT_expected_prev[1];
	end
	if (
		( RF_A_READ_PORT_expected_prev[2] !== 1'bx ) && ( RF_A_READ_PORT_prev[2] !== RF_A_READ_PORT_expected_prev[2] )
		&& ((RF_A_READ_PORT_expected_prev[2] !== last_RF_A_READ_PORT_exp[2]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RF_A_READ_PORT[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RF_A_READ_PORT_expected_prev);
		$display ("     Real value = %b", RF_A_READ_PORT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_RF_A_READ_PORT_exp[2] = RF_A_READ_PORT_expected_prev[2];
	end
	if (
		( RF_A_READ_PORT_expected_prev[3] !== 1'bx ) && ( RF_A_READ_PORT_prev[3] !== RF_A_READ_PORT_expected_prev[3] )
		&& ((RF_A_READ_PORT_expected_prev[3] !== last_RF_A_READ_PORT_exp[3]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RF_A_READ_PORT[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RF_A_READ_PORT_expected_prev);
		$display ("     Real value = %b", RF_A_READ_PORT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_RF_A_READ_PORT_exp[3] = RF_A_READ_PORT_expected_prev[3];
	end
	if (
		( RF_A_READ_PORT_expected_prev[4] !== 1'bx ) && ( RF_A_READ_PORT_prev[4] !== RF_A_READ_PORT_expected_prev[4] )
		&& ((RF_A_READ_PORT_expected_prev[4] !== last_RF_A_READ_PORT_exp[4]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RF_A_READ_PORT[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RF_A_READ_PORT_expected_prev);
		$display ("     Real value = %b", RF_A_READ_PORT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_RF_A_READ_PORT_exp[4] = RF_A_READ_PORT_expected_prev[4];
	end
	if (
		( RF_A_READ_PORT_expected_prev[5] !== 1'bx ) && ( RF_A_READ_PORT_prev[5] !== RF_A_READ_PORT_expected_prev[5] )
		&& ((RF_A_READ_PORT_expected_prev[5] !== last_RF_A_READ_PORT_exp[5]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RF_A_READ_PORT[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RF_A_READ_PORT_expected_prev);
		$display ("     Real value = %b", RF_A_READ_PORT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_RF_A_READ_PORT_exp[5] = RF_A_READ_PORT_expected_prev[5];
	end
	if (
		( RF_A_READ_PORT_expected_prev[6] !== 1'bx ) && ( RF_A_READ_PORT_prev[6] !== RF_A_READ_PORT_expected_prev[6] )
		&& ((RF_A_READ_PORT_expected_prev[6] !== last_RF_A_READ_PORT_exp[6]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RF_A_READ_PORT[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RF_A_READ_PORT_expected_prev);
		$display ("     Real value = %b", RF_A_READ_PORT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_RF_A_READ_PORT_exp[6] = RF_A_READ_PORT_expected_prev[6];
	end
	if (
		( RF_A_READ_PORT_expected_prev[7] !== 1'bx ) && ( RF_A_READ_PORT_prev[7] !== RF_A_READ_PORT_expected_prev[7] )
		&& ((RF_A_READ_PORT_expected_prev[7] !== last_RF_A_READ_PORT_exp[7]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RF_A_READ_PORT[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RF_A_READ_PORT_expected_prev);
		$display ("     Real value = %b", RF_A_READ_PORT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_RF_A_READ_PORT_exp[7] = RF_A_READ_PORT_expected_prev[7];
	end
	if (
		( RF_B_READ_PORT_expected_prev[0] !== 1'bx ) && ( RF_B_READ_PORT_prev[0] !== RF_B_READ_PORT_expected_prev[0] )
		&& ((RF_B_READ_PORT_expected_prev[0] !== last_RF_B_READ_PORT_exp[0]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RF_B_READ_PORT[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RF_B_READ_PORT_expected_prev);
		$display ("     Real value = %b", RF_B_READ_PORT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_RF_B_READ_PORT_exp[0] = RF_B_READ_PORT_expected_prev[0];
	end
	if (
		( RF_B_READ_PORT_expected_prev[1] !== 1'bx ) && ( RF_B_READ_PORT_prev[1] !== RF_B_READ_PORT_expected_prev[1] )
		&& ((RF_B_READ_PORT_expected_prev[1] !== last_RF_B_READ_PORT_exp[1]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RF_B_READ_PORT[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RF_B_READ_PORT_expected_prev);
		$display ("     Real value = %b", RF_B_READ_PORT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_RF_B_READ_PORT_exp[1] = RF_B_READ_PORT_expected_prev[1];
	end
	if (
		( RF_B_READ_PORT_expected_prev[2] !== 1'bx ) && ( RF_B_READ_PORT_prev[2] !== RF_B_READ_PORT_expected_prev[2] )
		&& ((RF_B_READ_PORT_expected_prev[2] !== last_RF_B_READ_PORT_exp[2]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RF_B_READ_PORT[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RF_B_READ_PORT_expected_prev);
		$display ("     Real value = %b", RF_B_READ_PORT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_RF_B_READ_PORT_exp[2] = RF_B_READ_PORT_expected_prev[2];
	end
	if (
		( RF_B_READ_PORT_expected_prev[3] !== 1'bx ) && ( RF_B_READ_PORT_prev[3] !== RF_B_READ_PORT_expected_prev[3] )
		&& ((RF_B_READ_PORT_expected_prev[3] !== last_RF_B_READ_PORT_exp[3]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RF_B_READ_PORT[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RF_B_READ_PORT_expected_prev);
		$display ("     Real value = %b", RF_B_READ_PORT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_RF_B_READ_PORT_exp[3] = RF_B_READ_PORT_expected_prev[3];
	end
	if (
		( RF_B_READ_PORT_expected_prev[4] !== 1'bx ) && ( RF_B_READ_PORT_prev[4] !== RF_B_READ_PORT_expected_prev[4] )
		&& ((RF_B_READ_PORT_expected_prev[4] !== last_RF_B_READ_PORT_exp[4]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RF_B_READ_PORT[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RF_B_READ_PORT_expected_prev);
		$display ("     Real value = %b", RF_B_READ_PORT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_RF_B_READ_PORT_exp[4] = RF_B_READ_PORT_expected_prev[4];
	end
	if (
		( RF_B_READ_PORT_expected_prev[5] !== 1'bx ) && ( RF_B_READ_PORT_prev[5] !== RF_B_READ_PORT_expected_prev[5] )
		&& ((RF_B_READ_PORT_expected_prev[5] !== last_RF_B_READ_PORT_exp[5]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RF_B_READ_PORT[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RF_B_READ_PORT_expected_prev);
		$display ("     Real value = %b", RF_B_READ_PORT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_RF_B_READ_PORT_exp[5] = RF_B_READ_PORT_expected_prev[5];
	end
	if (
		( RF_B_READ_PORT_expected_prev[6] !== 1'bx ) && ( RF_B_READ_PORT_prev[6] !== RF_B_READ_PORT_expected_prev[6] )
		&& ((RF_B_READ_PORT_expected_prev[6] !== last_RF_B_READ_PORT_exp[6]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RF_B_READ_PORT[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RF_B_READ_PORT_expected_prev);
		$display ("     Real value = %b", RF_B_READ_PORT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_RF_B_READ_PORT_exp[6] = RF_B_READ_PORT_expected_prev[6];
	end
	if (
		( RF_B_READ_PORT_expected_prev[7] !== 1'bx ) && ( RF_B_READ_PORT_prev[7] !== RF_B_READ_PORT_expected_prev[7] )
		&& ((RF_B_READ_PORT_expected_prev[7] !== last_RF_B_READ_PORT_exp[7]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RF_B_READ_PORT[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RF_B_READ_PORT_expected_prev);
		$display ("     Real value = %b", RF_B_READ_PORT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_RF_B_READ_PORT_exp[7] = RF_B_READ_PORT_expected_prev[7];
	end
	if (
		( RF_W_ADDR_expected_prev[0] !== 1'bx ) && ( RF_W_ADDR_prev[0] !== RF_W_ADDR_expected_prev[0] )
		&& ((RF_W_ADDR_expected_prev[0] !== last_RF_W_ADDR_exp[0]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RF_W_ADDR[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RF_W_ADDR_expected_prev);
		$display ("     Real value = %b", RF_W_ADDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_RF_W_ADDR_exp[0] = RF_W_ADDR_expected_prev[0];
	end
	if (
		( RF_W_ADDR_expected_prev[1] !== 1'bx ) && ( RF_W_ADDR_prev[1] !== RF_W_ADDR_expected_prev[1] )
		&& ((RF_W_ADDR_expected_prev[1] !== last_RF_W_ADDR_exp[1]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RF_W_ADDR[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RF_W_ADDR_expected_prev);
		$display ("     Real value = %b", RF_W_ADDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_RF_W_ADDR_exp[1] = RF_W_ADDR_expected_prev[1];
	end
	if (
		( RF_W_ADDR_expected_prev[2] !== 1'bx ) && ( RF_W_ADDR_prev[2] !== RF_W_ADDR_expected_prev[2] )
		&& ((RF_W_ADDR_expected_prev[2] !== last_RF_W_ADDR_exp[2]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RF_W_ADDR[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RF_W_ADDR_expected_prev);
		$display ("     Real value = %b", RF_W_ADDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_RF_W_ADDR_exp[2] = RF_W_ADDR_expected_prev[2];
	end
	if (
		( RF_W_DATA_expected_prev[0] !== 1'bx ) && ( RF_W_DATA_prev[0] !== RF_W_DATA_expected_prev[0] )
		&& ((RF_W_DATA_expected_prev[0] !== last_RF_W_DATA_exp[0]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RF_W_DATA[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RF_W_DATA_expected_prev);
		$display ("     Real value = %b", RF_W_DATA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_RF_W_DATA_exp[0] = RF_W_DATA_expected_prev[0];
	end
	if (
		( RF_W_DATA_expected_prev[1] !== 1'bx ) && ( RF_W_DATA_prev[1] !== RF_W_DATA_expected_prev[1] )
		&& ((RF_W_DATA_expected_prev[1] !== last_RF_W_DATA_exp[1]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RF_W_DATA[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RF_W_DATA_expected_prev);
		$display ("     Real value = %b", RF_W_DATA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_RF_W_DATA_exp[1] = RF_W_DATA_expected_prev[1];
	end
	if (
		( RF_W_DATA_expected_prev[2] !== 1'bx ) && ( RF_W_DATA_prev[2] !== RF_W_DATA_expected_prev[2] )
		&& ((RF_W_DATA_expected_prev[2] !== last_RF_W_DATA_exp[2]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RF_W_DATA[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RF_W_DATA_expected_prev);
		$display ("     Real value = %b", RF_W_DATA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_RF_W_DATA_exp[2] = RF_W_DATA_expected_prev[2];
	end
	if (
		( RF_W_DATA_expected_prev[3] !== 1'bx ) && ( RF_W_DATA_prev[3] !== RF_W_DATA_expected_prev[3] )
		&& ((RF_W_DATA_expected_prev[3] !== last_RF_W_DATA_exp[3]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RF_W_DATA[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RF_W_DATA_expected_prev);
		$display ("     Real value = %b", RF_W_DATA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_RF_W_DATA_exp[3] = RF_W_DATA_expected_prev[3];
	end
	if (
		( RF_W_DATA_expected_prev[4] !== 1'bx ) && ( RF_W_DATA_prev[4] !== RF_W_DATA_expected_prev[4] )
		&& ((RF_W_DATA_expected_prev[4] !== last_RF_W_DATA_exp[4]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RF_W_DATA[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RF_W_DATA_expected_prev);
		$display ("     Real value = %b", RF_W_DATA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_RF_W_DATA_exp[4] = RF_W_DATA_expected_prev[4];
	end
	if (
		( RF_W_DATA_expected_prev[5] !== 1'bx ) && ( RF_W_DATA_prev[5] !== RF_W_DATA_expected_prev[5] )
		&& ((RF_W_DATA_expected_prev[5] !== last_RF_W_DATA_exp[5]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RF_W_DATA[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RF_W_DATA_expected_prev);
		$display ("     Real value = %b", RF_W_DATA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_RF_W_DATA_exp[5] = RF_W_DATA_expected_prev[5];
	end
	if (
		( RF_W_DATA_expected_prev[6] !== 1'bx ) && ( RF_W_DATA_prev[6] !== RF_W_DATA_expected_prev[6] )
		&& ((RF_W_DATA_expected_prev[6] !== last_RF_W_DATA_exp[6]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RF_W_DATA[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RF_W_DATA_expected_prev);
		$display ("     Real value = %b", RF_W_DATA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_RF_W_DATA_exp[6] = RF_W_DATA_expected_prev[6];
	end
	if (
		( RF_W_DATA_expected_prev[7] !== 1'bx ) && ( RF_W_DATA_prev[7] !== RF_W_DATA_expected_prev[7] )
		&& ((RF_W_DATA_expected_prev[7] !== last_RF_W_DATA_exp[7]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RF_W_DATA[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RF_W_DATA_expected_prev);
		$display ("     Real value = %b", RF_W_DATA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_RF_W_DATA_exp[7] = RF_W_DATA_expected_prev[7];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#350000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module CPU_vlg_vec_tst();
// constants                                           
// general purpose registers
reg AUTO;
reg CLK;
reg RUN;
// wires                                               
wire [7:0] A_REG;
wire [7:0] ALU_OUT;
wire [15:0] CURRENT_INSTR;
wire [9:0] DATA_MEM_ADDR_IN;
wire [15:0] DATA_MEM_DATA_IN;
wire [15:0] DATA_MEM_DATA_OUT;
wire [3:0] DEBUG;
wire [7:0] IMMEDIATE;
wire [9:0] INSTR_MEM_ADDRESS;
wire [15:0] PRODUCT;
wire [7:0] Q_REG;
wire [7:0] RF_A_READ_PORT;
wire [7:0] RF_B_READ_PORT;
wire [2:0] RF_W_ADDR;
wire [7:0] RF_W_DATA;

wire sampler;                             

// assign statements (if any)                          
CPU i1 (
// port map - connection between master ports and signals/registers   
	.A_REG(A_REG),
	.ALU_OUT(ALU_OUT),
	.AUTO(AUTO),
	.CLK(CLK),
	.CURRENT_INSTR(CURRENT_INSTR),
	.DATA_MEM_ADDR_IN(DATA_MEM_ADDR_IN),
	.DATA_MEM_DATA_IN(DATA_MEM_DATA_IN),
	.DATA_MEM_DATA_OUT(DATA_MEM_DATA_OUT),
	.DEBUG(DEBUG),
	.IMMEDIATE(IMMEDIATE),
	.INSTR_MEM_ADDRESS(INSTR_MEM_ADDRESS),
	.PRODUCT(PRODUCT),
	.Q_REG(Q_REG),
	.RF_A_READ_PORT(RF_A_READ_PORT),
	.RF_B_READ_PORT(RF_B_READ_PORT),
	.RF_W_ADDR(RF_W_ADDR),
	.RF_W_DATA(RF_W_DATA),
	.RUN(RUN)
);

// CLK
always
begin
	CLK = 1'b0;
	CLK = #5000 1'b1;
	#5000;
end 

// RUN
initial
begin
	RUN = 1'b1;
end 

// AUTO
initial
begin
	AUTO = 1'b0;
end 

CPU_vlg_sample_tst tb_sample (
	.AUTO(AUTO),
	.CLK(CLK),
	.RUN(RUN),
	.sampler_tx(sampler)
);

CPU_vlg_check_tst tb_out(
	.A_REG(A_REG),
	.ALU_OUT(ALU_OUT),
	.CURRENT_INSTR(CURRENT_INSTR),
	.DATA_MEM_ADDR_IN(DATA_MEM_ADDR_IN),
	.DATA_MEM_DATA_IN(DATA_MEM_DATA_IN),
	.DATA_MEM_DATA_OUT(DATA_MEM_DATA_OUT),
	.DEBUG(DEBUG),
	.IMMEDIATE(IMMEDIATE),
	.INSTR_MEM_ADDRESS(INSTR_MEM_ADDRESS),
	.PRODUCT(PRODUCT),
	.Q_REG(Q_REG),
	.RF_A_READ_PORT(RF_A_READ_PORT),
	.RF_B_READ_PORT(RF_B_READ_PORT),
	.RF_W_ADDR(RF_W_ADDR),
	.RF_W_DATA(RF_W_DATA),
	.sampler_rx(sampler)
);
endmodule

