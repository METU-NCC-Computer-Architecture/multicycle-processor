// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "06/12/2020 12:54:04"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    divider
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module divider_vlg_sample_tst(
	clk,
	dividend,
	divider,
	start,
	sampler_tx
);
input  clk;
input [7:0] dividend;
input [7:0] divider;
input  start;
output sampler_tx;

reg sample;
time current_time;
always @(clk or dividend or divider or start)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module divider_vlg_check_tst (
	diff,
	dividend_copy,
	divider_copy,
	quotient,
	ready,
	remainder,
	sign_flag,
	sampler_rx
);
input [15:0] diff;
input [15:0] dividend_copy;
input [15:0] divider_copy;
input [7:0] quotient;
input  ready;
input [7:0] remainder;
input  sign_flag;
input sampler_rx;

reg [15:0] diff_expected;
reg [15:0] dividend_copy_expected;
reg [15:0] divider_copy_expected;
reg [7:0] quotient_expected;
reg  ready_expected;
reg [7:0] remainder_expected;
reg  sign_flag_expected;

reg [15:0] diff_prev;
reg [15:0] dividend_copy_prev;
reg [15:0] divider_copy_prev;
reg [7:0] quotient_prev;
reg  ready_prev;
reg [7:0] remainder_prev;
reg  sign_flag_prev;

reg [15:0] diff_expected_prev;
reg [15:0] dividend_copy_expected_prev;
reg [15:0] divider_copy_expected_prev;
reg [7:0] quotient_expected_prev;
reg  ready_expected_prev;
reg [7:0] remainder_expected_prev;
reg  sign_flag_expected_prev;

reg [15:0] last_diff_exp;
reg [15:0] last_dividend_copy_exp;
reg [15:0] last_divider_copy_exp;
reg [7:0] last_quotient_exp;
reg  last_ready_exp;
reg [7:0] last_remainder_exp;
reg  last_sign_flag_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:7] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 7'b1;
end

// update real /o prevs

always @(trigger)
begin
	diff_prev = diff;
	dividend_copy_prev = dividend_copy;
	divider_copy_prev = divider_copy;
	quotient_prev = quotient;
	ready_prev = ready;
	remainder_prev = remainder;
	sign_flag_prev = sign_flag;
end

// update expected /o prevs

always @(trigger)
begin
	diff_expected_prev = diff_expected;
	dividend_copy_expected_prev = dividend_copy_expected;
	divider_copy_expected_prev = divider_copy_expected;
	quotient_expected_prev = quotient_expected;
	ready_expected_prev = ready_expected;
	remainder_expected_prev = remainder_expected;
	sign_flag_expected_prev = sign_flag_expected;
end



// expected ready
initial
begin
	ready_expected = 1'bX;
end 
// expected quotient[ 7 ]
initial
begin
	quotient_expected[7] = 1'bX;
end 
// expected quotient[ 6 ]
initial
begin
	quotient_expected[6] = 1'bX;
end 
// expected quotient[ 5 ]
initial
begin
	quotient_expected[5] = 1'bX;
end 
// expected quotient[ 4 ]
initial
begin
	quotient_expected[4] = 1'bX;
end 
// expected quotient[ 3 ]
initial
begin
	quotient_expected[3] = 1'bX;
end 
// expected quotient[ 2 ]
initial
begin
	quotient_expected[2] = 1'bX;
end 
// expected quotient[ 1 ]
initial
begin
	quotient_expected[1] = 1'bX;
end 
// expected quotient[ 0 ]
initial
begin
	quotient_expected[0] = 1'bX;
end 
// expected remainder[ 7 ]
initial
begin
	remainder_expected[7] = 1'bX;
end 
// expected remainder[ 6 ]
initial
begin
	remainder_expected[6] = 1'bX;
end 
// expected remainder[ 5 ]
initial
begin
	remainder_expected[5] = 1'bX;
end 
// expected remainder[ 4 ]
initial
begin
	remainder_expected[4] = 1'bX;
end 
// expected remainder[ 3 ]
initial
begin
	remainder_expected[3] = 1'bX;
end 
// expected remainder[ 2 ]
initial
begin
	remainder_expected[2] = 1'bX;
end 
// expected remainder[ 1 ]
initial
begin
	remainder_expected[1] = 1'bX;
end 
// expected remainder[ 0 ]
initial
begin
	remainder_expected[0] = 1'bX;
end 
// expected diff[ 15 ]
initial
begin
	diff_expected[15] = 1'bX;
end 
// expected diff[ 14 ]
initial
begin
	diff_expected[14] = 1'bX;
end 
// expected diff[ 13 ]
initial
begin
	diff_expected[13] = 1'bX;
end 
// expected diff[ 12 ]
initial
begin
	diff_expected[12] = 1'bX;
end 
// expected diff[ 11 ]
initial
begin
	diff_expected[11] = 1'bX;
end 
// expected diff[ 10 ]
initial
begin
	diff_expected[10] = 1'bX;
end 
// expected diff[ 9 ]
initial
begin
	diff_expected[9] = 1'bX;
end 
// expected diff[ 8 ]
initial
begin
	diff_expected[8] = 1'bX;
end 
// expected diff[ 7 ]
initial
begin
	diff_expected[7] = 1'bX;
end 
// expected diff[ 6 ]
initial
begin
	diff_expected[6] = 1'bX;
end 
// expected diff[ 5 ]
initial
begin
	diff_expected[5] = 1'bX;
end 
// expected diff[ 4 ]
initial
begin
	diff_expected[4] = 1'bX;
end 
// expected diff[ 3 ]
initial
begin
	diff_expected[3] = 1'bX;
end 
// expected diff[ 2 ]
initial
begin
	diff_expected[2] = 1'bX;
end 
// expected diff[ 1 ]
initial
begin
	diff_expected[1] = 1'bX;
end 
// expected diff[ 0 ]
initial
begin
	diff_expected[0] = 1'bX;
end 
// expected dividend_copy[ 15 ]
initial
begin
	dividend_copy_expected[15] = 1'bX;
end 
// expected dividend_copy[ 14 ]
initial
begin
	dividend_copy_expected[14] = 1'bX;
end 
// expected dividend_copy[ 13 ]
initial
begin
	dividend_copy_expected[13] = 1'bX;
end 
// expected dividend_copy[ 12 ]
initial
begin
	dividend_copy_expected[12] = 1'bX;
end 
// expected dividend_copy[ 11 ]
initial
begin
	dividend_copy_expected[11] = 1'bX;
end 
// expected dividend_copy[ 10 ]
initial
begin
	dividend_copy_expected[10] = 1'bX;
end 
// expected dividend_copy[ 9 ]
initial
begin
	dividend_copy_expected[9] = 1'bX;
end 
// expected dividend_copy[ 8 ]
initial
begin
	dividend_copy_expected[8] = 1'bX;
end 
// expected dividend_copy[ 7 ]
initial
begin
	dividend_copy_expected[7] = 1'bX;
end 
// expected dividend_copy[ 6 ]
initial
begin
	dividend_copy_expected[6] = 1'bX;
end 
// expected dividend_copy[ 5 ]
initial
begin
	dividend_copy_expected[5] = 1'bX;
end 
// expected dividend_copy[ 4 ]
initial
begin
	dividend_copy_expected[4] = 1'bX;
end 
// expected dividend_copy[ 3 ]
initial
begin
	dividend_copy_expected[3] = 1'bX;
end 
// expected dividend_copy[ 2 ]
initial
begin
	dividend_copy_expected[2] = 1'bX;
end 
// expected dividend_copy[ 1 ]
initial
begin
	dividend_copy_expected[1] = 1'bX;
end 
// expected dividend_copy[ 0 ]
initial
begin
	dividend_copy_expected[0] = 1'bX;
end 
// expected divider_copy[ 15 ]
initial
begin
	divider_copy_expected[15] = 1'bX;
end 
// expected divider_copy[ 14 ]
initial
begin
	divider_copy_expected[14] = 1'bX;
end 
// expected divider_copy[ 13 ]
initial
begin
	divider_copy_expected[13] = 1'bX;
end 
// expected divider_copy[ 12 ]
initial
begin
	divider_copy_expected[12] = 1'bX;
end 
// expected divider_copy[ 11 ]
initial
begin
	divider_copy_expected[11] = 1'bX;
end 
// expected divider_copy[ 10 ]
initial
begin
	divider_copy_expected[10] = 1'bX;
end 
// expected divider_copy[ 9 ]
initial
begin
	divider_copy_expected[9] = 1'bX;
end 
// expected divider_copy[ 8 ]
initial
begin
	divider_copy_expected[8] = 1'bX;
end 
// expected divider_copy[ 7 ]
initial
begin
	divider_copy_expected[7] = 1'bX;
end 
// expected divider_copy[ 6 ]
initial
begin
	divider_copy_expected[6] = 1'bX;
end 
// expected divider_copy[ 5 ]
initial
begin
	divider_copy_expected[5] = 1'bX;
end 
// expected divider_copy[ 4 ]
initial
begin
	divider_copy_expected[4] = 1'bX;
end 
// expected divider_copy[ 3 ]
initial
begin
	divider_copy_expected[3] = 1'bX;
end 
// expected divider_copy[ 2 ]
initial
begin
	divider_copy_expected[2] = 1'bX;
end 
// expected divider_copy[ 1 ]
initial
begin
	divider_copy_expected[1] = 1'bX;
end 
// expected divider_copy[ 0 ]
initial
begin
	divider_copy_expected[0] = 1'bX;
end 

// expected sign_flag
initial
begin
	sign_flag_expected = 1'bX;
end 
// generate trigger
always @(diff_expected or diff or dividend_copy_expected or dividend_copy or divider_copy_expected or divider_copy or quotient_expected or quotient or ready_expected or ready or remainder_expected or remainder or sign_flag_expected or sign_flag)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected diff = %b | expected dividend_copy = %b | expected divider_copy = %b | expected quotient = %b | expected ready = %b | expected remainder = %b | expected sign_flag = %b | ",diff_expected_prev,dividend_copy_expected_prev,divider_copy_expected_prev,quotient_expected_prev,ready_expected_prev,remainder_expected_prev,sign_flag_expected_prev);
	$display("| real diff = %b | real dividend_copy = %b | real divider_copy = %b | real quotient = %b | real ready = %b | real remainder = %b | real sign_flag = %b | ",diff_prev,dividend_copy_prev,divider_copy_prev,quotient_prev,ready_prev,remainder_prev,sign_flag_prev);
`endif
	if (
		( diff_expected_prev[0] !== 1'bx ) && ( diff_prev[0] !== diff_expected_prev[0] )
		&& ((diff_expected_prev[0] !== last_diff_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port diff[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", diff_expected_prev);
		$display ("     Real value = %b", diff_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_diff_exp[0] = diff_expected_prev[0];
	end
	if (
		( diff_expected_prev[1] !== 1'bx ) && ( diff_prev[1] !== diff_expected_prev[1] )
		&& ((diff_expected_prev[1] !== last_diff_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port diff[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", diff_expected_prev);
		$display ("     Real value = %b", diff_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_diff_exp[1] = diff_expected_prev[1];
	end
	if (
		( diff_expected_prev[2] !== 1'bx ) && ( diff_prev[2] !== diff_expected_prev[2] )
		&& ((diff_expected_prev[2] !== last_diff_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port diff[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", diff_expected_prev);
		$display ("     Real value = %b", diff_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_diff_exp[2] = diff_expected_prev[2];
	end
	if (
		( diff_expected_prev[3] !== 1'bx ) && ( diff_prev[3] !== diff_expected_prev[3] )
		&& ((diff_expected_prev[3] !== last_diff_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port diff[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", diff_expected_prev);
		$display ("     Real value = %b", diff_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_diff_exp[3] = diff_expected_prev[3];
	end
	if (
		( diff_expected_prev[4] !== 1'bx ) && ( diff_prev[4] !== diff_expected_prev[4] )
		&& ((diff_expected_prev[4] !== last_diff_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port diff[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", diff_expected_prev);
		$display ("     Real value = %b", diff_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_diff_exp[4] = diff_expected_prev[4];
	end
	if (
		( diff_expected_prev[5] !== 1'bx ) && ( diff_prev[5] !== diff_expected_prev[5] )
		&& ((diff_expected_prev[5] !== last_diff_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port diff[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", diff_expected_prev);
		$display ("     Real value = %b", diff_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_diff_exp[5] = diff_expected_prev[5];
	end
	if (
		( diff_expected_prev[6] !== 1'bx ) && ( diff_prev[6] !== diff_expected_prev[6] )
		&& ((diff_expected_prev[6] !== last_diff_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port diff[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", diff_expected_prev);
		$display ("     Real value = %b", diff_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_diff_exp[6] = diff_expected_prev[6];
	end
	if (
		( diff_expected_prev[7] !== 1'bx ) && ( diff_prev[7] !== diff_expected_prev[7] )
		&& ((diff_expected_prev[7] !== last_diff_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port diff[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", diff_expected_prev);
		$display ("     Real value = %b", diff_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_diff_exp[7] = diff_expected_prev[7];
	end
	if (
		( diff_expected_prev[8] !== 1'bx ) && ( diff_prev[8] !== diff_expected_prev[8] )
		&& ((diff_expected_prev[8] !== last_diff_exp[8]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port diff[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", diff_expected_prev);
		$display ("     Real value = %b", diff_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_diff_exp[8] = diff_expected_prev[8];
	end
	if (
		( diff_expected_prev[9] !== 1'bx ) && ( diff_prev[9] !== diff_expected_prev[9] )
		&& ((diff_expected_prev[9] !== last_diff_exp[9]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port diff[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", diff_expected_prev);
		$display ("     Real value = %b", diff_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_diff_exp[9] = diff_expected_prev[9];
	end
	if (
		( diff_expected_prev[10] !== 1'bx ) && ( diff_prev[10] !== diff_expected_prev[10] )
		&& ((diff_expected_prev[10] !== last_diff_exp[10]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port diff[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", diff_expected_prev);
		$display ("     Real value = %b", diff_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_diff_exp[10] = diff_expected_prev[10];
	end
	if (
		( diff_expected_prev[11] !== 1'bx ) && ( diff_prev[11] !== diff_expected_prev[11] )
		&& ((diff_expected_prev[11] !== last_diff_exp[11]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port diff[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", diff_expected_prev);
		$display ("     Real value = %b", diff_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_diff_exp[11] = diff_expected_prev[11];
	end
	if (
		( diff_expected_prev[12] !== 1'bx ) && ( diff_prev[12] !== diff_expected_prev[12] )
		&& ((diff_expected_prev[12] !== last_diff_exp[12]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port diff[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", diff_expected_prev);
		$display ("     Real value = %b", diff_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_diff_exp[12] = diff_expected_prev[12];
	end
	if (
		( diff_expected_prev[13] !== 1'bx ) && ( diff_prev[13] !== diff_expected_prev[13] )
		&& ((diff_expected_prev[13] !== last_diff_exp[13]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port diff[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", diff_expected_prev);
		$display ("     Real value = %b", diff_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_diff_exp[13] = diff_expected_prev[13];
	end
	if (
		( diff_expected_prev[14] !== 1'bx ) && ( diff_prev[14] !== diff_expected_prev[14] )
		&& ((diff_expected_prev[14] !== last_diff_exp[14]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port diff[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", diff_expected_prev);
		$display ("     Real value = %b", diff_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_diff_exp[14] = diff_expected_prev[14];
	end
	if (
		( diff_expected_prev[15] !== 1'bx ) && ( diff_prev[15] !== diff_expected_prev[15] )
		&& ((diff_expected_prev[15] !== last_diff_exp[15]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port diff[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", diff_expected_prev);
		$display ("     Real value = %b", diff_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_diff_exp[15] = diff_expected_prev[15];
	end
	if (
		( dividend_copy_expected_prev[0] !== 1'bx ) && ( dividend_copy_prev[0] !== dividend_copy_expected_prev[0] )
		&& ((dividend_copy_expected_prev[0] !== last_dividend_copy_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dividend_copy[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dividend_copy_expected_prev);
		$display ("     Real value = %b", dividend_copy_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_dividend_copy_exp[0] = dividend_copy_expected_prev[0];
	end
	if (
		( dividend_copy_expected_prev[1] !== 1'bx ) && ( dividend_copy_prev[1] !== dividend_copy_expected_prev[1] )
		&& ((dividend_copy_expected_prev[1] !== last_dividend_copy_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dividend_copy[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dividend_copy_expected_prev);
		$display ("     Real value = %b", dividend_copy_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_dividend_copy_exp[1] = dividend_copy_expected_prev[1];
	end
	if (
		( dividend_copy_expected_prev[2] !== 1'bx ) && ( dividend_copy_prev[2] !== dividend_copy_expected_prev[2] )
		&& ((dividend_copy_expected_prev[2] !== last_dividend_copy_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dividend_copy[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dividend_copy_expected_prev);
		$display ("     Real value = %b", dividend_copy_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_dividend_copy_exp[2] = dividend_copy_expected_prev[2];
	end
	if (
		( dividend_copy_expected_prev[3] !== 1'bx ) && ( dividend_copy_prev[3] !== dividend_copy_expected_prev[3] )
		&& ((dividend_copy_expected_prev[3] !== last_dividend_copy_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dividend_copy[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dividend_copy_expected_prev);
		$display ("     Real value = %b", dividend_copy_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_dividend_copy_exp[3] = dividend_copy_expected_prev[3];
	end
	if (
		( dividend_copy_expected_prev[4] !== 1'bx ) && ( dividend_copy_prev[4] !== dividend_copy_expected_prev[4] )
		&& ((dividend_copy_expected_prev[4] !== last_dividend_copy_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dividend_copy[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dividend_copy_expected_prev);
		$display ("     Real value = %b", dividend_copy_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_dividend_copy_exp[4] = dividend_copy_expected_prev[4];
	end
	if (
		( dividend_copy_expected_prev[5] !== 1'bx ) && ( dividend_copy_prev[5] !== dividend_copy_expected_prev[5] )
		&& ((dividend_copy_expected_prev[5] !== last_dividend_copy_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dividend_copy[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dividend_copy_expected_prev);
		$display ("     Real value = %b", dividend_copy_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_dividend_copy_exp[5] = dividend_copy_expected_prev[5];
	end
	if (
		( dividend_copy_expected_prev[6] !== 1'bx ) && ( dividend_copy_prev[6] !== dividend_copy_expected_prev[6] )
		&& ((dividend_copy_expected_prev[6] !== last_dividend_copy_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dividend_copy[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dividend_copy_expected_prev);
		$display ("     Real value = %b", dividend_copy_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_dividend_copy_exp[6] = dividend_copy_expected_prev[6];
	end
	if (
		( dividend_copy_expected_prev[7] !== 1'bx ) && ( dividend_copy_prev[7] !== dividend_copy_expected_prev[7] )
		&& ((dividend_copy_expected_prev[7] !== last_dividend_copy_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dividend_copy[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dividend_copy_expected_prev);
		$display ("     Real value = %b", dividend_copy_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_dividend_copy_exp[7] = dividend_copy_expected_prev[7];
	end
	if (
		( dividend_copy_expected_prev[8] !== 1'bx ) && ( dividend_copy_prev[8] !== dividend_copy_expected_prev[8] )
		&& ((dividend_copy_expected_prev[8] !== last_dividend_copy_exp[8]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dividend_copy[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dividend_copy_expected_prev);
		$display ("     Real value = %b", dividend_copy_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_dividend_copy_exp[8] = dividend_copy_expected_prev[8];
	end
	if (
		( dividend_copy_expected_prev[9] !== 1'bx ) && ( dividend_copy_prev[9] !== dividend_copy_expected_prev[9] )
		&& ((dividend_copy_expected_prev[9] !== last_dividend_copy_exp[9]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dividend_copy[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dividend_copy_expected_prev);
		$display ("     Real value = %b", dividend_copy_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_dividend_copy_exp[9] = dividend_copy_expected_prev[9];
	end
	if (
		( dividend_copy_expected_prev[10] !== 1'bx ) && ( dividend_copy_prev[10] !== dividend_copy_expected_prev[10] )
		&& ((dividend_copy_expected_prev[10] !== last_dividend_copy_exp[10]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dividend_copy[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dividend_copy_expected_prev);
		$display ("     Real value = %b", dividend_copy_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_dividend_copy_exp[10] = dividend_copy_expected_prev[10];
	end
	if (
		( dividend_copy_expected_prev[11] !== 1'bx ) && ( dividend_copy_prev[11] !== dividend_copy_expected_prev[11] )
		&& ((dividend_copy_expected_prev[11] !== last_dividend_copy_exp[11]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dividend_copy[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dividend_copy_expected_prev);
		$display ("     Real value = %b", dividend_copy_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_dividend_copy_exp[11] = dividend_copy_expected_prev[11];
	end
	if (
		( dividend_copy_expected_prev[12] !== 1'bx ) && ( dividend_copy_prev[12] !== dividend_copy_expected_prev[12] )
		&& ((dividend_copy_expected_prev[12] !== last_dividend_copy_exp[12]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dividend_copy[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dividend_copy_expected_prev);
		$display ("     Real value = %b", dividend_copy_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_dividend_copy_exp[12] = dividend_copy_expected_prev[12];
	end
	if (
		( dividend_copy_expected_prev[13] !== 1'bx ) && ( dividend_copy_prev[13] !== dividend_copy_expected_prev[13] )
		&& ((dividend_copy_expected_prev[13] !== last_dividend_copy_exp[13]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dividend_copy[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dividend_copy_expected_prev);
		$display ("     Real value = %b", dividend_copy_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_dividend_copy_exp[13] = dividend_copy_expected_prev[13];
	end
	if (
		( dividend_copy_expected_prev[14] !== 1'bx ) && ( dividend_copy_prev[14] !== dividend_copy_expected_prev[14] )
		&& ((dividend_copy_expected_prev[14] !== last_dividend_copy_exp[14]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dividend_copy[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dividend_copy_expected_prev);
		$display ("     Real value = %b", dividend_copy_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_dividend_copy_exp[14] = dividend_copy_expected_prev[14];
	end
	if (
		( dividend_copy_expected_prev[15] !== 1'bx ) && ( dividend_copy_prev[15] !== dividend_copy_expected_prev[15] )
		&& ((dividend_copy_expected_prev[15] !== last_dividend_copy_exp[15]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dividend_copy[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dividend_copy_expected_prev);
		$display ("     Real value = %b", dividend_copy_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_dividend_copy_exp[15] = dividend_copy_expected_prev[15];
	end
	if (
		( divider_copy_expected_prev[0] !== 1'bx ) && ( divider_copy_prev[0] !== divider_copy_expected_prev[0] )
		&& ((divider_copy_expected_prev[0] !== last_divider_copy_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port divider_copy[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", divider_copy_expected_prev);
		$display ("     Real value = %b", divider_copy_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_divider_copy_exp[0] = divider_copy_expected_prev[0];
	end
	if (
		( divider_copy_expected_prev[1] !== 1'bx ) && ( divider_copy_prev[1] !== divider_copy_expected_prev[1] )
		&& ((divider_copy_expected_prev[1] !== last_divider_copy_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port divider_copy[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", divider_copy_expected_prev);
		$display ("     Real value = %b", divider_copy_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_divider_copy_exp[1] = divider_copy_expected_prev[1];
	end
	if (
		( divider_copy_expected_prev[2] !== 1'bx ) && ( divider_copy_prev[2] !== divider_copy_expected_prev[2] )
		&& ((divider_copy_expected_prev[2] !== last_divider_copy_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port divider_copy[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", divider_copy_expected_prev);
		$display ("     Real value = %b", divider_copy_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_divider_copy_exp[2] = divider_copy_expected_prev[2];
	end
	if (
		( divider_copy_expected_prev[3] !== 1'bx ) && ( divider_copy_prev[3] !== divider_copy_expected_prev[3] )
		&& ((divider_copy_expected_prev[3] !== last_divider_copy_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port divider_copy[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", divider_copy_expected_prev);
		$display ("     Real value = %b", divider_copy_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_divider_copy_exp[3] = divider_copy_expected_prev[3];
	end
	if (
		( divider_copy_expected_prev[4] !== 1'bx ) && ( divider_copy_prev[4] !== divider_copy_expected_prev[4] )
		&& ((divider_copy_expected_prev[4] !== last_divider_copy_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port divider_copy[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", divider_copy_expected_prev);
		$display ("     Real value = %b", divider_copy_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_divider_copy_exp[4] = divider_copy_expected_prev[4];
	end
	if (
		( divider_copy_expected_prev[5] !== 1'bx ) && ( divider_copy_prev[5] !== divider_copy_expected_prev[5] )
		&& ((divider_copy_expected_prev[5] !== last_divider_copy_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port divider_copy[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", divider_copy_expected_prev);
		$display ("     Real value = %b", divider_copy_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_divider_copy_exp[5] = divider_copy_expected_prev[5];
	end
	if (
		( divider_copy_expected_prev[6] !== 1'bx ) && ( divider_copy_prev[6] !== divider_copy_expected_prev[6] )
		&& ((divider_copy_expected_prev[6] !== last_divider_copy_exp[6]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port divider_copy[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", divider_copy_expected_prev);
		$display ("     Real value = %b", divider_copy_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_divider_copy_exp[6] = divider_copy_expected_prev[6];
	end
	if (
		( divider_copy_expected_prev[7] !== 1'bx ) && ( divider_copy_prev[7] !== divider_copy_expected_prev[7] )
		&& ((divider_copy_expected_prev[7] !== last_divider_copy_exp[7]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port divider_copy[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", divider_copy_expected_prev);
		$display ("     Real value = %b", divider_copy_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_divider_copy_exp[7] = divider_copy_expected_prev[7];
	end
	if (
		( divider_copy_expected_prev[8] !== 1'bx ) && ( divider_copy_prev[8] !== divider_copy_expected_prev[8] )
		&& ((divider_copy_expected_prev[8] !== last_divider_copy_exp[8]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port divider_copy[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", divider_copy_expected_prev);
		$display ("     Real value = %b", divider_copy_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_divider_copy_exp[8] = divider_copy_expected_prev[8];
	end
	if (
		( divider_copy_expected_prev[9] !== 1'bx ) && ( divider_copy_prev[9] !== divider_copy_expected_prev[9] )
		&& ((divider_copy_expected_prev[9] !== last_divider_copy_exp[9]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port divider_copy[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", divider_copy_expected_prev);
		$display ("     Real value = %b", divider_copy_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_divider_copy_exp[9] = divider_copy_expected_prev[9];
	end
	if (
		( divider_copy_expected_prev[10] !== 1'bx ) && ( divider_copy_prev[10] !== divider_copy_expected_prev[10] )
		&& ((divider_copy_expected_prev[10] !== last_divider_copy_exp[10]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port divider_copy[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", divider_copy_expected_prev);
		$display ("     Real value = %b", divider_copy_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_divider_copy_exp[10] = divider_copy_expected_prev[10];
	end
	if (
		( divider_copy_expected_prev[11] !== 1'bx ) && ( divider_copy_prev[11] !== divider_copy_expected_prev[11] )
		&& ((divider_copy_expected_prev[11] !== last_divider_copy_exp[11]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port divider_copy[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", divider_copy_expected_prev);
		$display ("     Real value = %b", divider_copy_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_divider_copy_exp[11] = divider_copy_expected_prev[11];
	end
	if (
		( divider_copy_expected_prev[12] !== 1'bx ) && ( divider_copy_prev[12] !== divider_copy_expected_prev[12] )
		&& ((divider_copy_expected_prev[12] !== last_divider_copy_exp[12]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port divider_copy[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", divider_copy_expected_prev);
		$display ("     Real value = %b", divider_copy_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_divider_copy_exp[12] = divider_copy_expected_prev[12];
	end
	if (
		( divider_copy_expected_prev[13] !== 1'bx ) && ( divider_copy_prev[13] !== divider_copy_expected_prev[13] )
		&& ((divider_copy_expected_prev[13] !== last_divider_copy_exp[13]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port divider_copy[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", divider_copy_expected_prev);
		$display ("     Real value = %b", divider_copy_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_divider_copy_exp[13] = divider_copy_expected_prev[13];
	end
	if (
		( divider_copy_expected_prev[14] !== 1'bx ) && ( divider_copy_prev[14] !== divider_copy_expected_prev[14] )
		&& ((divider_copy_expected_prev[14] !== last_divider_copy_exp[14]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port divider_copy[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", divider_copy_expected_prev);
		$display ("     Real value = %b", divider_copy_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_divider_copy_exp[14] = divider_copy_expected_prev[14];
	end
	if (
		( divider_copy_expected_prev[15] !== 1'bx ) && ( divider_copy_prev[15] !== divider_copy_expected_prev[15] )
		&& ((divider_copy_expected_prev[15] !== last_divider_copy_exp[15]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port divider_copy[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", divider_copy_expected_prev);
		$display ("     Real value = %b", divider_copy_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_divider_copy_exp[15] = divider_copy_expected_prev[15];
	end
	if (
		( quotient_expected_prev[0] !== 1'bx ) && ( quotient_prev[0] !== quotient_expected_prev[0] )
		&& ((quotient_expected_prev[0] !== last_quotient_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port quotient[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", quotient_expected_prev);
		$display ("     Real value = %b", quotient_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_quotient_exp[0] = quotient_expected_prev[0];
	end
	if (
		( quotient_expected_prev[1] !== 1'bx ) && ( quotient_prev[1] !== quotient_expected_prev[1] )
		&& ((quotient_expected_prev[1] !== last_quotient_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port quotient[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", quotient_expected_prev);
		$display ("     Real value = %b", quotient_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_quotient_exp[1] = quotient_expected_prev[1];
	end
	if (
		( quotient_expected_prev[2] !== 1'bx ) && ( quotient_prev[2] !== quotient_expected_prev[2] )
		&& ((quotient_expected_prev[2] !== last_quotient_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port quotient[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", quotient_expected_prev);
		$display ("     Real value = %b", quotient_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_quotient_exp[2] = quotient_expected_prev[2];
	end
	if (
		( quotient_expected_prev[3] !== 1'bx ) && ( quotient_prev[3] !== quotient_expected_prev[3] )
		&& ((quotient_expected_prev[3] !== last_quotient_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port quotient[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", quotient_expected_prev);
		$display ("     Real value = %b", quotient_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_quotient_exp[3] = quotient_expected_prev[3];
	end
	if (
		( quotient_expected_prev[4] !== 1'bx ) && ( quotient_prev[4] !== quotient_expected_prev[4] )
		&& ((quotient_expected_prev[4] !== last_quotient_exp[4]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port quotient[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", quotient_expected_prev);
		$display ("     Real value = %b", quotient_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_quotient_exp[4] = quotient_expected_prev[4];
	end
	if (
		( quotient_expected_prev[5] !== 1'bx ) && ( quotient_prev[5] !== quotient_expected_prev[5] )
		&& ((quotient_expected_prev[5] !== last_quotient_exp[5]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port quotient[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", quotient_expected_prev);
		$display ("     Real value = %b", quotient_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_quotient_exp[5] = quotient_expected_prev[5];
	end
	if (
		( quotient_expected_prev[6] !== 1'bx ) && ( quotient_prev[6] !== quotient_expected_prev[6] )
		&& ((quotient_expected_prev[6] !== last_quotient_exp[6]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port quotient[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", quotient_expected_prev);
		$display ("     Real value = %b", quotient_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_quotient_exp[6] = quotient_expected_prev[6];
	end
	if (
		( quotient_expected_prev[7] !== 1'bx ) && ( quotient_prev[7] !== quotient_expected_prev[7] )
		&& ((quotient_expected_prev[7] !== last_quotient_exp[7]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port quotient[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", quotient_expected_prev);
		$display ("     Real value = %b", quotient_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_quotient_exp[7] = quotient_expected_prev[7];
	end
	if (
		( ready_expected_prev !== 1'bx ) && ( ready_prev !== ready_expected_prev )
		&& ((ready_expected_prev !== last_ready_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ready :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ready_expected_prev);
		$display ("     Real value = %b", ready_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_ready_exp = ready_expected_prev;
	end
	if (
		( remainder_expected_prev[0] !== 1'bx ) && ( remainder_prev[0] !== remainder_expected_prev[0] )
		&& ((remainder_expected_prev[0] !== last_remainder_exp[0]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port remainder[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", remainder_expected_prev);
		$display ("     Real value = %b", remainder_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_remainder_exp[0] = remainder_expected_prev[0];
	end
	if (
		( remainder_expected_prev[1] !== 1'bx ) && ( remainder_prev[1] !== remainder_expected_prev[1] )
		&& ((remainder_expected_prev[1] !== last_remainder_exp[1]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port remainder[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", remainder_expected_prev);
		$display ("     Real value = %b", remainder_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_remainder_exp[1] = remainder_expected_prev[1];
	end
	if (
		( remainder_expected_prev[2] !== 1'bx ) && ( remainder_prev[2] !== remainder_expected_prev[2] )
		&& ((remainder_expected_prev[2] !== last_remainder_exp[2]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port remainder[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", remainder_expected_prev);
		$display ("     Real value = %b", remainder_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_remainder_exp[2] = remainder_expected_prev[2];
	end
	if (
		( remainder_expected_prev[3] !== 1'bx ) && ( remainder_prev[3] !== remainder_expected_prev[3] )
		&& ((remainder_expected_prev[3] !== last_remainder_exp[3]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port remainder[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", remainder_expected_prev);
		$display ("     Real value = %b", remainder_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_remainder_exp[3] = remainder_expected_prev[3];
	end
	if (
		( remainder_expected_prev[4] !== 1'bx ) && ( remainder_prev[4] !== remainder_expected_prev[4] )
		&& ((remainder_expected_prev[4] !== last_remainder_exp[4]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port remainder[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", remainder_expected_prev);
		$display ("     Real value = %b", remainder_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_remainder_exp[4] = remainder_expected_prev[4];
	end
	if (
		( remainder_expected_prev[5] !== 1'bx ) && ( remainder_prev[5] !== remainder_expected_prev[5] )
		&& ((remainder_expected_prev[5] !== last_remainder_exp[5]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port remainder[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", remainder_expected_prev);
		$display ("     Real value = %b", remainder_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_remainder_exp[5] = remainder_expected_prev[5];
	end
	if (
		( remainder_expected_prev[6] !== 1'bx ) && ( remainder_prev[6] !== remainder_expected_prev[6] )
		&& ((remainder_expected_prev[6] !== last_remainder_exp[6]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port remainder[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", remainder_expected_prev);
		$display ("     Real value = %b", remainder_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_remainder_exp[6] = remainder_expected_prev[6];
	end
	if (
		( remainder_expected_prev[7] !== 1'bx ) && ( remainder_prev[7] !== remainder_expected_prev[7] )
		&& ((remainder_expected_prev[7] !== last_remainder_exp[7]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port remainder[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", remainder_expected_prev);
		$display ("     Real value = %b", remainder_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_remainder_exp[7] = remainder_expected_prev[7];
	end
	if (
		( sign_flag_expected_prev !== 1'bx ) && ( sign_flag_prev !== sign_flag_expected_prev )
		&& ((sign_flag_expected_prev !== last_sign_flag_exp) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sign_flag :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sign_flag_expected_prev);
		$display ("     Real value = %b", sign_flag_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_sign_flag_exp = sign_flag_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module divider_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg [7:0] dividend;
reg [7:0] divider;
reg start;
// wires                                               
wire [15:0] diff;
wire [15:0] dividend_copy;
wire [15:0] divider_copy;
wire [7:0] quotient;
wire ready;
wire [7:0] remainder;
wire sign_flag;

wire sampler;                             

// assign statements (if any)                          
divider i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.diff(diff),
	.dividend(dividend),
	.dividend_copy(dividend_copy),
	.divider(divider),
	.divider_copy(divider_copy),
	.quotient(quotient),
	.ready(ready),
	.remainder(remainder),
	.sign_flag(sign_flag),
	.start(start)
);

// clk
always
begin
	clk = 1'b0;
	clk = #25000 1'b1;
	#25000;
end 

// start
initial
begin
	start = 1'b1;
end 
// dividend[ 7 ]
initial
begin
	dividend[7] = 1'b1;
end 
// dividend[ 6 ]
initial
begin
	dividend[6] = 1'b0;
end 
// dividend[ 5 ]
initial
begin
	dividend[5] = 1'b0;
end 
// dividend[ 4 ]
initial
begin
	dividend[4] = 1'b1;
end 
// dividend[ 3 ]
initial
begin
	dividend[3] = 1'b1;
end 
// dividend[ 2 ]
initial
begin
	dividend[2] = 1'b1;
end 
// dividend[ 1 ]
initial
begin
	dividend[1] = 1'b0;
end 
// dividend[ 0 ]
initial
begin
	dividend[0] = 1'b0;
end 
// divider[ 7 ]
initial
begin
	divider[7] = 1'b1;
end 
// divider[ 6 ]
initial
begin
	divider[6] = 1'b1;
end 
// divider[ 5 ]
initial
begin
	divider[5] = 1'b1;
end 
// divider[ 4 ]
initial
begin
	divider[4] = 1'b1;
end 
// divider[ 3 ]
initial
begin
	divider[3] = 1'b1;
end 
// divider[ 2 ]
initial
begin
	divider[2] = 1'b0;
end 
// divider[ 1 ]
initial
begin
	divider[1] = 1'b0;
end 
// divider[ 0 ]
initial
begin
	divider[0] = 1'b1;
end 

divider_vlg_sample_tst tb_sample (
	.clk(clk),
	.dividend(dividend),
	.divider(divider),
	.start(start),
	.sampler_tx(sampler)
);

divider_vlg_check_tst tb_out(
	.diff(diff),
	.dividend_copy(dividend_copy),
	.divider_copy(divider_copy),
	.quotient(quotient),
	.ready(ready),
	.remainder(remainder),
	.sign_flag(sign_flag),
	.sampler_rx(sampler)
);
endmodule

