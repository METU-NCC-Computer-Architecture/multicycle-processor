// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "04/20/2020 08:44:05"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    Datapath
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Datapath_vlg_sample_tst(
	A_SEL,
	B_SEL,
	Cin,
	CLK,
	D_SEL,
	DATA_MEM_OUT,
	DATA_MEM_SEL,
	INS_TYPE_MUX_SEL,
	INST_MEM_OUT,
	LDA,
	LDQ,
	MULT_EN,
	MULT_SEL,
	OAP,
	PC_EN,
	PC_MUX_SEL,
	PLUS1_SEL,
	RF_EN,
	RST,
	SL,
	SR,
	SR_SEL,
	UL_SEL,
	WB_SEL,
	sampler_tx
);
input [1:0] A_SEL;
input [1:0] B_SEL;
input  Cin;
input  CLK;
input [1:0] D_SEL;
input [15:0] DATA_MEM_OUT;
input  DATA_MEM_SEL;
input  INS_TYPE_MUX_SEL;
input [15:0] INST_MEM_OUT;
input  LDA;
input  LDQ;
input  MULT_EN;
input  MULT_SEL;
input [2:0] OAP;
input  PC_EN;
input [1:0] PC_MUX_SEL;
input  PLUS1_SEL;
input  RF_EN;
input  RST;
input  SL;
input  SR;
input  SR_SEL;
input  UL_SEL;
input  WB_SEL;
output sampler_tx;

reg sample;
time current_time;
always @(A_SEL or B_SEL or Cin or CLK or D_SEL or DATA_MEM_OUT or DATA_MEM_SEL or INS_TYPE_MUX_SEL or INST_MEM_OUT or LDA or LDQ or MULT_EN or MULT_SEL or OAP or PC_EN or PC_MUX_SEL or PLUS1_SEL or RF_EN or RST or SL or SR or SR_SEL or UL_SEL or WB_SEL)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module Datapath_vlg_check_tst (
	A,
	ALUOUT,
	CO,
	DATA_MEM_ADDR_IN,
	DATA_MEM_DATA_IN,
	N,
	OPCODE,
	OUT_Q,
	OVF,
	Product,
	Qm1,
	READ_DATA_A,
	READ_DATA_B,
	RF_OUT_A,
	RF_OUT_B,
	RF_R_ADDR_B,
	RF_W_ADDR,
	RF_W_DATA,
	Z,
	sampler_rx
);
input [7:0] A;
input [7:0] ALUOUT;
input  CO;
input [9:0] DATA_MEM_ADDR_IN;
input [15:0] DATA_MEM_DATA_IN;
input  N;
input [3:0] OPCODE;
input [7:0] OUT_Q;
input  OVF;
input [15:0] Product;
input  Qm1;
input [7:0] READ_DATA_A;
input [7:0] READ_DATA_B;
input [7:0] RF_OUT_A;
input [7:0] RF_OUT_B;
input [2:0] RF_R_ADDR_B;
input [2:0] RF_W_ADDR;
input [7:0] RF_W_DATA;
input  Z;
input sampler_rx;

reg [7:0] A_expected;
reg [7:0] ALUOUT_expected;
reg  CO_expected;
reg [9:0] DATA_MEM_ADDR_IN_expected;
reg [15:0] DATA_MEM_DATA_IN_expected;
reg  N_expected;
reg [3:0] OPCODE_expected;
reg [7:0] OUT_Q_expected;
reg  OVF_expected;
reg [15:0] Product_expected;
reg  Qm1_expected;
reg [7:0] READ_DATA_A_expected;
reg [7:0] READ_DATA_B_expected;
reg [7:0] RF_OUT_A_expected;
reg [7:0] RF_OUT_B_expected;
reg [2:0] RF_R_ADDR_B_expected;
reg [2:0] RF_W_ADDR_expected;
reg [7:0] RF_W_DATA_expected;
reg  Z_expected;

reg [7:0] A_prev;
reg [7:0] ALUOUT_prev;
reg  CO_prev;
reg [9:0] DATA_MEM_ADDR_IN_prev;
reg [15:0] DATA_MEM_DATA_IN_prev;
reg  N_prev;
reg [3:0] OPCODE_prev;
reg [7:0] OUT_Q_prev;
reg  OVF_prev;
reg [15:0] Product_prev;
reg  Qm1_prev;
reg [7:0] READ_DATA_A_prev;
reg [7:0] READ_DATA_B_prev;
reg [7:0] RF_OUT_A_prev;
reg [7:0] RF_OUT_B_prev;
reg [2:0] RF_R_ADDR_B_prev;
reg [2:0] RF_W_ADDR_prev;
reg [7:0] RF_W_DATA_prev;
reg  Z_prev;

reg [7:0] A_expected_prev;
reg [7:0] ALUOUT_expected_prev;
reg  CO_expected_prev;
reg [9:0] DATA_MEM_ADDR_IN_expected_prev;
reg [15:0] DATA_MEM_DATA_IN_expected_prev;
reg  N_expected_prev;
reg [3:0] OPCODE_expected_prev;
reg [7:0] OUT_Q_expected_prev;
reg  OVF_expected_prev;
reg [7:0] RF_OUT_A_expected_prev;
reg [7:0] RF_OUT_B_expected_prev;
reg [2:0] RF_R_ADDR_B_expected_prev;
reg [2:0] RF_W_ADDR_expected_prev;
reg [7:0] RF_W_DATA_expected_prev;
reg  Z_expected_prev;

reg [7:0] last_A_exp;
reg [7:0] last_ALUOUT_exp;
reg  last_CO_exp;
reg [9:0] last_DATA_MEM_ADDR_IN_exp;
reg [15:0] last_DATA_MEM_DATA_IN_exp;
reg  last_N_exp;
reg [3:0] last_OPCODE_exp;
reg [7:0] last_OUT_Q_exp;
reg  last_OVF_exp;
reg [7:0] last_RF_OUT_A_exp;
reg [7:0] last_RF_OUT_B_exp;
reg [2:0] last_RF_R_ADDR_B_exp;
reg [2:0] last_RF_W_ADDR_exp;
reg [7:0] last_RF_W_DATA_exp;
reg  last_Z_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:19] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 19'b1;
end

// update real /o prevs

always @(trigger)
begin
	A_prev = A;
	ALUOUT_prev = ALUOUT;
	CO_prev = CO;
	DATA_MEM_ADDR_IN_prev = DATA_MEM_ADDR_IN;
	DATA_MEM_DATA_IN_prev = DATA_MEM_DATA_IN;
	N_prev = N;
	OPCODE_prev = OPCODE;
	OUT_Q_prev = OUT_Q;
	OVF_prev = OVF;
	Product_prev = Product;
	Qm1_prev = Qm1;
	READ_DATA_A_prev = READ_DATA_A;
	READ_DATA_B_prev = READ_DATA_B;
	RF_OUT_A_prev = RF_OUT_A;
	RF_OUT_B_prev = RF_OUT_B;
	RF_R_ADDR_B_prev = RF_R_ADDR_B;
	RF_W_ADDR_prev = RF_W_ADDR;
	RF_W_DATA_prev = RF_W_DATA;
	Z_prev = Z;
end

// update expected /o prevs

always @(trigger)
begin
	A_expected_prev = A_expected;
	ALUOUT_expected_prev = ALUOUT_expected;
	CO_expected_prev = CO_expected;
	DATA_MEM_ADDR_IN_expected_prev = DATA_MEM_ADDR_IN_expected;
	DATA_MEM_DATA_IN_expected_prev = DATA_MEM_DATA_IN_expected;
	N_expected_prev = N_expected;
	OPCODE_expected_prev = OPCODE_expected;
	OUT_Q_expected_prev = OUT_Q_expected;
	OVF_expected_prev = OVF_expected;
	RF_OUT_A_expected_prev = RF_OUT_A_expected;
	RF_OUT_B_expected_prev = RF_OUT_B_expected;
	RF_R_ADDR_B_expected_prev = RF_R_ADDR_B_expected;
	RF_W_ADDR_expected_prev = RF_W_ADDR_expected;
	RF_W_DATA_expected_prev = RF_W_DATA_expected;
	Z_expected_prev = Z_expected;
end


// expected OPCODE[ 3 ]
initial
begin
	OPCODE_expected[3] = 1'bX;
end 
// expected OPCODE[ 2 ]
initial
begin
	OPCODE_expected[2] = 1'bX;
end 
// expected OPCODE[ 1 ]
initial
begin
	OPCODE_expected[1] = 1'bX;
end 
// expected OPCODE[ 0 ]
initial
begin
	OPCODE_expected[0] = 1'bX;
end 
// expected DATA_MEM_ADDR_IN[ 9 ]
initial
begin
	DATA_MEM_ADDR_IN_expected[9] = 1'bX;
end 
// expected DATA_MEM_ADDR_IN[ 8 ]
initial
begin
	DATA_MEM_ADDR_IN_expected[8] = 1'bX;
end 
// expected DATA_MEM_ADDR_IN[ 7 ]
initial
begin
	DATA_MEM_ADDR_IN_expected[7] = 1'bX;
end 
// expected DATA_MEM_ADDR_IN[ 6 ]
initial
begin
	DATA_MEM_ADDR_IN_expected[6] = 1'bX;
end 
// expected DATA_MEM_ADDR_IN[ 5 ]
initial
begin
	DATA_MEM_ADDR_IN_expected[5] = 1'bX;
end 
// expected DATA_MEM_ADDR_IN[ 4 ]
initial
begin
	DATA_MEM_ADDR_IN_expected[4] = 1'bX;
end 
// expected DATA_MEM_ADDR_IN[ 3 ]
initial
begin
	DATA_MEM_ADDR_IN_expected[3] = 1'bX;
end 
// expected DATA_MEM_ADDR_IN[ 2 ]
initial
begin
	DATA_MEM_ADDR_IN_expected[2] = 1'bX;
end 
// expected DATA_MEM_ADDR_IN[ 1 ]
initial
begin
	DATA_MEM_ADDR_IN_expected[1] = 1'bX;
end 
// expected DATA_MEM_ADDR_IN[ 0 ]
initial
begin
	DATA_MEM_ADDR_IN_expected[0] = 1'bX;
end 
// expected DATA_MEM_DATA_IN[ 15 ]
initial
begin
	DATA_MEM_DATA_IN_expected[15] = 1'bX;
end 
// expected DATA_MEM_DATA_IN[ 14 ]
initial
begin
	DATA_MEM_DATA_IN_expected[14] = 1'bX;
end 
// expected DATA_MEM_DATA_IN[ 13 ]
initial
begin
	DATA_MEM_DATA_IN_expected[13] = 1'bX;
end 
// expected DATA_MEM_DATA_IN[ 12 ]
initial
begin
	DATA_MEM_DATA_IN_expected[12] = 1'bX;
end 
// expected DATA_MEM_DATA_IN[ 11 ]
initial
begin
	DATA_MEM_DATA_IN_expected[11] = 1'bX;
end 
// expected DATA_MEM_DATA_IN[ 10 ]
initial
begin
	DATA_MEM_DATA_IN_expected[10] = 1'bX;
end 
// expected DATA_MEM_DATA_IN[ 9 ]
initial
begin
	DATA_MEM_DATA_IN_expected[9] = 1'bX;
end 
// expected DATA_MEM_DATA_IN[ 8 ]
initial
begin
	DATA_MEM_DATA_IN_expected[8] = 1'bX;
end 
// expected DATA_MEM_DATA_IN[ 7 ]
initial
begin
	DATA_MEM_DATA_IN_expected[7] = 1'bX;
end 
// expected DATA_MEM_DATA_IN[ 6 ]
initial
begin
	DATA_MEM_DATA_IN_expected[6] = 1'bX;
end 
// expected DATA_MEM_DATA_IN[ 5 ]
initial
begin
	DATA_MEM_DATA_IN_expected[5] = 1'bX;
end 
// expected DATA_MEM_DATA_IN[ 4 ]
initial
begin
	DATA_MEM_DATA_IN_expected[4] = 1'bX;
end 
// expected DATA_MEM_DATA_IN[ 3 ]
initial
begin
	DATA_MEM_DATA_IN_expected[3] = 1'bX;
end 
// expected DATA_MEM_DATA_IN[ 2 ]
initial
begin
	DATA_MEM_DATA_IN_expected[2] = 1'bX;
end 
// expected DATA_MEM_DATA_IN[ 1 ]
initial
begin
	DATA_MEM_DATA_IN_expected[1] = 1'bX;
end 
// expected DATA_MEM_DATA_IN[ 0 ]
initial
begin
	DATA_MEM_DATA_IN_expected[0] = 1'bX;
end 
// expected RF_W_ADDR[ 2 ]
initial
begin
	RF_W_ADDR_expected[2] = 1'bX;
end 
// expected RF_W_ADDR[ 1 ]
initial
begin
	RF_W_ADDR_expected[1] = 1'bX;
end 
// expected RF_W_ADDR[ 0 ]
initial
begin
	RF_W_ADDR_expected[0] = 1'bX;
end 
// expected RF_W_DATA[ 7 ]
initial
begin
	RF_W_DATA_expected[7] = 1'bX;
end 
// expected RF_W_DATA[ 6 ]
initial
begin
	RF_W_DATA_expected[6] = 1'bX;
end 
// expected RF_W_DATA[ 5 ]
initial
begin
	RF_W_DATA_expected[5] = 1'bX;
end 
// expected RF_W_DATA[ 4 ]
initial
begin
	RF_W_DATA_expected[4] = 1'bX;
end 
// expected RF_W_DATA[ 3 ]
initial
begin
	RF_W_DATA_expected[3] = 1'bX;
end 
// expected RF_W_DATA[ 2 ]
initial
begin
	RF_W_DATA_expected[2] = 1'bX;
end 
// expected RF_W_DATA[ 1 ]
initial
begin
	RF_W_DATA_expected[1] = 1'bX;
end 
// expected RF_W_DATA[ 0 ]
initial
begin
	RF_W_DATA_expected[0] = 1'bX;
end 
// expected OUT_Q[ 7 ]
initial
begin
	OUT_Q_expected[7] = 1'bX;
end 
// expected OUT_Q[ 6 ]
initial
begin
	OUT_Q_expected[6] = 1'bX;
end 
// expected OUT_Q[ 5 ]
initial
begin
	OUT_Q_expected[5] = 1'bX;
end 
// expected OUT_Q[ 4 ]
initial
begin
	OUT_Q_expected[4] = 1'bX;
end 
// expected OUT_Q[ 3 ]
initial
begin
	OUT_Q_expected[3] = 1'bX;
end 
// expected OUT_Q[ 2 ]
initial
begin
	OUT_Q_expected[2] = 1'bX;
end 
// expected OUT_Q[ 1 ]
initial
begin
	OUT_Q_expected[1] = 1'bX;
end 
// expected OUT_Q[ 0 ]
initial
begin
	OUT_Q_expected[0] = 1'bX;
end 
// expected ALUOUT[ 7 ]
initial
begin
	ALUOUT_expected[7] = 1'bX;
end 
// expected ALUOUT[ 6 ]
initial
begin
	ALUOUT_expected[6] = 1'bX;
end 
// expected ALUOUT[ 5 ]
initial
begin
	ALUOUT_expected[5] = 1'bX;
end 
// expected ALUOUT[ 4 ]
initial
begin
	ALUOUT_expected[4] = 1'bX;
end 
// expected ALUOUT[ 3 ]
initial
begin
	ALUOUT_expected[3] = 1'bX;
end 
// expected ALUOUT[ 2 ]
initial
begin
	ALUOUT_expected[2] = 1'bX;
end 
// expected ALUOUT[ 1 ]
initial
begin
	ALUOUT_expected[1] = 1'bX;
end 
// expected ALUOUT[ 0 ]
initial
begin
	ALUOUT_expected[0] = 1'bX;
end 
// expected RF_OUT_A[ 7 ]
initial
begin
	RF_OUT_A_expected[7] = 1'bX;
end 
// expected RF_OUT_A[ 6 ]
initial
begin
	RF_OUT_A_expected[6] = 1'bX;
end 
// expected RF_OUT_A[ 5 ]
initial
begin
	RF_OUT_A_expected[5] = 1'bX;
end 
// expected RF_OUT_A[ 4 ]
initial
begin
	RF_OUT_A_expected[4] = 1'bX;
end 
// expected RF_OUT_A[ 3 ]
initial
begin
	RF_OUT_A_expected[3] = 1'bX;
end 
// expected RF_OUT_A[ 2 ]
initial
begin
	RF_OUT_A_expected[2] = 1'bX;
end 
// expected RF_OUT_A[ 1 ]
initial
begin
	RF_OUT_A_expected[1] = 1'bX;
end 
// expected RF_OUT_A[ 0 ]
initial
begin
	RF_OUT_A_expected[0] = 1'bX;
end 
// expected RF_OUT_B[ 7 ]
initial
begin
	RF_OUT_B_expected[7] = 1'bX;
end 
// expected RF_OUT_B[ 6 ]
initial
begin
	RF_OUT_B_expected[6] = 1'bX;
end 
// expected RF_OUT_B[ 5 ]
initial
begin
	RF_OUT_B_expected[5] = 1'bX;
end 
// expected RF_OUT_B[ 4 ]
initial
begin
	RF_OUT_B_expected[4] = 1'bX;
end 
// expected RF_OUT_B[ 3 ]
initial
begin
	RF_OUT_B_expected[3] = 1'bX;
end 
// expected RF_OUT_B[ 2 ]
initial
begin
	RF_OUT_B_expected[2] = 1'bX;
end 
// expected RF_OUT_B[ 1 ]
initial
begin
	RF_OUT_B_expected[1] = 1'bX;
end 
// expected RF_OUT_B[ 0 ]
initial
begin
	RF_OUT_B_expected[0] = 1'bX;
end 
// expected RF_R_ADDR_B[ 2 ]
initial
begin
	RF_R_ADDR_B_expected[2] = 1'bX;
end 
// expected RF_R_ADDR_B[ 1 ]
initial
begin
	RF_R_ADDR_B_expected[1] = 1'bX;
end 
// expected RF_R_ADDR_B[ 0 ]
initial
begin
	RF_R_ADDR_B_expected[0] = 1'bX;
end 
// expected A[ 7 ]
initial
begin
	A_expected[7] = 1'bX;
end 
// expected A[ 6 ]
initial
begin
	A_expected[6] = 1'bX;
end 
// expected A[ 5 ]
initial
begin
	A_expected[5] = 1'bX;
end 
// expected A[ 4 ]
initial
begin
	A_expected[4] = 1'bX;
end 
// expected A[ 3 ]
initial
begin
	A_expected[3] = 1'bX;
end 
// expected A[ 2 ]
initial
begin
	A_expected[2] = 1'bX;
end 
// expected A[ 1 ]
initial
begin
	A_expected[1] = 1'bX;
end 
// expected A[ 0 ]
initial
begin
	A_expected[0] = 1'bX;
end 

// expected OVF
initial
begin
	OVF_expected = 1'bX;
end 

// expected Z
initial
begin
	Z_expected = 1'bX;
end 

// expected CO
initial
begin
	CO_expected = 1'bX;
end 

// expected N
initial
begin
	N_expected = 1'bX;
end 
// generate trigger
always @(A_expected or A or ALUOUT_expected or ALUOUT or CO_expected or CO or DATA_MEM_ADDR_IN_expected or DATA_MEM_ADDR_IN or DATA_MEM_DATA_IN_expected or DATA_MEM_DATA_IN or N_expected or N or OPCODE_expected or OPCODE or OUT_Q_expected or OUT_Q or OVF_expected or OVF or Product_expected or Product or Qm1_expected or Qm1 or READ_DATA_A_expected or READ_DATA_A or READ_DATA_B_expected or READ_DATA_B or RF_OUT_A_expected or RF_OUT_A or RF_OUT_B_expected or RF_OUT_B or RF_R_ADDR_B_expected or RF_R_ADDR_B or RF_W_ADDR_expected or RF_W_ADDR or RF_W_DATA_expected or RF_W_DATA or Z_expected or Z)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected A = %b | expected ALUOUT = %b | expected CO = %b | expected DATA_MEM_ADDR_IN = %b | expected DATA_MEM_DATA_IN = %b | expected N = %b | expected OPCODE = %b | expected OUT_Q = %b | expected OVF = %b | expected Product = %b | expected Qm1 = %b | expected READ_DATA_A = %b | expected READ_DATA_B = %b | expected RF_OUT_A = %b | expected RF_OUT_B = %b | expected RF_R_ADDR_B = %b | expected RF_W_ADDR = %b | expected RF_W_DATA = %b | expected Z = %b | ",A_expected_prev,ALUOUT_expected_prev,CO_expected_prev,DATA_MEM_ADDR_IN_expected_prev,DATA_MEM_DATA_IN_expected_prev,N_expected_prev,OPCODE_expected_prev,OUT_Q_expected_prev,OVF_expected_prev,Product_expected_prev,Qm1_expected_prev,READ_DATA_A_expected_prev,READ_DATA_B_expected_prev,RF_OUT_A_expected_prev,RF_OUT_B_expected_prev,RF_R_ADDR_B_expected_prev,RF_W_ADDR_expected_prev,RF_W_DATA_expected_prev,Z_expected_prev);
	$display("| real A = %b | real ALUOUT = %b | real CO = %b | real DATA_MEM_ADDR_IN = %b | real DATA_MEM_DATA_IN = %b | real N = %b | real OPCODE = %b | real OUT_Q = %b | real OVF = %b | real Product = %b | real Qm1 = %b | real READ_DATA_A = %b | real READ_DATA_B = %b | real RF_OUT_A = %b | real RF_OUT_B = %b | real RF_R_ADDR_B = %b | real RF_W_ADDR = %b | real RF_W_DATA = %b | real Z = %b | ",A_prev,ALUOUT_prev,CO_prev,DATA_MEM_ADDR_IN_prev,DATA_MEM_DATA_IN_prev,N_prev,OPCODE_prev,OUT_Q_prev,OVF_prev,Product_prev,Qm1_prev,READ_DATA_A_prev,READ_DATA_B_prev,RF_OUT_A_prev,RF_OUT_B_prev,RF_R_ADDR_B_prev,RF_W_ADDR_prev,RF_W_DATA_prev,Z_prev);
`endif
	if (
		( A_expected_prev[0] !== 1'bx ) && ( A_prev[0] !== A_expected_prev[0] )
		&& ((A_expected_prev[0] !== last_A_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_expected_prev);
		$display ("     Real value = %b", A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_exp[0] = A_expected_prev[0];
	end
	if (
		( A_expected_prev[1] !== 1'bx ) && ( A_prev[1] !== A_expected_prev[1] )
		&& ((A_expected_prev[1] !== last_A_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_expected_prev);
		$display ("     Real value = %b", A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_exp[1] = A_expected_prev[1];
	end
	if (
		( A_expected_prev[2] !== 1'bx ) && ( A_prev[2] !== A_expected_prev[2] )
		&& ((A_expected_prev[2] !== last_A_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_expected_prev);
		$display ("     Real value = %b", A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_exp[2] = A_expected_prev[2];
	end
	if (
		( A_expected_prev[3] !== 1'bx ) && ( A_prev[3] !== A_expected_prev[3] )
		&& ((A_expected_prev[3] !== last_A_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_expected_prev);
		$display ("     Real value = %b", A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_exp[3] = A_expected_prev[3];
	end
	if (
		( A_expected_prev[4] !== 1'bx ) && ( A_prev[4] !== A_expected_prev[4] )
		&& ((A_expected_prev[4] !== last_A_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_expected_prev);
		$display ("     Real value = %b", A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_exp[4] = A_expected_prev[4];
	end
	if (
		( A_expected_prev[5] !== 1'bx ) && ( A_prev[5] !== A_expected_prev[5] )
		&& ((A_expected_prev[5] !== last_A_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_expected_prev);
		$display ("     Real value = %b", A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_exp[5] = A_expected_prev[5];
	end
	if (
		( A_expected_prev[6] !== 1'bx ) && ( A_prev[6] !== A_expected_prev[6] )
		&& ((A_expected_prev[6] !== last_A_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_expected_prev);
		$display ("     Real value = %b", A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_exp[6] = A_expected_prev[6];
	end
	if (
		( A_expected_prev[7] !== 1'bx ) && ( A_prev[7] !== A_expected_prev[7] )
		&& ((A_expected_prev[7] !== last_A_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_expected_prev);
		$display ("     Real value = %b", A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_exp[7] = A_expected_prev[7];
	end
	if (
		( ALUOUT_expected_prev[0] !== 1'bx ) && ( ALUOUT_prev[0] !== ALUOUT_expected_prev[0] )
		&& ((ALUOUT_expected_prev[0] !== last_ALUOUT_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUOUT[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUOUT_expected_prev);
		$display ("     Real value = %b", ALUOUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ALUOUT_exp[0] = ALUOUT_expected_prev[0];
	end
	if (
		( ALUOUT_expected_prev[1] !== 1'bx ) && ( ALUOUT_prev[1] !== ALUOUT_expected_prev[1] )
		&& ((ALUOUT_expected_prev[1] !== last_ALUOUT_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUOUT[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUOUT_expected_prev);
		$display ("     Real value = %b", ALUOUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ALUOUT_exp[1] = ALUOUT_expected_prev[1];
	end
	if (
		( ALUOUT_expected_prev[2] !== 1'bx ) && ( ALUOUT_prev[2] !== ALUOUT_expected_prev[2] )
		&& ((ALUOUT_expected_prev[2] !== last_ALUOUT_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUOUT[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUOUT_expected_prev);
		$display ("     Real value = %b", ALUOUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ALUOUT_exp[2] = ALUOUT_expected_prev[2];
	end
	if (
		( ALUOUT_expected_prev[3] !== 1'bx ) && ( ALUOUT_prev[3] !== ALUOUT_expected_prev[3] )
		&& ((ALUOUT_expected_prev[3] !== last_ALUOUT_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUOUT[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUOUT_expected_prev);
		$display ("     Real value = %b", ALUOUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ALUOUT_exp[3] = ALUOUT_expected_prev[3];
	end
	if (
		( ALUOUT_expected_prev[4] !== 1'bx ) && ( ALUOUT_prev[4] !== ALUOUT_expected_prev[4] )
		&& ((ALUOUT_expected_prev[4] !== last_ALUOUT_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUOUT[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUOUT_expected_prev);
		$display ("     Real value = %b", ALUOUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ALUOUT_exp[4] = ALUOUT_expected_prev[4];
	end
	if (
		( ALUOUT_expected_prev[5] !== 1'bx ) && ( ALUOUT_prev[5] !== ALUOUT_expected_prev[5] )
		&& ((ALUOUT_expected_prev[5] !== last_ALUOUT_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUOUT[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUOUT_expected_prev);
		$display ("     Real value = %b", ALUOUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ALUOUT_exp[5] = ALUOUT_expected_prev[5];
	end
	if (
		( ALUOUT_expected_prev[6] !== 1'bx ) && ( ALUOUT_prev[6] !== ALUOUT_expected_prev[6] )
		&& ((ALUOUT_expected_prev[6] !== last_ALUOUT_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUOUT[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUOUT_expected_prev);
		$display ("     Real value = %b", ALUOUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ALUOUT_exp[6] = ALUOUT_expected_prev[6];
	end
	if (
		( ALUOUT_expected_prev[7] !== 1'bx ) && ( ALUOUT_prev[7] !== ALUOUT_expected_prev[7] )
		&& ((ALUOUT_expected_prev[7] !== last_ALUOUT_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALUOUT[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALUOUT_expected_prev);
		$display ("     Real value = %b", ALUOUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ALUOUT_exp[7] = ALUOUT_expected_prev[7];
	end
	if (
		( CO_expected_prev !== 1'bx ) && ( CO_prev !== CO_expected_prev )
		&& ((CO_expected_prev !== last_CO_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CO :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CO_expected_prev);
		$display ("     Real value = %b", CO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_CO_exp = CO_expected_prev;
	end
	if (
		( DATA_MEM_ADDR_IN_expected_prev[0] !== 1'bx ) && ( DATA_MEM_ADDR_IN_prev[0] !== DATA_MEM_ADDR_IN_expected_prev[0] )
		&& ((DATA_MEM_ADDR_IN_expected_prev[0] !== last_DATA_MEM_ADDR_IN_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_MEM_ADDR_IN[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_MEM_ADDR_IN_expected_prev);
		$display ("     Real value = %b", DATA_MEM_ADDR_IN_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_DATA_MEM_ADDR_IN_exp[0] = DATA_MEM_ADDR_IN_expected_prev[0];
	end
	if (
		( DATA_MEM_ADDR_IN_expected_prev[1] !== 1'bx ) && ( DATA_MEM_ADDR_IN_prev[1] !== DATA_MEM_ADDR_IN_expected_prev[1] )
		&& ((DATA_MEM_ADDR_IN_expected_prev[1] !== last_DATA_MEM_ADDR_IN_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_MEM_ADDR_IN[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_MEM_ADDR_IN_expected_prev);
		$display ("     Real value = %b", DATA_MEM_ADDR_IN_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_DATA_MEM_ADDR_IN_exp[1] = DATA_MEM_ADDR_IN_expected_prev[1];
	end
	if (
		( DATA_MEM_ADDR_IN_expected_prev[2] !== 1'bx ) && ( DATA_MEM_ADDR_IN_prev[2] !== DATA_MEM_ADDR_IN_expected_prev[2] )
		&& ((DATA_MEM_ADDR_IN_expected_prev[2] !== last_DATA_MEM_ADDR_IN_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_MEM_ADDR_IN[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_MEM_ADDR_IN_expected_prev);
		$display ("     Real value = %b", DATA_MEM_ADDR_IN_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_DATA_MEM_ADDR_IN_exp[2] = DATA_MEM_ADDR_IN_expected_prev[2];
	end
	if (
		( DATA_MEM_ADDR_IN_expected_prev[3] !== 1'bx ) && ( DATA_MEM_ADDR_IN_prev[3] !== DATA_MEM_ADDR_IN_expected_prev[3] )
		&& ((DATA_MEM_ADDR_IN_expected_prev[3] !== last_DATA_MEM_ADDR_IN_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_MEM_ADDR_IN[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_MEM_ADDR_IN_expected_prev);
		$display ("     Real value = %b", DATA_MEM_ADDR_IN_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_DATA_MEM_ADDR_IN_exp[3] = DATA_MEM_ADDR_IN_expected_prev[3];
	end
	if (
		( DATA_MEM_ADDR_IN_expected_prev[4] !== 1'bx ) && ( DATA_MEM_ADDR_IN_prev[4] !== DATA_MEM_ADDR_IN_expected_prev[4] )
		&& ((DATA_MEM_ADDR_IN_expected_prev[4] !== last_DATA_MEM_ADDR_IN_exp[4]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_MEM_ADDR_IN[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_MEM_ADDR_IN_expected_prev);
		$display ("     Real value = %b", DATA_MEM_ADDR_IN_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_DATA_MEM_ADDR_IN_exp[4] = DATA_MEM_ADDR_IN_expected_prev[4];
	end
	if (
		( DATA_MEM_ADDR_IN_expected_prev[5] !== 1'bx ) && ( DATA_MEM_ADDR_IN_prev[5] !== DATA_MEM_ADDR_IN_expected_prev[5] )
		&& ((DATA_MEM_ADDR_IN_expected_prev[5] !== last_DATA_MEM_ADDR_IN_exp[5]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_MEM_ADDR_IN[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_MEM_ADDR_IN_expected_prev);
		$display ("     Real value = %b", DATA_MEM_ADDR_IN_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_DATA_MEM_ADDR_IN_exp[5] = DATA_MEM_ADDR_IN_expected_prev[5];
	end
	if (
		( DATA_MEM_ADDR_IN_expected_prev[6] !== 1'bx ) && ( DATA_MEM_ADDR_IN_prev[6] !== DATA_MEM_ADDR_IN_expected_prev[6] )
		&& ((DATA_MEM_ADDR_IN_expected_prev[6] !== last_DATA_MEM_ADDR_IN_exp[6]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_MEM_ADDR_IN[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_MEM_ADDR_IN_expected_prev);
		$display ("     Real value = %b", DATA_MEM_ADDR_IN_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_DATA_MEM_ADDR_IN_exp[6] = DATA_MEM_ADDR_IN_expected_prev[6];
	end
	if (
		( DATA_MEM_ADDR_IN_expected_prev[7] !== 1'bx ) && ( DATA_MEM_ADDR_IN_prev[7] !== DATA_MEM_ADDR_IN_expected_prev[7] )
		&& ((DATA_MEM_ADDR_IN_expected_prev[7] !== last_DATA_MEM_ADDR_IN_exp[7]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_MEM_ADDR_IN[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_MEM_ADDR_IN_expected_prev);
		$display ("     Real value = %b", DATA_MEM_ADDR_IN_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_DATA_MEM_ADDR_IN_exp[7] = DATA_MEM_ADDR_IN_expected_prev[7];
	end
	if (
		( DATA_MEM_ADDR_IN_expected_prev[8] !== 1'bx ) && ( DATA_MEM_ADDR_IN_prev[8] !== DATA_MEM_ADDR_IN_expected_prev[8] )
		&& ((DATA_MEM_ADDR_IN_expected_prev[8] !== last_DATA_MEM_ADDR_IN_exp[8]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_MEM_ADDR_IN[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_MEM_ADDR_IN_expected_prev);
		$display ("     Real value = %b", DATA_MEM_ADDR_IN_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_DATA_MEM_ADDR_IN_exp[8] = DATA_MEM_ADDR_IN_expected_prev[8];
	end
	if (
		( DATA_MEM_ADDR_IN_expected_prev[9] !== 1'bx ) && ( DATA_MEM_ADDR_IN_prev[9] !== DATA_MEM_ADDR_IN_expected_prev[9] )
		&& ((DATA_MEM_ADDR_IN_expected_prev[9] !== last_DATA_MEM_ADDR_IN_exp[9]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_MEM_ADDR_IN[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_MEM_ADDR_IN_expected_prev);
		$display ("     Real value = %b", DATA_MEM_ADDR_IN_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_DATA_MEM_ADDR_IN_exp[9] = DATA_MEM_ADDR_IN_expected_prev[9];
	end
	if (
		( DATA_MEM_DATA_IN_expected_prev[0] !== 1'bx ) && ( DATA_MEM_DATA_IN_prev[0] !== DATA_MEM_DATA_IN_expected_prev[0] )
		&& ((DATA_MEM_DATA_IN_expected_prev[0] !== last_DATA_MEM_DATA_IN_exp[0]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_MEM_DATA_IN[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_MEM_DATA_IN_expected_prev);
		$display ("     Real value = %b", DATA_MEM_DATA_IN_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_DATA_MEM_DATA_IN_exp[0] = DATA_MEM_DATA_IN_expected_prev[0];
	end
	if (
		( DATA_MEM_DATA_IN_expected_prev[1] !== 1'bx ) && ( DATA_MEM_DATA_IN_prev[1] !== DATA_MEM_DATA_IN_expected_prev[1] )
		&& ((DATA_MEM_DATA_IN_expected_prev[1] !== last_DATA_MEM_DATA_IN_exp[1]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_MEM_DATA_IN[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_MEM_DATA_IN_expected_prev);
		$display ("     Real value = %b", DATA_MEM_DATA_IN_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_DATA_MEM_DATA_IN_exp[1] = DATA_MEM_DATA_IN_expected_prev[1];
	end
	if (
		( DATA_MEM_DATA_IN_expected_prev[2] !== 1'bx ) && ( DATA_MEM_DATA_IN_prev[2] !== DATA_MEM_DATA_IN_expected_prev[2] )
		&& ((DATA_MEM_DATA_IN_expected_prev[2] !== last_DATA_MEM_DATA_IN_exp[2]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_MEM_DATA_IN[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_MEM_DATA_IN_expected_prev);
		$display ("     Real value = %b", DATA_MEM_DATA_IN_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_DATA_MEM_DATA_IN_exp[2] = DATA_MEM_DATA_IN_expected_prev[2];
	end
	if (
		( DATA_MEM_DATA_IN_expected_prev[3] !== 1'bx ) && ( DATA_MEM_DATA_IN_prev[3] !== DATA_MEM_DATA_IN_expected_prev[3] )
		&& ((DATA_MEM_DATA_IN_expected_prev[3] !== last_DATA_MEM_DATA_IN_exp[3]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_MEM_DATA_IN[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_MEM_DATA_IN_expected_prev);
		$display ("     Real value = %b", DATA_MEM_DATA_IN_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_DATA_MEM_DATA_IN_exp[3] = DATA_MEM_DATA_IN_expected_prev[3];
	end
	if (
		( DATA_MEM_DATA_IN_expected_prev[4] !== 1'bx ) && ( DATA_MEM_DATA_IN_prev[4] !== DATA_MEM_DATA_IN_expected_prev[4] )
		&& ((DATA_MEM_DATA_IN_expected_prev[4] !== last_DATA_MEM_DATA_IN_exp[4]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_MEM_DATA_IN[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_MEM_DATA_IN_expected_prev);
		$display ("     Real value = %b", DATA_MEM_DATA_IN_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_DATA_MEM_DATA_IN_exp[4] = DATA_MEM_DATA_IN_expected_prev[4];
	end
	if (
		( DATA_MEM_DATA_IN_expected_prev[5] !== 1'bx ) && ( DATA_MEM_DATA_IN_prev[5] !== DATA_MEM_DATA_IN_expected_prev[5] )
		&& ((DATA_MEM_DATA_IN_expected_prev[5] !== last_DATA_MEM_DATA_IN_exp[5]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_MEM_DATA_IN[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_MEM_DATA_IN_expected_prev);
		$display ("     Real value = %b", DATA_MEM_DATA_IN_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_DATA_MEM_DATA_IN_exp[5] = DATA_MEM_DATA_IN_expected_prev[5];
	end
	if (
		( DATA_MEM_DATA_IN_expected_prev[6] !== 1'bx ) && ( DATA_MEM_DATA_IN_prev[6] !== DATA_MEM_DATA_IN_expected_prev[6] )
		&& ((DATA_MEM_DATA_IN_expected_prev[6] !== last_DATA_MEM_DATA_IN_exp[6]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_MEM_DATA_IN[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_MEM_DATA_IN_expected_prev);
		$display ("     Real value = %b", DATA_MEM_DATA_IN_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_DATA_MEM_DATA_IN_exp[6] = DATA_MEM_DATA_IN_expected_prev[6];
	end
	if (
		( DATA_MEM_DATA_IN_expected_prev[7] !== 1'bx ) && ( DATA_MEM_DATA_IN_prev[7] !== DATA_MEM_DATA_IN_expected_prev[7] )
		&& ((DATA_MEM_DATA_IN_expected_prev[7] !== last_DATA_MEM_DATA_IN_exp[7]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_MEM_DATA_IN[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_MEM_DATA_IN_expected_prev);
		$display ("     Real value = %b", DATA_MEM_DATA_IN_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_DATA_MEM_DATA_IN_exp[7] = DATA_MEM_DATA_IN_expected_prev[7];
	end
	if (
		( DATA_MEM_DATA_IN_expected_prev[8] !== 1'bx ) && ( DATA_MEM_DATA_IN_prev[8] !== DATA_MEM_DATA_IN_expected_prev[8] )
		&& ((DATA_MEM_DATA_IN_expected_prev[8] !== last_DATA_MEM_DATA_IN_exp[8]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_MEM_DATA_IN[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_MEM_DATA_IN_expected_prev);
		$display ("     Real value = %b", DATA_MEM_DATA_IN_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_DATA_MEM_DATA_IN_exp[8] = DATA_MEM_DATA_IN_expected_prev[8];
	end
	if (
		( DATA_MEM_DATA_IN_expected_prev[9] !== 1'bx ) && ( DATA_MEM_DATA_IN_prev[9] !== DATA_MEM_DATA_IN_expected_prev[9] )
		&& ((DATA_MEM_DATA_IN_expected_prev[9] !== last_DATA_MEM_DATA_IN_exp[9]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_MEM_DATA_IN[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_MEM_DATA_IN_expected_prev);
		$display ("     Real value = %b", DATA_MEM_DATA_IN_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_DATA_MEM_DATA_IN_exp[9] = DATA_MEM_DATA_IN_expected_prev[9];
	end
	if (
		( DATA_MEM_DATA_IN_expected_prev[10] !== 1'bx ) && ( DATA_MEM_DATA_IN_prev[10] !== DATA_MEM_DATA_IN_expected_prev[10] )
		&& ((DATA_MEM_DATA_IN_expected_prev[10] !== last_DATA_MEM_DATA_IN_exp[10]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_MEM_DATA_IN[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_MEM_DATA_IN_expected_prev);
		$display ("     Real value = %b", DATA_MEM_DATA_IN_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_DATA_MEM_DATA_IN_exp[10] = DATA_MEM_DATA_IN_expected_prev[10];
	end
	if (
		( DATA_MEM_DATA_IN_expected_prev[11] !== 1'bx ) && ( DATA_MEM_DATA_IN_prev[11] !== DATA_MEM_DATA_IN_expected_prev[11] )
		&& ((DATA_MEM_DATA_IN_expected_prev[11] !== last_DATA_MEM_DATA_IN_exp[11]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_MEM_DATA_IN[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_MEM_DATA_IN_expected_prev);
		$display ("     Real value = %b", DATA_MEM_DATA_IN_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_DATA_MEM_DATA_IN_exp[11] = DATA_MEM_DATA_IN_expected_prev[11];
	end
	if (
		( DATA_MEM_DATA_IN_expected_prev[12] !== 1'bx ) && ( DATA_MEM_DATA_IN_prev[12] !== DATA_MEM_DATA_IN_expected_prev[12] )
		&& ((DATA_MEM_DATA_IN_expected_prev[12] !== last_DATA_MEM_DATA_IN_exp[12]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_MEM_DATA_IN[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_MEM_DATA_IN_expected_prev);
		$display ("     Real value = %b", DATA_MEM_DATA_IN_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_DATA_MEM_DATA_IN_exp[12] = DATA_MEM_DATA_IN_expected_prev[12];
	end
	if (
		( DATA_MEM_DATA_IN_expected_prev[13] !== 1'bx ) && ( DATA_MEM_DATA_IN_prev[13] !== DATA_MEM_DATA_IN_expected_prev[13] )
		&& ((DATA_MEM_DATA_IN_expected_prev[13] !== last_DATA_MEM_DATA_IN_exp[13]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_MEM_DATA_IN[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_MEM_DATA_IN_expected_prev);
		$display ("     Real value = %b", DATA_MEM_DATA_IN_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_DATA_MEM_DATA_IN_exp[13] = DATA_MEM_DATA_IN_expected_prev[13];
	end
	if (
		( DATA_MEM_DATA_IN_expected_prev[14] !== 1'bx ) && ( DATA_MEM_DATA_IN_prev[14] !== DATA_MEM_DATA_IN_expected_prev[14] )
		&& ((DATA_MEM_DATA_IN_expected_prev[14] !== last_DATA_MEM_DATA_IN_exp[14]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_MEM_DATA_IN[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_MEM_DATA_IN_expected_prev);
		$display ("     Real value = %b", DATA_MEM_DATA_IN_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_DATA_MEM_DATA_IN_exp[14] = DATA_MEM_DATA_IN_expected_prev[14];
	end
	if (
		( DATA_MEM_DATA_IN_expected_prev[15] !== 1'bx ) && ( DATA_MEM_DATA_IN_prev[15] !== DATA_MEM_DATA_IN_expected_prev[15] )
		&& ((DATA_MEM_DATA_IN_expected_prev[15] !== last_DATA_MEM_DATA_IN_exp[15]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_MEM_DATA_IN[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_MEM_DATA_IN_expected_prev);
		$display ("     Real value = %b", DATA_MEM_DATA_IN_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_DATA_MEM_DATA_IN_exp[15] = DATA_MEM_DATA_IN_expected_prev[15];
	end
	if (
		( N_expected_prev !== 1'bx ) && ( N_prev !== N_expected_prev )
		&& ((N_expected_prev !== last_N_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port N :: @time = %t",  $realtime);
		$display ("     Expected value = %b", N_expected_prev);
		$display ("     Real value = %b", N_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_N_exp = N_expected_prev;
	end
	if (
		( OPCODE_expected_prev[0] !== 1'bx ) && ( OPCODE_prev[0] !== OPCODE_expected_prev[0] )
		&& ((OPCODE_expected_prev[0] !== last_OPCODE_exp[0]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OPCODE[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OPCODE_expected_prev);
		$display ("     Real value = %b", OPCODE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_OPCODE_exp[0] = OPCODE_expected_prev[0];
	end
	if (
		( OPCODE_expected_prev[1] !== 1'bx ) && ( OPCODE_prev[1] !== OPCODE_expected_prev[1] )
		&& ((OPCODE_expected_prev[1] !== last_OPCODE_exp[1]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OPCODE[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OPCODE_expected_prev);
		$display ("     Real value = %b", OPCODE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_OPCODE_exp[1] = OPCODE_expected_prev[1];
	end
	if (
		( OPCODE_expected_prev[2] !== 1'bx ) && ( OPCODE_prev[2] !== OPCODE_expected_prev[2] )
		&& ((OPCODE_expected_prev[2] !== last_OPCODE_exp[2]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OPCODE[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OPCODE_expected_prev);
		$display ("     Real value = %b", OPCODE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_OPCODE_exp[2] = OPCODE_expected_prev[2];
	end
	if (
		( OPCODE_expected_prev[3] !== 1'bx ) && ( OPCODE_prev[3] !== OPCODE_expected_prev[3] )
		&& ((OPCODE_expected_prev[3] !== last_OPCODE_exp[3]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OPCODE[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OPCODE_expected_prev);
		$display ("     Real value = %b", OPCODE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_OPCODE_exp[3] = OPCODE_expected_prev[3];
	end
	if (
		( OUT_Q_expected_prev[0] !== 1'bx ) && ( OUT_Q_prev[0] !== OUT_Q_expected_prev[0] )
		&& ((OUT_Q_expected_prev[0] !== last_OUT_Q_exp[0]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT_Q[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT_Q_expected_prev);
		$display ("     Real value = %b", OUT_Q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_OUT_Q_exp[0] = OUT_Q_expected_prev[0];
	end
	if (
		( OUT_Q_expected_prev[1] !== 1'bx ) && ( OUT_Q_prev[1] !== OUT_Q_expected_prev[1] )
		&& ((OUT_Q_expected_prev[1] !== last_OUT_Q_exp[1]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT_Q[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT_Q_expected_prev);
		$display ("     Real value = %b", OUT_Q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_OUT_Q_exp[1] = OUT_Q_expected_prev[1];
	end
	if (
		( OUT_Q_expected_prev[2] !== 1'bx ) && ( OUT_Q_prev[2] !== OUT_Q_expected_prev[2] )
		&& ((OUT_Q_expected_prev[2] !== last_OUT_Q_exp[2]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT_Q[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT_Q_expected_prev);
		$display ("     Real value = %b", OUT_Q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_OUT_Q_exp[2] = OUT_Q_expected_prev[2];
	end
	if (
		( OUT_Q_expected_prev[3] !== 1'bx ) && ( OUT_Q_prev[3] !== OUT_Q_expected_prev[3] )
		&& ((OUT_Q_expected_prev[3] !== last_OUT_Q_exp[3]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT_Q[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT_Q_expected_prev);
		$display ("     Real value = %b", OUT_Q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_OUT_Q_exp[3] = OUT_Q_expected_prev[3];
	end
	if (
		( OUT_Q_expected_prev[4] !== 1'bx ) && ( OUT_Q_prev[4] !== OUT_Q_expected_prev[4] )
		&& ((OUT_Q_expected_prev[4] !== last_OUT_Q_exp[4]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT_Q[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT_Q_expected_prev);
		$display ("     Real value = %b", OUT_Q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_OUT_Q_exp[4] = OUT_Q_expected_prev[4];
	end
	if (
		( OUT_Q_expected_prev[5] !== 1'bx ) && ( OUT_Q_prev[5] !== OUT_Q_expected_prev[5] )
		&& ((OUT_Q_expected_prev[5] !== last_OUT_Q_exp[5]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT_Q[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT_Q_expected_prev);
		$display ("     Real value = %b", OUT_Q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_OUT_Q_exp[5] = OUT_Q_expected_prev[5];
	end
	if (
		( OUT_Q_expected_prev[6] !== 1'bx ) && ( OUT_Q_prev[6] !== OUT_Q_expected_prev[6] )
		&& ((OUT_Q_expected_prev[6] !== last_OUT_Q_exp[6]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT_Q[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT_Q_expected_prev);
		$display ("     Real value = %b", OUT_Q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_OUT_Q_exp[6] = OUT_Q_expected_prev[6];
	end
	if (
		( OUT_Q_expected_prev[7] !== 1'bx ) && ( OUT_Q_prev[7] !== OUT_Q_expected_prev[7] )
		&& ((OUT_Q_expected_prev[7] !== last_OUT_Q_exp[7]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT_Q[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT_Q_expected_prev);
		$display ("     Real value = %b", OUT_Q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_OUT_Q_exp[7] = OUT_Q_expected_prev[7];
	end
	if (
		( OVF_expected_prev !== 1'bx ) && ( OVF_prev !== OVF_expected_prev )
		&& ((OVF_expected_prev !== last_OVF_exp) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OVF :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OVF_expected_prev);
		$display ("     Real value = %b", OVF_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_OVF_exp = OVF_expected_prev;
	end
	if (
		( RF_OUT_A_expected_prev[0] !== 1'bx ) && ( RF_OUT_A_prev[0] !== RF_OUT_A_expected_prev[0] )
		&& ((RF_OUT_A_expected_prev[0] !== last_RF_OUT_A_exp[0]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RF_OUT_A[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RF_OUT_A_expected_prev);
		$display ("     Real value = %b", RF_OUT_A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_RF_OUT_A_exp[0] = RF_OUT_A_expected_prev[0];
	end
	if (
		( RF_OUT_A_expected_prev[1] !== 1'bx ) && ( RF_OUT_A_prev[1] !== RF_OUT_A_expected_prev[1] )
		&& ((RF_OUT_A_expected_prev[1] !== last_RF_OUT_A_exp[1]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RF_OUT_A[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RF_OUT_A_expected_prev);
		$display ("     Real value = %b", RF_OUT_A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_RF_OUT_A_exp[1] = RF_OUT_A_expected_prev[1];
	end
	if (
		( RF_OUT_A_expected_prev[2] !== 1'bx ) && ( RF_OUT_A_prev[2] !== RF_OUT_A_expected_prev[2] )
		&& ((RF_OUT_A_expected_prev[2] !== last_RF_OUT_A_exp[2]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RF_OUT_A[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RF_OUT_A_expected_prev);
		$display ("     Real value = %b", RF_OUT_A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_RF_OUT_A_exp[2] = RF_OUT_A_expected_prev[2];
	end
	if (
		( RF_OUT_A_expected_prev[3] !== 1'bx ) && ( RF_OUT_A_prev[3] !== RF_OUT_A_expected_prev[3] )
		&& ((RF_OUT_A_expected_prev[3] !== last_RF_OUT_A_exp[3]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RF_OUT_A[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RF_OUT_A_expected_prev);
		$display ("     Real value = %b", RF_OUT_A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_RF_OUT_A_exp[3] = RF_OUT_A_expected_prev[3];
	end
	if (
		( RF_OUT_A_expected_prev[4] !== 1'bx ) && ( RF_OUT_A_prev[4] !== RF_OUT_A_expected_prev[4] )
		&& ((RF_OUT_A_expected_prev[4] !== last_RF_OUT_A_exp[4]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RF_OUT_A[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RF_OUT_A_expected_prev);
		$display ("     Real value = %b", RF_OUT_A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_RF_OUT_A_exp[4] = RF_OUT_A_expected_prev[4];
	end
	if (
		( RF_OUT_A_expected_prev[5] !== 1'bx ) && ( RF_OUT_A_prev[5] !== RF_OUT_A_expected_prev[5] )
		&& ((RF_OUT_A_expected_prev[5] !== last_RF_OUT_A_exp[5]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RF_OUT_A[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RF_OUT_A_expected_prev);
		$display ("     Real value = %b", RF_OUT_A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_RF_OUT_A_exp[5] = RF_OUT_A_expected_prev[5];
	end
	if (
		( RF_OUT_A_expected_prev[6] !== 1'bx ) && ( RF_OUT_A_prev[6] !== RF_OUT_A_expected_prev[6] )
		&& ((RF_OUT_A_expected_prev[6] !== last_RF_OUT_A_exp[6]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RF_OUT_A[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RF_OUT_A_expected_prev);
		$display ("     Real value = %b", RF_OUT_A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_RF_OUT_A_exp[6] = RF_OUT_A_expected_prev[6];
	end
	if (
		( RF_OUT_A_expected_prev[7] !== 1'bx ) && ( RF_OUT_A_prev[7] !== RF_OUT_A_expected_prev[7] )
		&& ((RF_OUT_A_expected_prev[7] !== last_RF_OUT_A_exp[7]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RF_OUT_A[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RF_OUT_A_expected_prev);
		$display ("     Real value = %b", RF_OUT_A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_RF_OUT_A_exp[7] = RF_OUT_A_expected_prev[7];
	end
	if (
		( RF_OUT_B_expected_prev[0] !== 1'bx ) && ( RF_OUT_B_prev[0] !== RF_OUT_B_expected_prev[0] )
		&& ((RF_OUT_B_expected_prev[0] !== last_RF_OUT_B_exp[0]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RF_OUT_B[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RF_OUT_B_expected_prev);
		$display ("     Real value = %b", RF_OUT_B_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_RF_OUT_B_exp[0] = RF_OUT_B_expected_prev[0];
	end
	if (
		( RF_OUT_B_expected_prev[1] !== 1'bx ) && ( RF_OUT_B_prev[1] !== RF_OUT_B_expected_prev[1] )
		&& ((RF_OUT_B_expected_prev[1] !== last_RF_OUT_B_exp[1]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RF_OUT_B[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RF_OUT_B_expected_prev);
		$display ("     Real value = %b", RF_OUT_B_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_RF_OUT_B_exp[1] = RF_OUT_B_expected_prev[1];
	end
	if (
		( RF_OUT_B_expected_prev[2] !== 1'bx ) && ( RF_OUT_B_prev[2] !== RF_OUT_B_expected_prev[2] )
		&& ((RF_OUT_B_expected_prev[2] !== last_RF_OUT_B_exp[2]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RF_OUT_B[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RF_OUT_B_expected_prev);
		$display ("     Real value = %b", RF_OUT_B_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_RF_OUT_B_exp[2] = RF_OUT_B_expected_prev[2];
	end
	if (
		( RF_OUT_B_expected_prev[3] !== 1'bx ) && ( RF_OUT_B_prev[3] !== RF_OUT_B_expected_prev[3] )
		&& ((RF_OUT_B_expected_prev[3] !== last_RF_OUT_B_exp[3]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RF_OUT_B[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RF_OUT_B_expected_prev);
		$display ("     Real value = %b", RF_OUT_B_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_RF_OUT_B_exp[3] = RF_OUT_B_expected_prev[3];
	end
	if (
		( RF_OUT_B_expected_prev[4] !== 1'bx ) && ( RF_OUT_B_prev[4] !== RF_OUT_B_expected_prev[4] )
		&& ((RF_OUT_B_expected_prev[4] !== last_RF_OUT_B_exp[4]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RF_OUT_B[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RF_OUT_B_expected_prev);
		$display ("     Real value = %b", RF_OUT_B_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_RF_OUT_B_exp[4] = RF_OUT_B_expected_prev[4];
	end
	if (
		( RF_OUT_B_expected_prev[5] !== 1'bx ) && ( RF_OUT_B_prev[5] !== RF_OUT_B_expected_prev[5] )
		&& ((RF_OUT_B_expected_prev[5] !== last_RF_OUT_B_exp[5]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RF_OUT_B[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RF_OUT_B_expected_prev);
		$display ("     Real value = %b", RF_OUT_B_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_RF_OUT_B_exp[5] = RF_OUT_B_expected_prev[5];
	end
	if (
		( RF_OUT_B_expected_prev[6] !== 1'bx ) && ( RF_OUT_B_prev[6] !== RF_OUT_B_expected_prev[6] )
		&& ((RF_OUT_B_expected_prev[6] !== last_RF_OUT_B_exp[6]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RF_OUT_B[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RF_OUT_B_expected_prev);
		$display ("     Real value = %b", RF_OUT_B_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_RF_OUT_B_exp[6] = RF_OUT_B_expected_prev[6];
	end
	if (
		( RF_OUT_B_expected_prev[7] !== 1'bx ) && ( RF_OUT_B_prev[7] !== RF_OUT_B_expected_prev[7] )
		&& ((RF_OUT_B_expected_prev[7] !== last_RF_OUT_B_exp[7]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RF_OUT_B[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RF_OUT_B_expected_prev);
		$display ("     Real value = %b", RF_OUT_B_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_RF_OUT_B_exp[7] = RF_OUT_B_expected_prev[7];
	end
	if (
		( RF_R_ADDR_B_expected_prev[0] !== 1'bx ) && ( RF_R_ADDR_B_prev[0] !== RF_R_ADDR_B_expected_prev[0] )
		&& ((RF_R_ADDR_B_expected_prev[0] !== last_RF_R_ADDR_B_exp[0]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RF_R_ADDR_B[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RF_R_ADDR_B_expected_prev);
		$display ("     Real value = %b", RF_R_ADDR_B_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_RF_R_ADDR_B_exp[0] = RF_R_ADDR_B_expected_prev[0];
	end
	if (
		( RF_R_ADDR_B_expected_prev[1] !== 1'bx ) && ( RF_R_ADDR_B_prev[1] !== RF_R_ADDR_B_expected_prev[1] )
		&& ((RF_R_ADDR_B_expected_prev[1] !== last_RF_R_ADDR_B_exp[1]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RF_R_ADDR_B[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RF_R_ADDR_B_expected_prev);
		$display ("     Real value = %b", RF_R_ADDR_B_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_RF_R_ADDR_B_exp[1] = RF_R_ADDR_B_expected_prev[1];
	end
	if (
		( RF_R_ADDR_B_expected_prev[2] !== 1'bx ) && ( RF_R_ADDR_B_prev[2] !== RF_R_ADDR_B_expected_prev[2] )
		&& ((RF_R_ADDR_B_expected_prev[2] !== last_RF_R_ADDR_B_exp[2]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RF_R_ADDR_B[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RF_R_ADDR_B_expected_prev);
		$display ("     Real value = %b", RF_R_ADDR_B_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_RF_R_ADDR_B_exp[2] = RF_R_ADDR_B_expected_prev[2];
	end
	if (
		( RF_W_ADDR_expected_prev[0] !== 1'bx ) && ( RF_W_ADDR_prev[0] !== RF_W_ADDR_expected_prev[0] )
		&& ((RF_W_ADDR_expected_prev[0] !== last_RF_W_ADDR_exp[0]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RF_W_ADDR[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RF_W_ADDR_expected_prev);
		$display ("     Real value = %b", RF_W_ADDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_RF_W_ADDR_exp[0] = RF_W_ADDR_expected_prev[0];
	end
	if (
		( RF_W_ADDR_expected_prev[1] !== 1'bx ) && ( RF_W_ADDR_prev[1] !== RF_W_ADDR_expected_prev[1] )
		&& ((RF_W_ADDR_expected_prev[1] !== last_RF_W_ADDR_exp[1]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RF_W_ADDR[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RF_W_ADDR_expected_prev);
		$display ("     Real value = %b", RF_W_ADDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_RF_W_ADDR_exp[1] = RF_W_ADDR_expected_prev[1];
	end
	if (
		( RF_W_ADDR_expected_prev[2] !== 1'bx ) && ( RF_W_ADDR_prev[2] !== RF_W_ADDR_expected_prev[2] )
		&& ((RF_W_ADDR_expected_prev[2] !== last_RF_W_ADDR_exp[2]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RF_W_ADDR[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RF_W_ADDR_expected_prev);
		$display ("     Real value = %b", RF_W_ADDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_RF_W_ADDR_exp[2] = RF_W_ADDR_expected_prev[2];
	end
	if (
		( RF_W_DATA_expected_prev[0] !== 1'bx ) && ( RF_W_DATA_prev[0] !== RF_W_DATA_expected_prev[0] )
		&& ((RF_W_DATA_expected_prev[0] !== last_RF_W_DATA_exp[0]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RF_W_DATA[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RF_W_DATA_expected_prev);
		$display ("     Real value = %b", RF_W_DATA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_RF_W_DATA_exp[0] = RF_W_DATA_expected_prev[0];
	end
	if (
		( RF_W_DATA_expected_prev[1] !== 1'bx ) && ( RF_W_DATA_prev[1] !== RF_W_DATA_expected_prev[1] )
		&& ((RF_W_DATA_expected_prev[1] !== last_RF_W_DATA_exp[1]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RF_W_DATA[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RF_W_DATA_expected_prev);
		$display ("     Real value = %b", RF_W_DATA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_RF_W_DATA_exp[1] = RF_W_DATA_expected_prev[1];
	end
	if (
		( RF_W_DATA_expected_prev[2] !== 1'bx ) && ( RF_W_DATA_prev[2] !== RF_W_DATA_expected_prev[2] )
		&& ((RF_W_DATA_expected_prev[2] !== last_RF_W_DATA_exp[2]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RF_W_DATA[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RF_W_DATA_expected_prev);
		$display ("     Real value = %b", RF_W_DATA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_RF_W_DATA_exp[2] = RF_W_DATA_expected_prev[2];
	end
	if (
		( RF_W_DATA_expected_prev[3] !== 1'bx ) && ( RF_W_DATA_prev[3] !== RF_W_DATA_expected_prev[3] )
		&& ((RF_W_DATA_expected_prev[3] !== last_RF_W_DATA_exp[3]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RF_W_DATA[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RF_W_DATA_expected_prev);
		$display ("     Real value = %b", RF_W_DATA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_RF_W_DATA_exp[3] = RF_W_DATA_expected_prev[3];
	end
	if (
		( RF_W_DATA_expected_prev[4] !== 1'bx ) && ( RF_W_DATA_prev[4] !== RF_W_DATA_expected_prev[4] )
		&& ((RF_W_DATA_expected_prev[4] !== last_RF_W_DATA_exp[4]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RF_W_DATA[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RF_W_DATA_expected_prev);
		$display ("     Real value = %b", RF_W_DATA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_RF_W_DATA_exp[4] = RF_W_DATA_expected_prev[4];
	end
	if (
		( RF_W_DATA_expected_prev[5] !== 1'bx ) && ( RF_W_DATA_prev[5] !== RF_W_DATA_expected_prev[5] )
		&& ((RF_W_DATA_expected_prev[5] !== last_RF_W_DATA_exp[5]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RF_W_DATA[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RF_W_DATA_expected_prev);
		$display ("     Real value = %b", RF_W_DATA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_RF_W_DATA_exp[5] = RF_W_DATA_expected_prev[5];
	end
	if (
		( RF_W_DATA_expected_prev[6] !== 1'bx ) && ( RF_W_DATA_prev[6] !== RF_W_DATA_expected_prev[6] )
		&& ((RF_W_DATA_expected_prev[6] !== last_RF_W_DATA_exp[6]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RF_W_DATA[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RF_W_DATA_expected_prev);
		$display ("     Real value = %b", RF_W_DATA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_RF_W_DATA_exp[6] = RF_W_DATA_expected_prev[6];
	end
	if (
		( RF_W_DATA_expected_prev[7] !== 1'bx ) && ( RF_W_DATA_prev[7] !== RF_W_DATA_expected_prev[7] )
		&& ((RF_W_DATA_expected_prev[7] !== last_RF_W_DATA_exp[7]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RF_W_DATA[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RF_W_DATA_expected_prev);
		$display ("     Real value = %b", RF_W_DATA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_RF_W_DATA_exp[7] = RF_W_DATA_expected_prev[7];
	end
	if (
		( Z_expected_prev !== 1'bx ) && ( Z_prev !== Z_expected_prev )
		&& ((Z_expected_prev !== last_Z_exp) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Z :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Z_expected_prev);
		$display ("     Real value = %b", Z_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_Z_exp = Z_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#240000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module Datapath_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [1:0] A_SEL;
reg [1:0] B_SEL;
reg Cin;
reg CLK;
reg [1:0] D_SEL;
reg [15:0] DATA_MEM_OUT;
reg DATA_MEM_SEL;
reg INS_TYPE_MUX_SEL;
reg [15:0] INST_MEM_OUT;
reg LDA;
reg LDQ;
reg MULT_EN;
reg MULT_SEL;
reg [2:0] OAP;
reg PC_EN;
reg [1:0] PC_MUX_SEL;
reg PLUS1_SEL;
reg RF_EN;
reg RST;
reg SL;
reg SR;
reg SR_SEL;
reg UL_SEL;
reg WB_SEL;
// wires                                               
wire [7:0] A;
wire [7:0] ALUOUT;
wire CO;
wire [9:0] DATA_MEM_ADDR_IN;
wire [15:0] DATA_MEM_DATA_IN;
wire N;
wire [3:0] OPCODE;
wire [7:0] OUT_Q;
wire OVF;
wire [15:0] Product;
wire Qm1;
wire [7:0] READ_DATA_A;
wire [7:0] READ_DATA_B;
wire [7:0] RF_OUT_A;
wire [7:0] RF_OUT_B;
wire [2:0] RF_R_ADDR_B;
wire [2:0] RF_W_ADDR;
wire [7:0] RF_W_DATA;
wire Z;

wire sampler;                             

// assign statements (if any)                          
Datapath i1 (
// port map - connection between master ports and signals/registers   
	.A(A),
	.A_SEL(A_SEL),
	.ALUOUT(ALUOUT),
	.B_SEL(B_SEL),
	.Cin(Cin),
	.CLK(CLK),
	.CO(CO),
	.D_SEL(D_SEL),
	.DATA_MEM_ADDR_IN(DATA_MEM_ADDR_IN),
	.DATA_MEM_DATA_IN(DATA_MEM_DATA_IN),
	.DATA_MEM_OUT(DATA_MEM_OUT),
	.DATA_MEM_SEL(DATA_MEM_SEL),
	.INS_TYPE_MUX_SEL(INS_TYPE_MUX_SEL),
	.INST_MEM_OUT(INST_MEM_OUT),
	.LDA(LDA),
	.LDQ(LDQ),
	.MULT_EN(MULT_EN),
	.MULT_SEL(MULT_SEL),
	.N(N),
	.OAP(OAP),
	.OPCODE(OPCODE),
	.OUT_Q(OUT_Q),
	.OVF(OVF),
	.PC_EN(PC_EN),
	.PC_MUX_SEL(PC_MUX_SEL),
	.PLUS1_SEL(PLUS1_SEL),
	.Product(Product),
	.Qm1(Qm1),
	.READ_DATA_A(READ_DATA_A),
	.READ_DATA_B(READ_DATA_B),
	.RF_EN(RF_EN),
	.RF_OUT_A(RF_OUT_A),
	.RF_OUT_B(RF_OUT_B),
	.RF_R_ADDR_B(RF_R_ADDR_B),
	.RF_W_ADDR(RF_W_ADDR),
	.RF_W_DATA(RF_W_DATA),
	.RST(RST),
	.SL(SL),
	.SR(SR),
	.SR_SEL(SR_SEL),
	.UL_SEL(UL_SEL),
	.WB_SEL(WB_SEL),
	.Z(Z)
);

// CLK
always
begin
	CLK = 1'b0;
	CLK = #10000 1'b1;
	#10000;
end 

// RST
initial
begin
	RST = 1'b0;
end 
// INST_MEM_OUT[ 15 ]
initial
begin
	INST_MEM_OUT[15] = 1'b0;
end 
// INST_MEM_OUT[ 14 ]
initial
begin
	INST_MEM_OUT[14] = 1'b0;
end 
// INST_MEM_OUT[ 13 ]
initial
begin
	INST_MEM_OUT[13] = 1'b0;
end 
// INST_MEM_OUT[ 12 ]
initial
begin
	INST_MEM_OUT[12] = 1'b1;
	INST_MEM_OUT[12] = #100000 1'b0;
end 
// INST_MEM_OUT[ 11 ]
initial
begin
	INST_MEM_OUT[11] = 1'b1;
	INST_MEM_OUT[11] = #200000 1'b0;
end 
// INST_MEM_OUT[ 10 ]
initial
begin
	INST_MEM_OUT[10] = 1'b1;
	INST_MEM_OUT[10] = #200000 1'b0;
end 
// INST_MEM_OUT[ 9 ]
initial
begin
	INST_MEM_OUT[9] = 1'b1;
	INST_MEM_OUT[9] = #200000 1'b0;
end 
// INST_MEM_OUT[ 8 ]
initial
begin
	INST_MEM_OUT[8] = 1'b1;
	INST_MEM_OUT[8] = #200000 1'b0;
end 
// INST_MEM_OUT[ 7 ]
initial
begin
	INST_MEM_OUT[7] = 1'b1;
	INST_MEM_OUT[7] = #200000 1'b0;
end 
// INST_MEM_OUT[ 6 ]
initial
begin
	INST_MEM_OUT[6] = 1'b1;
	INST_MEM_OUT[6] = #200000 1'b0;
end 
// INST_MEM_OUT[ 5 ]
initial
begin
	INST_MEM_OUT[5] = 1'b1;
	INST_MEM_OUT[5] = #100000 1'b0;
end 
// INST_MEM_OUT[ 4 ]
initial
begin
	INST_MEM_OUT[4] = 1'b1;
	INST_MEM_OUT[4] = #100000 1'b0;
end 
// INST_MEM_OUT[ 3 ]
initial
begin
	INST_MEM_OUT[3] = 1'b1;
	INST_MEM_OUT[3] = #100000 1'b0;
end 
// INST_MEM_OUT[ 2 ]
initial
begin
	INST_MEM_OUT[2] = 1'b1;
	INST_MEM_OUT[2] = #100000 1'b0;
end 
// INST_MEM_OUT[ 1 ]
initial
begin
	INST_MEM_OUT[1] = 1'b1;
	INST_MEM_OUT[1] = #100000 1'b0;
end 
// INST_MEM_OUT[ 0 ]
initial
begin
	INST_MEM_OUT[0] = 1'b1;
	INST_MEM_OUT[0] = #200000 1'b0;
end 
// DATA_MEM_OUT[ 15 ]
initial
begin
	DATA_MEM_OUT[15] = 1'b1;
	DATA_MEM_OUT[15] = #200000 1'b0;
end 
// DATA_MEM_OUT[ 14 ]
initial
begin
	DATA_MEM_OUT[14] = 1'b0;
end 
// DATA_MEM_OUT[ 13 ]
initial
begin
	DATA_MEM_OUT[13] = 1'b1;
	DATA_MEM_OUT[13] = #200000 1'b0;
end 
// DATA_MEM_OUT[ 12 ]
initial
begin
	DATA_MEM_OUT[12] = 1'b0;
end 
// DATA_MEM_OUT[ 11 ]
initial
begin
	DATA_MEM_OUT[11] = 1'b1;
	DATA_MEM_OUT[11] = #200000 1'b0;
end 
// DATA_MEM_OUT[ 10 ]
initial
begin
	DATA_MEM_OUT[10] = 1'b0;
end 
// DATA_MEM_OUT[ 9 ]
initial
begin
	DATA_MEM_OUT[9] = 1'b1;
	DATA_MEM_OUT[9] = #200000 1'b0;
end 
// DATA_MEM_OUT[ 8 ]
initial
begin
	DATA_MEM_OUT[8] = 1'b1;
	DATA_MEM_OUT[8] = #200000 1'b0;
end 
// DATA_MEM_OUT[ 7 ]
initial
begin
	DATA_MEM_OUT[7] = 1'b0;
end 
// DATA_MEM_OUT[ 6 ]
initial
begin
	DATA_MEM_OUT[6] = 1'b1;
	DATA_MEM_OUT[6] = #200000 1'b0;
end 
// DATA_MEM_OUT[ 5 ]
initial
begin
	DATA_MEM_OUT[5] = 1'b0;
end 
// DATA_MEM_OUT[ 4 ]
initial
begin
	DATA_MEM_OUT[4] = 1'b1;
	DATA_MEM_OUT[4] = #200000 1'b0;
end 
// DATA_MEM_OUT[ 3 ]
initial
begin
	DATA_MEM_OUT[3] = 1'b0;
end 
// DATA_MEM_OUT[ 2 ]
initial
begin
	DATA_MEM_OUT[2] = 1'b1;
	DATA_MEM_OUT[2] = #200000 1'b0;
end 
// DATA_MEM_OUT[ 1 ]
initial
begin
	DATA_MEM_OUT[1] = 1'b0;
end 
// DATA_MEM_OUT[ 0 ]
initial
begin
	DATA_MEM_OUT[0] = 1'b1;
	DATA_MEM_OUT[0] = #200000 1'b0;
end 
// OAP[ 2 ]
initial
begin
	OAP[2] = 1'b0;
end 
// OAP[ 1 ]
initial
begin
	OAP[1] = 1'b0;
end 
// OAP[ 0 ]
initial
begin
	OAP[0] = 1'b0;
end 

// SL
initial
begin
	SL = 1'b0;
end 

// SR
initial
begin
	SR = 1'b0;
end 

// SR_SEL
initial
begin
	SR_SEL = 1'b0;
end 

// UL_SEL
initial
begin
	UL_SEL = 1'b0;
	UL_SEL = #120000 1'b1;
	UL_SEL = #20000 1'b0;
end 

// WB_SEL
initial
begin
	WB_SEL = 1'b0;
	WB_SEL = #120000 1'b1;
	WB_SEL = #20000 1'b0;
end 
// A_SEL[ 1 ]
initial
begin
	A_SEL[1] = 1'b0;
	A_SEL[1] = #20000 1'b1;
	A_SEL[1] = #40000 1'b0;
	A_SEL[1] = #40000 1'b1;
	A_SEL[1] = #110000 1'b0;
end 
// A_SEL[ 0 ]
initial
begin
	A_SEL[0] = 1'b0;
end 
// B_SEL[ 1 ]
initial
begin
	B_SEL[1] = 1'b0;
	B_SEL[1] = #20000 1'b1;
	B_SEL[1] = #40000 1'b0;
	B_SEL[1] = #40000 1'b1;
	B_SEL[1] = #100000 1'b0;
end 
// B_SEL[ 0 ]
initial
begin
	B_SEL[0] = 1'b0;
	B_SEL[0] = #20000 1'b1;
	B_SEL[0] = #40000 1'b0;
	B_SEL[0] = #40000 1'b1;
	B_SEL[0] = #100000 1'b0;
end 
// D_SEL[ 1 ]
initial
begin
	D_SEL[1] = 1'b0;
	D_SEL[1] = #20000 1'b1;
	D_SEL[1] = #20000 1'b0;
	D_SEL[1] = #60000 1'b1;
	D_SEL[1] = #100000 1'b0;
end 
// D_SEL[ 0 ]
initial
begin
	D_SEL[0] = 1'b0;
	D_SEL[0] = #40000 1'b1;
	D_SEL[0] = #40000 1'b0;
	D_SEL[0] = #20000 1'b1;
	D_SEL[0] = #40000 1'b0;
end 

// INS_TYPE_MUX_SEL
initial
begin
	INS_TYPE_MUX_SEL = 1'b0;
	INS_TYPE_MUX_SEL = #100000 1'b1;
	INS_TYPE_MUX_SEL = #20000 1'b0;
end 

// LDA
initial
begin
	LDA = 1'b0;
	LDA = #20000 1'b1;
	LDA = #20000 1'b0;
	LDA = #60000 1'b1;
	LDA = #20000 1'b0;
end 

// LDQ
initial
begin
	LDQ = 1'b0;
	LDQ = #100000 1'b1;
	LDQ = #20000 1'b0;
end 

// MULT_EN
initial
begin
	MULT_EN = 1'b0;
end 

// MULT_SEL
initial
begin
	MULT_SEL = 1'b0;
end 

// PC_EN
initial
begin
	PC_EN = 1'b0;
end 
// PC_MUX_SEL[ 1 ]
initial
begin
	PC_MUX_SEL[1] = 1'b0;
end 
// PC_MUX_SEL[ 0 ]
initial
begin
	PC_MUX_SEL[0] = 1'b0;
end 

// PLUS1_SEL
initial
begin
	PLUS1_SEL = 1'b0;
end 

// RF_EN
initial
begin
	RF_EN = 1'b0;
	RF_EN = #40000 1'b1;
	RF_EN = #20000 1'b0;
end 

// Cin
initial
begin
	Cin = 1'b0;
end 

// DATA_MEM_SEL
initial
begin
	DATA_MEM_SEL = 1'b0;
end 

Datapath_vlg_sample_tst tb_sample (
	.A_SEL(A_SEL),
	.B_SEL(B_SEL),
	.Cin(Cin),
	.CLK(CLK),
	.D_SEL(D_SEL),
	.DATA_MEM_OUT(DATA_MEM_OUT),
	.DATA_MEM_SEL(DATA_MEM_SEL),
	.INS_TYPE_MUX_SEL(INS_TYPE_MUX_SEL),
	.INST_MEM_OUT(INST_MEM_OUT),
	.LDA(LDA),
	.LDQ(LDQ),
	.MULT_EN(MULT_EN),
	.MULT_SEL(MULT_SEL),
	.OAP(OAP),
	.PC_EN(PC_EN),
	.PC_MUX_SEL(PC_MUX_SEL),
	.PLUS1_SEL(PLUS1_SEL),
	.RF_EN(RF_EN),
	.RST(RST),
	.SL(SL),
	.SR(SR),
	.SR_SEL(SR_SEL),
	.UL_SEL(UL_SEL),
	.WB_SEL(WB_SEL),
	.sampler_tx(sampler)
);

Datapath_vlg_check_tst tb_out(
	.A(A),
	.ALUOUT(ALUOUT),
	.CO(CO),
	.DATA_MEM_ADDR_IN(DATA_MEM_ADDR_IN),
	.DATA_MEM_DATA_IN(DATA_MEM_DATA_IN),
	.N(N),
	.OPCODE(OPCODE),
	.OUT_Q(OUT_Q),
	.OVF(OVF),
	.Product(Product),
	.Qm1(Qm1),
	.READ_DATA_A(READ_DATA_A),
	.READ_DATA_B(READ_DATA_B),
	.RF_OUT_A(RF_OUT_A),
	.RF_OUT_B(RF_OUT_B),
	.RF_R_ADDR_B(RF_R_ADDR_B),
	.RF_W_ADDR(RF_W_ADDR),
	.RF_W_DATA(RF_W_DATA),
	.Z(Z),
	.sampler_rx(sampler)
);
endmodule

